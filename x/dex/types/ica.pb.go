// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/v1/ica.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccountStatus defines the status of an ICA account
type AccountStatus int32

const (
	// Account is pending creation
	ACCOUNT_STATUS_PENDING AccountStatus = 0
	// Account is active and ready
	ACCOUNT_STATUS_ACTIVE AccountStatus = 1
	// Account is temporarily disabled
	ACCOUNT_STATUS_DISABLED AccountStatus = 2
	// Account creation failed
	ACCOUNT_STATUS_FAILED AccountStatus = 3
)

var AccountStatus_name = map[int32]string{
	0: "ACCOUNT_STATUS_PENDING",
	1: "ACCOUNT_STATUS_ACTIVE",
	2: "ACCOUNT_STATUS_DISABLED",
	3: "ACCOUNT_STATUS_FAILED",
}

var AccountStatus_value = map[string]int32{
	"ACCOUNT_STATUS_PENDING":  0,
	"ACCOUNT_STATUS_ACTIVE":   1,
	"ACCOUNT_STATUS_DISABLED": 2,
	"ACCOUNT_STATUS_FAILED":   3,
}

func (x AccountStatus) String() string {
	return proto.EnumName(AccountStatus_name, int32(x))
}

func (AccountStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ed494d1227c1157, []int{0}
}

// DEXFeatures defines available features for DEX accounts
type DEXFeatures int32

const (
	// Basic swap functionality
	DEX_FEATURE_SWAP DEXFeatures = 0
	// Liquidity provision
	DEX_FEATURE_LIQUIDITY DEXFeatures = 1
	// Limit orders
	DEX_FEATURE_ORDERS DEXFeatures = 2
	// Staking operations
	DEX_FEATURE_STAKING DEXFeatures = 3
	// Governance participation
	DEX_FEATURE_GOVERNANCE DEXFeatures = 4
)

var DEXFeatures_name = map[int32]string{
	0: "DEX_FEATURE_SWAP",
	1: "DEX_FEATURE_LIQUIDITY",
	2: "DEX_FEATURE_ORDERS",
	3: "DEX_FEATURE_STAKING",
	4: "DEX_FEATURE_GOVERNANCE",
}

var DEXFeatures_value = map[string]int32{
	"DEX_FEATURE_SWAP":       0,
	"DEX_FEATURE_LIQUIDITY":  1,
	"DEX_FEATURE_ORDERS":     2,
	"DEX_FEATURE_STAKING":    3,
	"DEX_FEATURE_GOVERNANCE": 4,
}

func (x DEXFeatures) String() string {
	return proto.EnumName(DEXFeatures_name, int32(x))
}

func (DEXFeatures) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ed494d1227c1157, []int{1}
}

// InterchainDEXAccount represents a DEX account on a remote chain
type InterchainDEXAccount struct {
	// DID controller of this account
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to the remote chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Remote chain ID (e.g., osmosis-1)
	HostChainId string `protobuf:"bytes,3,opt,name=host_chain_id,json=hostChainId,proto3" json:"host_chain_id,omitempty"`
	// Account address on the remote chain
	AccountAddress string `protobuf:"bytes,4,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// ICA port ID for this account
	PortId string `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// Account creation timestamp
	CreatedAt time.Time `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	// Enabled features for this account
	EnabledFeatures []string `protobuf:"bytes,7,rep,name=enabled_features,json=enabledFeatures,proto3" json:"enabled_features,omitempty"`
	// Account status
	Status AccountStatus `protobuf:"varint,8,opt,name=status,proto3,enum=dex.v1.AccountStatus" json:"status,omitempty"`
}

func (m *InterchainDEXAccount) Reset()         { *m = InterchainDEXAccount{} }
func (m *InterchainDEXAccount) String() string { return proto.CompactTextString(m) }
func (*InterchainDEXAccount) ProtoMessage()    {}
func (*InterchainDEXAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed494d1227c1157, []int{0}
}
func (m *InterchainDEXAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainDEXAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainDEXAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainDEXAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainDEXAccount.Merge(m, src)
}
func (m *InterchainDEXAccount) XXX_Size() int {
	return m.Size()
}
func (m *InterchainDEXAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainDEXAccount.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainDEXAccount proto.InternalMessageInfo

// DEXActivity represents a DEX operation activity record
type DEXActivity struct {
	// Type of activity (swap, provide_liquidity, remove_liquidity, create_order, cancel_order)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// DID that performed the activity
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Connection ID where the activity occurred
	ConnectionId string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Transaction hash of the activity
	TxHash string `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Block height when the activity occurred
	BlockHeight int64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Timestamp of the activity
	Timestamp time.Time `protobuf:"bytes,6,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// Activity-specific details (JSON encoded)
	Details string `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	// Status of the activity (pending, success, failed)
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// Amount involved in the activity (if applicable)
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// Gas used for the activity
	GasUsed uint64 `protobuf:"varint,10,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (m *DEXActivity) Reset()         { *m = DEXActivity{} }
func (m *DEXActivity) String() string { return proto.CompactTextString(m) }
func (*DEXActivity) ProtoMessage()    {}
func (*DEXActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed494d1227c1157, []int{1}
}
func (m *DEXActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DEXActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DEXActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DEXActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DEXActivity.Merge(m, src)
}
func (m *DEXActivity) XXX_Size() int {
	return m.Size()
}
func (m *DEXActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_DEXActivity.DiscardUnknown(m)
}

var xxx_messageInfo_DEXActivity proto.InternalMessageInfo

func (m *DEXActivity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DEXActivity) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *DEXActivity) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *DEXActivity) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *DEXActivity) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DEXActivity) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *DEXActivity) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *DEXActivity) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DEXActivity) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *DEXActivity) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func init() {
	proto.RegisterEnum("dex.v1.AccountStatus", AccountStatus_name, AccountStatus_value)
	proto.RegisterEnum("dex.v1.DEXFeatures", DEXFeatures_name, DEXFeatures_value)
	proto.RegisterType((*InterchainDEXAccount)(nil), "dex.v1.InterchainDEXAccount")
	proto.RegisterType((*DEXActivity)(nil), "dex.v1.DEXActivity")
}

func init() { proto.RegisterFile("dex/v1/ica.proto", fileDescriptor_5ed494d1227c1157) }

var fileDescriptor_5ed494d1227c1157 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x6f, 0xdb, 0x36,
	0x14, 0xc7, 0x2d, 0xcb, 0xb3, 0x63, 0xba, 0x69, 0x05, 0x2e, 0x4d, 0x14, 0x0f, 0x90, 0xbd, 0xf4,
	0xe2, 0x15, 0x88, 0x34, 0x67, 0xb7, 0x01, 0x3b, 0xc8, 0xb6, 0xd2, 0x0a, 0x2b, 0x9c, 0x4e, 0x96,
	0xbb, 0x6e, 0x17, 0x81, 0x16, 0x59, 0x49, 0xa8, 0x2d, 0x1a, 0x22, 0x6d, 0xb8, 0xf7, 0x1d, 0x8a,
	0x9d, 0xba, 0x6f, 0x30, 0x60, 0xb7, 0x9d, 0xf7, 0x21, 0x7a, 0x2c, 0x76, 0xda, 0x69, 0x1d, 0x92,
	0x6f, 0xb0, 0x4f, 0x30, 0x90, 0xa2, 0x33, 0xa7, 0x08, 0x06, 0xec, 0x44, 0xf2, 0xff, 0x7f, 0x8f,
	0xcf, 0xfc, 0xbd, 0x67, 0x01, 0x03, 0x93, 0x8d, 0xb3, 0xee, 0x3b, 0x59, 0x8c, 0xec, 0x65, 0x41,
	0x39, 0x85, 0x75, 0x4c, 0x36, 0xf6, 0xba, 0xdf, 0x3e, 0x48, 0x68, 0x42, 0xa5, 0xe4, 0x88, 0x5d,
	0xe9, 0xb6, 0x8f, 0x63, 0xca, 0x16, 0x94, 0x45, 0xa5, 0x51, 0x1e, 0x94, 0xd5, 0x49, 0x28, 0x4d,
	0xe6, 0xc4, 0x91, 0xa7, 0xd9, 0xea, 0x85, 0xc3, 0xb3, 0x05, 0x61, 0x1c, 0x2d, 0x96, 0x2a, 0xc0,
	0x2a, 0xc3, 0x9d, 0x19, 0x62, 0xc4, 0x59, 0xf7, 0x67, 0x84, 0xa3, 0xbe, 0x13, 0xd3, 0x2c, 0x2f,
	0xfd, 0x93, 0xbf, 0xab, 0xe0, 0xc0, 0xcf, 0x39, 0x29, 0xe2, 0x14, 0x65, 0xf9, 0xc8, 0x7b, 0xee,
	0xc6, 0x31, 0x5d, 0xe5, 0x1c, 0x1a, 0x40, 0xc7, 0x19, 0x36, 0xb5, 0xae, 0xd6, 0x6b, 0x06, 0x62,
	0x0b, 0x1f, 0x80, 0xfd, 0x98, 0xe6, 0x39, 0x89, 0x79, 0x46, 0xf3, 0x28, 0xc3, 0x66, 0x55, 0x7a,
	0x77, 0xfe, 0x15, 0x7d, 0x0c, 0x4f, 0xc0, 0x7e, 0x4a, 0x19, 0x8f, 0xe4, 0x75, 0x22, 0x48, 0x97,
	0x41, 0x2d, 0x21, 0x0e, 0x85, 0xe6, 0x63, 0xe8, 0x82, 0x7b, 0xa8, 0xac, 0x12, 0x21, 0x8c, 0x0b,
	0xc2, 0x98, 0x59, 0x13, 0x51, 0x03, 0xf3, 0xf7, 0xdf, 0x4e, 0x0f, 0xd4, 0xfb, 0xdc, 0xd2, 0x99,
	0xf0, 0x22, 0xcb, 0x93, 0xe0, 0xae, 0x4a, 0x50, 0x2a, 0x3c, 0x02, 0x8d, 0x25, 0x2d, 0xb8, 0x28,
	0xf0, 0x91, 0x2c, 0x50, 0x17, 0x47, 0x1f, 0xc3, 0x21, 0x00, 0x71, 0x41, 0x10, 0x27, 0x38, 0x42,
	0xdc, 0xac, 0x77, 0xb5, 0x5e, 0xeb, 0xac, 0x6d, 0x97, 0x94, 0xec, 0x2d, 0x25, 0x3b, 0xdc, 0x52,
	0x1a, 0xec, 0xbd, 0xfd, 0xb3, 0x53, 0x79, 0xf3, 0xbe, 0xa3, 0x05, 0x4d, 0x95, 0xe7, 0x72, 0xf8,
	0x19, 0x30, 0x48, 0x8e, 0x66, 0x73, 0x82, 0xa3, 0x17, 0x04, 0xf1, 0x55, 0x41, 0x98, 0xd9, 0xe8,
	0xea, 0xbd, 0x66, 0x70, 0x4f, 0xe9, 0xe7, 0x4a, 0x86, 0xa7, 0xa0, 0xce, 0x38, 0xe2, 0x2b, 0x66,
	0xee, 0x75, 0xb5, 0xde, 0xdd, 0xb3, 0xfb, 0x76, 0xd9, 0x4a, 0x5b, 0x71, 0x9c, 0x48, 0x33, 0x50,
	0x41, 0x5f, 0xd6, 0x5e, 0xff, 0xdc, 0xa9, 0x9c, 0xfc, 0xa8, 0x83, 0x96, 0x44, 0xcd, 0xb3, 0x75,
	0xc6, 0x5f, 0x41, 0x08, 0x6a, 0xfc, 0xd5, 0x92, 0x28, 0xd8, 0x72, 0xbf, 0xe5, 0x5f, 0xfd, 0x0f,
	0xfe, 0xfa, 0x2d, 0xfc, 0x8f, 0x40, 0x83, 0x6f, 0xa2, 0x14, 0xb1, 0xb4, 0x64, 0x1a, 0xd4, 0xf9,
	0xe6, 0x31, 0x62, 0x29, 0xfc, 0x14, 0xdc, 0x99, 0xcd, 0x69, 0xfc, 0x32, 0x4a, 0x49, 0x96, 0xa4,
	0x5c, 0x62, 0xd3, 0x83, 0x96, 0xd4, 0x1e, 0x4b, 0x09, 0x0e, 0x40, 0xf3, 0x7a, 0x7c, 0xfe, 0x1f,
	0xba, 0xeb, 0x34, 0x68, 0x82, 0x06, 0x26, 0x1c, 0x65, 0x73, 0x41, 0x4c, 0xd4, 0xdf, 0x1e, 0xe1,
	0xe1, 0x0d, 0x52, 0xcd, 0x2d, 0x12, 0x18, 0x83, 0x3a, 0x5a, 0x08, 0x54, 0x66, 0xb3, 0xab, 0xf7,
	0x5a, 0x67, 0xc7, 0xb6, 0x9a, 0x00, 0x31, 0xb2, 0xb6, 0x1a, 0x59, 0x7b, 0x48, 0xb3, 0x7c, 0xf0,
	0xb9, 0xa8, 0xf8, 0xeb, 0xfb, 0x4e, 0x2f, 0xc9, 0x78, 0xba, 0x9a, 0xd9, 0x31, 0x5d, 0xa8, 0xbf,
	0x83, 0x5a, 0x4e, 0x19, 0x7e, 0xe9, 0x08, 0x7c, 0x4c, 0x26, 0xb0, 0x40, 0x5d, 0x0d, 0x8f, 0xc1,
	0x5e, 0x82, 0x58, 0xb4, 0x62, 0x04, 0x9b, 0xa0, 0xab, 0xf5, 0x6a, 0x41, 0x23, 0x41, 0x6c, 0xca,
	0x08, 0x7e, 0xf8, 0x83, 0x06, 0xf6, 0x6f, 0x34, 0x0b, 0xb6, 0xc1, 0xa1, 0x3b, 0x1c, 0x5e, 0x4c,
	0xc7, 0x61, 0x34, 0x09, 0xdd, 0x70, 0x3a, 0x89, 0x9e, 0x7a, 0xe3, 0x91, 0x3f, 0x7e, 0x64, 0x54,
	0xe0, 0x31, 0xb8, 0xff, 0x81, 0xe7, 0x0e, 0x43, 0xff, 0x99, 0x67, 0x68, 0xf0, 0x13, 0x70, 0xf4,
	0x81, 0x35, 0xf2, 0x27, 0xee, 0xe0, 0x89, 0x37, 0x32, 0xaa, 0xb7, 0xe4, 0x9d, 0xbb, 0xbe, 0xb0,
	0xf4, 0x76, 0xed, 0xf5, 0x2f, 0x56, 0xe5, 0xe1, 0x4f, 0x9a, 0x9c, 0x89, 0xeb, 0xc1, 0x3a, 0x00,
	0xc6, 0xc8, 0x7b, 0x1e, 0x9d, 0x7b, 0x6e, 0x38, 0x0d, 0xbc, 0x68, 0xf2, 0xad, 0xfb, 0xb4, 0x2c,
	0xbf, 0xab, 0x3e, 0xf1, 0xbf, 0x99, 0xfa, 0x23, 0x3f, 0xfc, 0xce, 0xd0, 0xe0, 0x21, 0x80, 0xbb,
	0xd6, 0x45, 0x30, 0xf2, 0x82, 0x89, 0x51, 0x85, 0x47, 0xe0, 0xe3, 0x1b, 0x17, 0x85, 0xee, 0xd7,
	0xe2, 0x29, 0xba, 0x78, 0xe6, 0xae, 0xf1, 0xe8, 0xe2, 0x99, 0x17, 0x8c, 0xdd, 0xf1, 0xd0, 0x33,
	0x6a, 0xe5, 0x6f, 0x1a, 0x7c, 0xf5, 0xf6, 0xd2, 0xd2, 0xde, 0x5d, 0x5a, 0xda, 0x5f, 0x97, 0x96,
	0xf6, 0xe6, 0xca, 0xaa, 0xbc, 0xbb, 0xb2, 0x2a, 0x7f, 0x5c, 0x59, 0x95, 0xef, 0x1f, 0xec, 0x74,
	0x80, 0xd1, 0xbc, 0x38, 0xcd, 0xa8, 0x5c, 0x9d, 0x8d, 0x23, 0x3e, 0x6e, 0xb2, 0x05, 0xb3, 0xba,
	0x1c, 0x9a, 0x2f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x12, 0x72, 0xbe, 0x56, 0xf0, 0x04, 0x00,
	0x00,
}

func (m *InterchainDEXAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainDEXAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainDEXAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintIca(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EnabledFeatures) > 0 {
		for iNdEx := len(m.EnabledFeatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnabledFeatures[iNdEx])
			copy(dAtA[i:], m.EnabledFeatures[iNdEx])
			i = encodeVarintIca(dAtA, i, uint64(len(m.EnabledFeatures[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintIca(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintIca(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintIca(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HostChainId) > 0 {
		i -= len(m.HostChainId)
		copy(dAtA[i:], m.HostChainId)
		i = encodeVarintIca(dAtA, i, uint64(len(m.HostChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintIca(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintIca(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DEXActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DEXActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DEXActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasUsed != 0 {
		i = encodeVarintIca(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIca(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintIca(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintIca(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x3a
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintIca(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if m.BlockHeight != 0 {
		i = encodeVarintIca(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintIca(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintIca(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintIca(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintIca(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIca(dAtA []byte, offset int, v uint64) int {
	offset -= sovIca(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainDEXAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.HostChainId)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovIca(uint64(l))
	if len(m.EnabledFeatures) > 0 {
		for _, s := range m.EnabledFeatures {
			l = len(s)
			n += 1 + l + sovIca(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovIca(uint64(m.Status))
	}
	return n
}

func (m *DEXActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIca(uint64(m.BlockHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovIca(uint64(l))
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovIca(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovIca(uint64(l))
		}
	}
	if m.GasUsed != 0 {
		n += 1 + sovIca(uint64(m.GasUsed))
	}
	return n
}

func sovIca(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIca(x uint64) (n int) {
	return sovIca(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainDEXAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIca
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainDEXAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainDEXAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledFeatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledFeatures = append(m.EnabledFeatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIca(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIca
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DEXActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIca
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DEXActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DEXActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIca
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIca
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIca
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIca(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIca
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIca(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIca
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIca
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIca
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIca
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIca
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIca
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIca        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIca          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIca = fmt.Errorf("proto: unexpected end of group")
)
