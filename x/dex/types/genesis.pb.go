// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/v1/genesis.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the DEX module's genesis state
type GenesisState struct {
	// Module parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// IBC port ID for the module
	PortId string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// Registered DEX accounts
	Accounts []*InterchainDEXAccount `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// Account sequence counter
	AccountSequence uint64 `protobuf:"varint,4,opt,name=account_sequence,json=accountSequence,proto3" json:"account_sequence,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a0429c56f27456, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *GenesisState) GetAccounts() []*InterchainDEXAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *GenesisState) GetAccountSequence() uint64 {
	if m != nil {
		return m.AccountSequence
	}
	return 0
}

// Params defines the parameters for the DEX module
type Params struct {
	// Enable/disable the module
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Maximum accounts per DID
	MaxAccountsPerDid uint32 `protobuf:"varint,2,opt,name=max_accounts_per_did,json=maxAccountsPerDid,proto3" json:"max_accounts_per_did,omitempty"`
	// Default timeout for ICA operations (in seconds)
	DefaultTimeoutSeconds uint64 `protobuf:"varint,3,opt,name=default_timeout_seconds,json=defaultTimeoutSeconds,proto3" json:"default_timeout_seconds,omitempty"`
	// Allowed DEX connections
	AllowedConnections []string `protobuf:"bytes,4,rep,name=allowed_connections,json=allowedConnections,proto3" json:"allowed_connections,omitempty"`
	// Minimum swap amount (in base denom)
	MinSwapAmount string `protobuf:"bytes,5,opt,name=min_swap_amount,json=minSwapAmount,proto3" json:"min_swap_amount,omitempty"`
	// Maximum daily volume per DID (in USD equivalent)
	MaxDailyVolume string `protobuf:"bytes,6,opt,name=max_daily_volume,json=maxDailyVolume,proto3" json:"max_daily_volume,omitempty"`
	// Rate limit parameters
	RateLimits RateLimitParams `protobuf:"bytes,7,opt,name=rate_limits,json=rateLimits,proto3" json:"rate_limits"`
	// Fee parameters
	Fees FeeParams `protobuf:"bytes,8,opt,name=fees,proto3" json:"fees"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a0429c56f27456, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// RateLimitParams defines rate limiting parameters
type RateLimitParams struct {
	// Maximum operations per block
	MaxOpsPerBlock uint32 `protobuf:"varint,1,opt,name=max_ops_per_block,json=maxOpsPerBlock,proto3" json:"max_ops_per_block,omitempty"`
	// Maximum operations per DID per day
	MaxOpsPerDidPerDay uint32 `protobuf:"varint,2,opt,name=max_ops_per_did_per_day,json=maxOpsPerDidPerDay,proto3" json:"max_ops_per_did_per_day,omitempty"`
	// Cooldown period between operations (in blocks)
	CooldownBlocks uint32 `protobuf:"varint,3,opt,name=cooldown_blocks,json=cooldownBlocks,proto3" json:"cooldown_blocks,omitempty"`
}

func (m *RateLimitParams) Reset()         { *m = RateLimitParams{} }
func (m *RateLimitParams) String() string { return proto.CompactTextString(m) }
func (*RateLimitParams) ProtoMessage()    {}
func (*RateLimitParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a0429c56f27456, []int{2}
}
func (m *RateLimitParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitParams.Merge(m, src)
}
func (m *RateLimitParams) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitParams.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitParams proto.InternalMessageInfo

func (m *RateLimitParams) GetMaxOpsPerBlock() uint32 {
	if m != nil {
		return m.MaxOpsPerBlock
	}
	return 0
}

func (m *RateLimitParams) GetMaxOpsPerDidPerDay() uint32 {
	if m != nil {
		return m.MaxOpsPerDidPerDay
	}
	return 0
}

func (m *RateLimitParams) GetCooldownBlocks() uint32 {
	if m != nil {
		return m.CooldownBlocks
	}
	return 0
}

// FeeParams defines fee parameters for DEX operations
type FeeParams struct {
	// Platform fee for swaps (basis points, e.g., 30 = 0.3%)
	SwapFeeBps uint32 `protobuf:"varint,1,opt,name=swap_fee_bps,json=swapFeeBps,proto3" json:"swap_fee_bps,omitempty"`
	// Platform fee for liquidity operations
	LiquidityFeeBps uint32 `protobuf:"varint,2,opt,name=liquidity_fee_bps,json=liquidityFeeBps,proto3" json:"liquidity_fee_bps,omitempty"`
	// Platform fee for orders
	OrderFeeBps uint32 `protobuf:"varint,3,opt,name=order_fee_bps,json=orderFeeBps,proto3" json:"order_fee_bps,omitempty"`
	// Fee collector address
	FeeCollector string `protobuf:"bytes,4,opt,name=fee_collector,json=feeCollector,proto3" json:"fee_collector,omitempty"`
}

func (m *FeeParams) Reset()         { *m = FeeParams{} }
func (m *FeeParams) String() string { return proto.CompactTextString(m) }
func (*FeeParams) ProtoMessage()    {}
func (*FeeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a0429c56f27456, []int{3}
}
func (m *FeeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeParams.Merge(m, src)
}
func (m *FeeParams) XXX_Size() int {
	return m.Size()
}
func (m *FeeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeParams.DiscardUnknown(m)
}

var xxx_messageInfo_FeeParams proto.InternalMessageInfo

func (m *FeeParams) GetSwapFeeBps() uint32 {
	if m != nil {
		return m.SwapFeeBps
	}
	return 0
}

func (m *FeeParams) GetLiquidityFeeBps() uint32 {
	if m != nil {
		return m.LiquidityFeeBps
	}
	return 0
}

func (m *FeeParams) GetOrderFeeBps() uint32 {
	if m != nil {
		return m.OrderFeeBps
	}
	return 0
}

func (m *FeeParams) GetFeeCollector() string {
	if m != nil {
		return m.FeeCollector
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "dex.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "dex.v1.Params")
	proto.RegisterType((*RateLimitParams)(nil), "dex.v1.RateLimitParams")
	proto.RegisterType((*FeeParams)(nil), "dex.v1.FeeParams")
}

func init() { proto.RegisterFile("dex/v1/genesis.proto", fileDescriptor_12a0429c56f27456) }

var fileDescriptor_12a0429c56f27456 = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x53, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xce, 0xfe, 0x92, 0x5f, 0xda, 0x4c, 0x9a, 0xa6, 0x1d, 0x2b, 0x59, 0x8a, 0xa4, 0x21, 0x05,
	0x4d, 0xfd, 0x93, 0xa5, 0x2d, 0x88, 0x08, 0x0a, 0x4d, 0x63, 0xa5, 0x20, 0x58, 0x36, 0x22, 0xe2,
	0x65, 0x99, 0xec, 0xbc, 0x49, 0x07, 0x77, 0x67, 0xb6, 0x3b, 0x93, 0x26, 0x39, 0x7a, 0xf3, 0xe8,
	0xd9, 0x93, 0xf8, 0x31, 0xfc, 0x04, 0x3d, 0xf6, 0xe8, 0x49, 0xa4, 0xfd, 0x22, 0x32, 0x33, 0xbb,
	0xd1, 0x7a, 0xd9, 0x99, 0x79, 0x9e, 0xe7, 0x7d, 0x78, 0xe6, 0x7d, 0x77, 0xd0, 0x06, 0x85, 0x99,
	0x77, 0xbe, 0xeb, 0x8d, 0x81, 0x83, 0x64, 0xb2, 0x9b, 0xa4, 0x42, 0x09, 0x5c, 0xa6, 0x30, 0xeb,
	0x9e, 0xef, 0x6e, 0x6e, 0x8c, 0xc5, 0x58, 0x18, 0xc8, 0xd3, 0x3b, 0xcb, 0x6e, 0xae, 0x65, 0x35,
	0x2c, 0x24, 0x16, 0x69, 0x7f, 0x77, 0xd0, 0xca, 0x4b, 0xeb, 0x30, 0x50, 0x44, 0x01, 0x7e, 0x88,
	0xca, 0x09, 0x49, 0x49, 0x2c, 0x5d, 0xa7, 0xe5, 0x74, 0xaa, 0x7b, 0xab, 0x5d, 0xeb, 0xd8, 0x3d,
	0x31, 0x68, 0xaf, 0x74, 0xf1, 0x73, 0xab, 0xe0, 0x67, 0x1a, 0xdc, 0x40, 0x4b, 0x89, 0x48, 0x55,
	0xc0, 0xa8, 0xfb, 0x5f, 0xcb, 0xe9, 0x54, 0xfc, 0xb2, 0x3e, 0x1e, 0x53, 0xfc, 0x04, 0x2d, 0x93,
	0x30, 0x14, 0x13, 0xae, 0xa4, 0x5b, 0x6c, 0x15, 0x3b, 0xd5, 0xbd, 0x3b, 0xb9, 0xd1, 0x31, 0x57,
	0x90, 0x86, 0xa7, 0x84, 0xf1, 0xfe, 0x8b, 0x77, 0x07, 0x56, 0xe4, 0x2f, 0xd4, 0x78, 0x07, 0xad,
	0x65, 0xfb, 0x40, 0xc2, 0xd9, 0x04, 0x78, 0x08, 0x6e, 0xa9, 0xe5, 0x74, 0x4a, 0x7e, 0x3d, 0xc3,
	0x07, 0x19, 0xdc, 0xfe, 0x58, 0x44, 0x65, 0x1b, 0x0b, 0xbb, 0x68, 0x09, 0x38, 0x19, 0x46, 0x40,
	0x4d, 0xee, 0x65, 0x3f, 0x3f, 0x62, 0x0f, 0x6d, 0xc4, 0x64, 0x16, 0xe4, 0xfe, 0x41, 0x02, 0x69,
	0x40, 0xb3, 0xbc, 0x35, 0x7f, 0x3d, 0x26, 0xb3, 0x2c, 0x83, 0x3c, 0x81, 0xb4, 0xcf, 0x28, 0x7e,
	0x8c, 0x1a, 0x14, 0x46, 0x64, 0x12, 0xa9, 0x40, 0xb1, 0x18, 0xc4, 0x44, 0x07, 0x09, 0x05, 0xa7,
	0xfa, 0x26, 0x3a, 0xc7, 0xed, 0x8c, 0x7e, 0x63, 0xd9, 0x81, 0x25, 0xb1, 0x87, 0x6e, 0x91, 0x28,
	0x12, 0x53, 0xa0, 0x41, 0x28, 0x38, 0x87, 0x50, 0x31, 0xc1, 0xa5, 0x5b, 0x6a, 0x15, 0x3b, 0x15,
	0x1f, 0x67, 0xd4, 0xe1, 0x1f, 0x06, 0xdf, 0x45, 0xf5, 0x98, 0xf1, 0x40, 0x4e, 0x49, 0x12, 0x90,
	0x58, 0x47, 0x70, 0xff, 0x37, 0x4d, 0xac, 0xc5, 0x8c, 0x0f, 0xa6, 0x24, 0x39, 0x30, 0x20, 0xee,
	0xa0, 0x35, 0x7d, 0x03, 0x4a, 0x58, 0x34, 0x0f, 0xce, 0x45, 0x34, 0x89, 0xc1, 0x2d, 0x1b, 0xe1,
	0x6a, 0x4c, 0x66, 0x7d, 0x0d, 0xbf, 0x35, 0x28, 0x7e, 0x8e, 0xaa, 0x29, 0x51, 0x10, 0x44, 0x2c,
	0x66, 0x4a, 0xba, 0x4b, 0x66, 0x82, 0x8d, 0xbc, 0xf1, 0x3e, 0x51, 0xf0, 0x4a, 0x33, 0x37, 0x46,
	0x89, 0xd2, 0x1c, 0x96, 0xf8, 0x01, 0x2a, 0x8d, 0x00, 0xa4, 0xbb, 0x6c, 0x0a, 0xd7, 0xf3, 0xc2,
	0x23, 0x80, 0x1b, 0x25, 0x46, 0xf4, 0xb4, 0xf4, 0xe9, 0xeb, 0x56, 0xa1, 0xfd, 0xc5, 0x41, 0xf5,
	0x7f, 0x8c, 0xf1, 0x0e, 0xd2, 0x6d, 0x0d, 0x44, 0x62, 0xbb, 0x3d, 0x8c, 0x44, 0xf8, 0xc1, 0x8c,
	0xa5, 0x66, 0x12, 0xbf, 0x4e, 0x74, 0xab, 0x7b, 0x1a, 0xc5, 0xfb, 0xa8, 0xf1, 0xb7, 0x94, 0x32,
	0x6a, 0x57, 0x32, 0xcf, 0x06, 0x84, 0x17, 0x05, 0x7d, 0x46, 0xf5, 0x97, 0xcc, 0xf1, 0x3d, 0x54,
	0x0f, 0x85, 0x88, 0xa8, 0x98, 0x72, 0x6b, 0x6e, 0x27, 0x53, 0xf3, 0x57, 0x73, 0xd8, 0x98, 0xcb,
	0xf6, 0x37, 0x07, 0x55, 0x16, 0xe1, 0x71, 0x0b, 0xad, 0x98, 0x5e, 0x8f, 0x00, 0x82, 0x61, 0x22,
	0xb3, 0x44, 0x48, 0x63, 0x47, 0x00, 0xbd, 0x44, 0xe2, 0xfb, 0x68, 0x3d, 0x62, 0x67, 0x13, 0x46,
	0x99, 0x9a, 0x2f, 0x64, 0x36, 0x47, 0x7d, 0x41, 0x64, 0xda, 0x36, 0xaa, 0x89, 0x94, 0x42, 0xba,
	0xd0, 0xd9, 0x08, 0x55, 0x03, 0x66, 0x9a, 0x6d, 0x54, 0xd3, 0x6c, 0x28, 0xa2, 0x08, 0x42, 0x25,
	0x52, 0xf3, 0x23, 0x57, 0xfc, 0x95, 0x11, 0xc0, 0x61, 0x8e, 0xf5, 0x9e, 0x5d, 0x5c, 0x35, 0x9d,
	0xcb, 0xab, 0xa6, 0xf3, 0xeb, 0xaa, 0xe9, 0x7c, 0xbe, 0x6e, 0x16, 0x2e, 0xaf, 0x9b, 0x85, 0x1f,
	0xd7, 0xcd, 0xc2, 0xfb, 0xed, 0x31, 0x53, 0xa7, 0x93, 0x61, 0x37, 0x14, 0xb1, 0x27, 0x05, 0x4f,
	0x1f, 0x31, 0x61, 0x56, 0x6f, 0xe6, 0xe9, 0x87, 0xac, 0xe6, 0x09, 0xc8, 0x61, 0xd9, 0x3c, 0xe4,
	0xfd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x36, 0x4a, 0xbf, 0x16, 0x10, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountSequence != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AccountSequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.RateLimits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.MaxDailyVolume) > 0 {
		i -= len(m.MaxDailyVolume)
		copy(dAtA[i:], m.MaxDailyVolume)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MaxDailyVolume)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MinSwapAmount) > 0 {
		i -= len(m.MinSwapAmount)
		copy(dAtA[i:], m.MinSwapAmount)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MinSwapAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AllowedConnections) > 0 {
		for iNdEx := len(m.AllowedConnections) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedConnections[iNdEx])
			copy(dAtA[i:], m.AllowedConnections[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AllowedConnections[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DefaultTimeoutSeconds != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DefaultTimeoutSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxAccountsPerDid != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxAccountsPerDid))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CooldownBlocks != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CooldownBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxOpsPerDidPerDay != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxOpsPerDidPerDay))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxOpsPerBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxOpsPerBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeCollector) > 0 {
		i -= len(m.FeeCollector)
		copy(dAtA[i:], m.FeeCollector)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeeCollector)))
		i--
		dAtA[i] = 0x22
	}
	if m.OrderFeeBps != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OrderFeeBps))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidityFeeBps != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LiquidityFeeBps))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapFeeBps != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SwapFeeBps))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.AccountSequence != 0 {
		n += 1 + sovGenesis(uint64(m.AccountSequence))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.MaxAccountsPerDid != 0 {
		n += 1 + sovGenesis(uint64(m.MaxAccountsPerDid))
	}
	if m.DefaultTimeoutSeconds != 0 {
		n += 1 + sovGenesis(uint64(m.DefaultTimeoutSeconds))
	}
	if len(m.AllowedConnections) > 0 {
		for _, s := range m.AllowedConnections {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.MinSwapAmount)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.MaxDailyVolume)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.RateLimits.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Fees.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *RateLimitParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxOpsPerBlock != 0 {
		n += 1 + sovGenesis(uint64(m.MaxOpsPerBlock))
	}
	if m.MaxOpsPerDidPerDay != 0 {
		n += 1 + sovGenesis(uint64(m.MaxOpsPerDidPerDay))
	}
	if m.CooldownBlocks != 0 {
		n += 1 + sovGenesis(uint64(m.CooldownBlocks))
	}
	return n
}

func (m *FeeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapFeeBps != 0 {
		n += 1 + sovGenesis(uint64(m.SwapFeeBps))
	}
	if m.LiquidityFeeBps != 0 {
		n += 1 + sovGenesis(uint64(m.LiquidityFeeBps))
	}
	if m.OrderFeeBps != 0 {
		n += 1 + sovGenesis(uint64(m.OrderFeeBps))
	}
	l = len(m.FeeCollector)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &InterchainDEXAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountSequence", wireType)
			}
			m.AccountSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAccountsPerDid", wireType)
			}
			m.MaxAccountsPerDid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAccountsPerDid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTimeoutSeconds", wireType)
			}
			m.DefaultTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTimeoutSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedConnections", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedConnections = append(m.AllowedConnections, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinSwapAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDailyVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxDailyVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOpsPerBlock", wireType)
			}
			m.MaxOpsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOpsPerBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOpsPerDidPerDay", wireType)
			}
			m.MaxOpsPerDidPerDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOpsPerDidPerDay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooldownBlocks", wireType)
			}
			m.CooldownBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooldownBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeBps", wireType)
			}
			m.SwapFeeBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapFeeBps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityFeeBps", wireType)
			}
			m.LiquidityFeeBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityFeeBps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderFeeBps", wireType)
			}
			m.OrderFeeBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderFeeBps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCollector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCollector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
