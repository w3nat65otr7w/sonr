// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc/v1/genesis.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module genesis state
type GenesisState struct {
	// Params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Service capabilities stored in the module
	Capabilities []ServiceCapability `protobuf:"bytes,2,rep,name=capabilities,proto3" json:"capabilities"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_86658d95daaa12a9, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCapabilities() []ServiceCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Params defines the set of module parameters.
type Params struct {
	// Service Limits
	// Maximum number of services that can be registered per account
	MaxServicesPerAccount uint32 `protobuf:"varint,1,opt,name=max_services_per_account,json=maxServicesPerAccount,proto3" json:"max_services_per_account,omitempty"`
	// Maximum number of domains that can be bound to a single service
	MaxDomainsPerService uint32 `protobuf:"varint,2,opt,name=max_domains_per_service,json=maxDomainsPerService,proto3" json:"max_domains_per_service,omitempty"`
	// Maximum number of endpoints that can be registered per service
	MaxEndpointsPerService uint32 `protobuf:"varint,3,opt,name=max_endpoints_per_service,json=maxEndpointsPerService,proto3" json:"max_endpoints_per_service,omitempty"`
	// Timeouts and Intervals (in seconds)
	// Time allowed for domain ownership verification before expiry
	DomainVerificationTimeout int64 `protobuf:"varint,4,opt,name=domain_verification_timeout,json=domainVerificationTimeout,proto3" json:"domain_verification_timeout,omitempty"`
	// Interval between service health checks
	ServiceHealthCheckInterval int64 `protobuf:"varint,5,opt,name=service_health_check_interval,json=serviceHealthCheckInterval,proto3" json:"service_health_check_interval,omitempty"`
	// Default expiration time for capabilities if not specified
	CapabilityDefaultExpiration int64 `protobuf:"varint,6,opt,name=capability_default_expiration,json=capabilityDefaultExpiration,proto3" json:"capability_default_expiration,omitempty"`
	// Economic Parameters
	// Fee required to register a new service
	ServiceRegistrationFee types.Coin `protobuf:"bytes,7,opt,name=service_registration_fee,json=serviceRegistrationFee,proto3" json:"service_registration_fee"`
	// Fee required to verify domain ownership
	DomainVerificationFee types.Coin `protobuf:"bytes,8,opt,name=domain_verification_fee,json=domainVerificationFee,proto3" json:"domain_verification_fee"`
	// Minimum stake required to keep a service active
	MinServiceStake types.Coin `protobuf:"bytes,9,opt,name=min_service_stake,json=minServiceStake,proto3" json:"min_service_stake"`
	// UCAN and Capability Settings
	// Maximum depth of delegation chains for capabilities
	MaxDelegationChainDepth uint32 `protobuf:"varint,10,opt,name=max_delegation_chain_depth,json=maxDelegationChainDepth,proto3" json:"max_delegation_chain_depth,omitempty"`
	// Maximum lifetime for UCAN tokens (in seconds)
	UcanMaxLifetime int64 `protobuf:"varint,11,opt,name=ucan_max_lifetime,json=ucanMaxLifetime,proto3" json:"ucan_max_lifetime,omitempty"`
	// Minimum lifetime for UCAN tokens (in seconds)
	UcanMinLifetime int64 `protobuf:"varint,12,opt,name=ucan_min_lifetime,json=ucanMinLifetime,proto3" json:"ucan_min_lifetime,omitempty"`
	// List of supported signature algorithms for UCAN
	SupportedSignatureAlgorithms []string `protobuf:"bytes,13,rep,name=supported_signature_algorithms,json=supportedSignatureAlgorithms,proto3" json:"supported_signature_algorithms,omitempty"`
	// Validation Rules
	// Whether to require cryptographic proof of domain ownership
	RequireDomainOwnershipProof bool `protobuf:"varint,14,opt,name=require_domain_ownership_proof,json=requireDomainOwnershipProof,proto3" json:"require_domain_ownership_proof,omitempty"`
	// Whether to require HTTPS for service endpoints
	RequireHttps bool `protobuf:"varint,15,opt,name=require_https,json=requireHttps,proto3" json:"require_https,omitempty"`
	// Whether to allow localhost domains for development
	AllowLocalhost bool `protobuf:"varint,16,opt,name=allow_localhost,json=allowLocalhost,proto3" json:"allow_localhost,omitempty"`
	// Maximum length for service description text
	MaxServiceDescriptionLength uint32 `protobuf:"varint,17,opt,name=max_service_description_length,json=maxServiceDescriptionLength,proto3" json:"max_service_description_length,omitempty"`
	// Rate Limiting
	// Maximum number of service registrations allowed per block
	MaxRegistrationsPerBlock uint32 `protobuf:"varint,18,opt,name=max_registrations_per_block,json=maxRegistrationsPerBlock,proto3" json:"max_registrations_per_block,omitempty"`
	// Maximum number of service updates allowed per block
	MaxUpdatesPerBlock uint32 `protobuf:"varint,19,opt,name=max_updates_per_block,json=maxUpdatesPerBlock,proto3" json:"max_updates_per_block,omitempty"`
	// Maximum number of capability grants allowed per block
	MaxCapabilityGrantsPerBlock uint32 `protobuf:"varint,20,opt,name=max_capability_grants_per_block,json=maxCapabilityGrantsPerBlock,proto3" json:"max_capability_grants_per_block,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_86658d95daaa12a9, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxServicesPerAccount() uint32 {
	if m != nil {
		return m.MaxServicesPerAccount
	}
	return 0
}

func (m *Params) GetMaxDomainsPerService() uint32 {
	if m != nil {
		return m.MaxDomainsPerService
	}
	return 0
}

func (m *Params) GetMaxEndpointsPerService() uint32 {
	if m != nil {
		return m.MaxEndpointsPerService
	}
	return 0
}

func (m *Params) GetDomainVerificationTimeout() int64 {
	if m != nil {
		return m.DomainVerificationTimeout
	}
	return 0
}

func (m *Params) GetServiceHealthCheckInterval() int64 {
	if m != nil {
		return m.ServiceHealthCheckInterval
	}
	return 0
}

func (m *Params) GetCapabilityDefaultExpiration() int64 {
	if m != nil {
		return m.CapabilityDefaultExpiration
	}
	return 0
}

func (m *Params) GetServiceRegistrationFee() types.Coin {
	if m != nil {
		return m.ServiceRegistrationFee
	}
	return types.Coin{}
}

func (m *Params) GetDomainVerificationFee() types.Coin {
	if m != nil {
		return m.DomainVerificationFee
	}
	return types.Coin{}
}

func (m *Params) GetMinServiceStake() types.Coin {
	if m != nil {
		return m.MinServiceStake
	}
	return types.Coin{}
}

func (m *Params) GetMaxDelegationChainDepth() uint32 {
	if m != nil {
		return m.MaxDelegationChainDepth
	}
	return 0
}

func (m *Params) GetUcanMaxLifetime() int64 {
	if m != nil {
		return m.UcanMaxLifetime
	}
	return 0
}

func (m *Params) GetUcanMinLifetime() int64 {
	if m != nil {
		return m.UcanMinLifetime
	}
	return 0
}

func (m *Params) GetSupportedSignatureAlgorithms() []string {
	if m != nil {
		return m.SupportedSignatureAlgorithms
	}
	return nil
}

func (m *Params) GetRequireDomainOwnershipProof() bool {
	if m != nil {
		return m.RequireDomainOwnershipProof
	}
	return false
}

func (m *Params) GetRequireHttps() bool {
	if m != nil {
		return m.RequireHttps
	}
	return false
}

func (m *Params) GetAllowLocalhost() bool {
	if m != nil {
		return m.AllowLocalhost
	}
	return false
}

func (m *Params) GetMaxServiceDescriptionLength() uint32 {
	if m != nil {
		return m.MaxServiceDescriptionLength
	}
	return 0
}

func (m *Params) GetMaxRegistrationsPerBlock() uint32 {
	if m != nil {
		return m.MaxRegistrationsPerBlock
	}
	return 0
}

func (m *Params) GetMaxUpdatesPerBlock() uint32 {
	if m != nil {
		return m.MaxUpdatesPerBlock
	}
	return 0
}

func (m *Params) GetMaxCapabilityGrantsPerBlock() uint32 {
	if m != nil {
		return m.MaxCapabilityGrantsPerBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "svc.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "svc.v1.Params")
}

func init() { proto.RegisterFile("svc/v1/genesis.proto", fileDescriptor_86658d95daaa12a9) }

var fileDescriptor_86658d95daaa12a9 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xe3, 0xa6, 0x98, 0x66, 0xf2, 0x8b, 0x0c, 0x69, 0x33, 0x4e, 0xe8, 0xc6, 0x6a, 0x0f,
	0x58, 0x15, 0x78, 0xe5, 0x22, 0x84, 0x00, 0x15, 0x29, 0xb1, 0x4b, 0x8b, 0x08, 0x22, 0x72, 0xf8,
	0x21, 0xb8, 0x8c, 0xc6, 0xeb, 0xe7, 0xdd, 0x51, 0x76, 0x67, 0x96, 0x99, 0x59, 0xd7, 0x39, 0x72,
	0xe5, 0xc4, 0x91, 0x63, 0xff, 0x04, 0xfe, 0x8c, 0x1e, 0x7b, 0xe4, 0x84, 0x50, 0x72, 0x80, 0xff,
	0x02, 0x34, 0x3f, 0xd6, 0x76, 0x44, 0x0f, 0xbd, 0x24, 0xeb, 0xf7, 0x3e, 0xdf, 0xef, 0x3c, 0xcd,
	0xbc, 0xf7, 0xd0, 0xae, 0x9e, 0x26, 0xf1, 0xb4, 0x17, 0xa7, 0x20, 0x40, 0x73, 0xdd, 0x2d, 0x95,
	0x34, 0x12, 0x37, 0xf5, 0x34, 0xe9, 0x4e, 0x7b, 0xfb, 0x3b, 0xac, 0xe0, 0x42, 0xc6, 0xee, 0xaf,
	0x4f, 0xed, 0xef, 0xa6, 0x32, 0x95, 0xee, 0x33, 0xb6, 0x5f, 0x21, 0x1a, 0x25, 0x52, 0x17, 0x52,
	0xc7, 0x23, 0xa6, 0x21, 0x9e, 0xf6, 0x46, 0x60, 0x58, 0x2f, 0x4e, 0x24, 0x17, 0x21, 0xdf, 0xf2,
	0x79, 0xea, 0x85, 0xfe, 0x47, 0x48, 0xe1, 0x50, 0x81, 0x36, 0xcc, 0x80, 0x8f, 0xdd, 0xfb, 0xb9,
	0x81, 0x36, 0x9e, 0xf8, 0x8a, 0xce, 0x6c, 0x18, 0xbf, 0x87, 0x9a, 0x25, 0x53, 0xac, 0xd0, 0xa4,
	0xd1, 0x6e, 0x74, 0xd6, 0x1f, 0x6e, 0x75, 0x7d, 0x85, 0xdd, 0x53, 0x17, 0x3d, 0xbe, 0xf9, 0xe2,
	0xcf, 0xc3, 0x95, 0x61, 0x60, 0x70, 0x1f, 0x6d, 0x24, 0xac, 0x64, 0x23, 0x9e, 0x73, 0xc3, 0x41,
	0x93, 0x1b, 0xed, 0xd5, 0xce, 0xfa, 0xc3, 0x56, 0xad, 0x39, 0x03, 0x35, 0xe5, 0x09, 0xf4, 0x6b,
	0xe4, 0x22, 0xc8, 0xaf, 0x89, 0xee, 0xfd, 0xbb, 0x86, 0x9a, 0xde, 0x1d, 0x7f, 0x84, 0x48, 0xc1,
	0x66, 0x54, 0x7b, 0x9d, 0xa6, 0x25, 0x28, 0xca, 0x92, 0x44, 0x56, 0xc2, 0xb8, 0x7a, 0x36, 0x87,
	0xb7, 0x0b, 0x36, 0x0b, 0xb6, 0xfa, 0x14, 0xd4, 0x91, 0x4f, 0xe2, 0x0f, 0xd1, 0x9e, 0x15, 0x8e,
	0x65, 0xc1, 0xb8, 0xf0, 0xba, 0x60, 0x42, 0x6e, 0x38, 0xdd, 0x6e, 0xc1, 0x66, 0x03, 0x9f, 0x3d,
	0x05, 0x15, 0x1c, 0xf0, 0xc7, 0xa8, 0x65, 0x65, 0x20, 0xc6, 0xa5, 0xe4, 0xc2, 0x5c, 0x17, 0xae,
	0x3a, 0xe1, 0x9d, 0x82, 0xcd, 0x1e, 0xd7, 0xf9, 0x25, 0xe9, 0x67, 0xe8, 0xc0, 0x9f, 0x46, 0xa7,
	0xa0, 0xf8, 0x84, 0x27, 0xcc, 0x70, 0x29, 0xa8, 0xe1, 0x05, 0xc8, 0xca, 0x90, 0x9b, 0xed, 0x46,
	0x67, 0x75, 0xd8, 0xf2, 0xc8, 0x77, 0x4b, 0xc4, 0x37, 0x1e, 0xc0, 0x47, 0xe8, 0x6e, 0x38, 0x88,
	0x66, 0xc0, 0x72, 0x93, 0xd1, 0x24, 0x83, 0xe4, 0x9c, 0x72, 0x61, 0x40, 0x4d, 0x59, 0x4e, 0xde,
	0x70, 0x0e, 0xfb, 0x01, 0x7a, 0xea, 0x98, 0xbe, 0x45, 0xbe, 0x08, 0x04, 0x3e, 0x46, 0x77, 0xe7,
	0x17, 0x79, 0x41, 0xc7, 0x30, 0x61, 0x55, 0x6e, 0x28, 0xcc, 0x4a, 0xae, 0xdc, 0x51, 0xa4, 0xe9,
	0x2c, 0x0e, 0x16, 0xd0, 0xc0, 0x33, 0x8f, 0xe7, 0x08, 0xfe, 0x01, 0x91, 0xba, 0x0c, 0x05, 0x29,
	0xd7, 0xc6, 0xc7, 0xe9, 0x04, 0x80, 0xbc, 0xe9, 0x3a, 0xa0, 0xd5, 0x0d, 0x5d, 0x64, 0x5b, 0xae,
	0x1b, 0x5a, 0xae, 0xdb, 0x97, 0x5c, 0x84, 0xd7, 0xbc, 0x13, 0x0c, 0x86, 0x4b, 0xfa, 0xcf, 0x01,
	0xf0, 0xf7, 0x68, 0xef, 0x55, 0x37, 0x64, 0x9d, 0x6f, 0xbd, 0x9e, 0xf3, 0xed, 0xff, 0x5f, 0x9f,
	0x35, 0xfe, 0x12, 0xed, 0x14, 0x5c, 0xd4, 0xef, 0x44, 0xb5, 0x61, 0xe7, 0x40, 0xd6, 0x5e, 0xcf,
	0x72, 0xbb, 0xe0, 0x22, 0x3c, 0xe1, 0x99, 0xd5, 0xe1, 0x4f, 0xd1, 0xbe, 0xeb, 0x1c, 0xc8, 0x21,
	0xf5, 0x05, 0x26, 0x99, 0xad, 0x79, 0x0c, 0xa5, 0xc9, 0x08, 0x72, 0x3d, 0x60, 0x7b, 0x6b, 0x30,
	0x07, 0xfa, 0x36, 0x3f, 0xb0, 0x69, 0xfc, 0x00, 0xed, 0x54, 0x09, 0x13, 0xd4, 0x3a, 0xe4, 0x7c,
	0x02, 0xf6, 0xf5, 0xc9, 0xba, 0xbb, 0xf5, 0x6d, 0x9b, 0xf8, 0x8a, 0xcd, 0x4e, 0x42, 0x78, 0xc1,
	0x72, 0xb1, 0x60, 0x37, 0x96, 0x58, 0x2e, 0xe6, 0xec, 0x00, 0x45, 0xba, 0x2a, 0x4b, 0xa9, 0x0c,
	0x8c, 0xa9, 0xe6, 0xa9, 0x60, 0xa6, 0x52, 0x40, 0x59, 0x9e, 0x4a, 0xc5, 0x4d, 0x56, 0x68, 0xb2,
	0xd9, 0x5e, 0xed, 0xac, 0x0d, 0xdf, 0x99, 0x53, 0x67, 0x35, 0x74, 0x34, 0x67, 0x70, 0x1f, 0x45,
	0x0a, 0x7e, 0xaa, 0xb8, 0x82, 0x30, 0x18, 0x54, 0x3e, 0x13, 0xa0, 0x74, 0xc6, 0x4b, 0xbb, 0x1f,
	0xe4, 0x84, 0x6c, 0xb5, 0x1b, 0x9d, 0x5b, 0xc3, 0x83, 0x40, 0xf9, 0xf9, 0xf8, 0xba, 0x66, 0x4e,
	0x2d, 0x82, 0xef, 0xa3, 0xcd, 0xda, 0x24, 0x33, 0xa6, 0xd4, 0x64, 0xdb, 0x69, 0x36, 0x42, 0xf0,
	0xa9, 0x8d, 0xe1, 0x77, 0xd1, 0x36, 0xcb, 0x73, 0xf9, 0x8c, 0xe6, 0x32, 0x61, 0x79, 0x26, 0xb5,
	0x21, 0x6f, 0x39, 0x6c, 0xcb, 0x85, 0x4f, 0xea, 0xa8, 0x2d, 0x69, 0x69, 0xc0, 0xe9, 0x18, 0x74,
	0xa2, 0x78, 0xe9, 0xae, 0x3d, 0x07, 0x91, 0x9a, 0x8c, 0xec, 0xb8, 0x1b, 0x3f, 0x58, 0x8c, 0xf9,
	0x60, 0xc1, 0x9c, 0x38, 0x04, 0x3f, 0x42, 0x36, 0x7d, 0xad, 0x5f, 0xfd, 0xe4, 0x8e, 0x72, 0x99,
	0x9c, 0x13, 0xec, 0x1c, 0xec, 0x22, 0x59, 0xee, 0x48, 0x3b, 0xbb, 0xc7, 0x36, 0x8f, 0x7b, 0xc8,
	0x2e, 0x11, 0x5a, 0x95, 0x63, 0x66, 0x60, 0x59, 0xf8, 0xb6, 0x13, 0xe2, 0x82, 0xcd, 0xbe, 0xf5,
	0xb9, 0xb9, 0x64, 0x80, 0x0e, 0xad, 0x64, 0x69, 0xda, 0x52, 0xc5, 0xea, 0x7d, 0xe1, 0xc5, 0xbb,
	0xf3, 0xba, 0x17, 0xeb, 0xee, 0x89, 0x83, 0x6a, 0x97, 0x4f, 0xf6, 0x7e, 0x7b, 0x7e, 0xb8, 0xf2,
	0xcf, 0xf3, 0xc3, 0xc6, 0x2f, 0x7f, 0xff, 0xfe, 0x00, 0xd9, 0x6d, 0xec, 0xd7, 0xe8, 0xf1, 0xa3,
	0x17, 0x97, 0x51, 0xe3, 0xe5, 0x65, 0xd4, 0xf8, 0xeb, 0x32, 0x6a, 0xfc, 0x7a, 0x15, 0xad, 0xbc,
	0xbc, 0x8a, 0x56, 0xfe, 0xb8, 0x8a, 0x56, 0x7e, 0xbc, 0x9f, 0x72, 0x93, 0x55, 0xa3, 0x6e, 0x22,
	0x8b, 0x58, 0x4b, 0xa1, 0xde, 0xe7, 0xd2, 0xfd, 0x8f, 0x67, 0xb1, 0xd5, 0x9b, 0x8b, 0x12, 0xf4,
	0xa8, 0xe9, 0x76, 0xf9, 0x07, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x01, 0x8c, 0x06, 0x63,
	0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxServicesPerAccount != that1.MaxServicesPerAccount {
		return false
	}
	if this.MaxDomainsPerService != that1.MaxDomainsPerService {
		return false
	}
	if this.MaxEndpointsPerService != that1.MaxEndpointsPerService {
		return false
	}
	if this.DomainVerificationTimeout != that1.DomainVerificationTimeout {
		return false
	}
	if this.ServiceHealthCheckInterval != that1.ServiceHealthCheckInterval {
		return false
	}
	if this.CapabilityDefaultExpiration != that1.CapabilityDefaultExpiration {
		return false
	}
	if !this.ServiceRegistrationFee.Equal(&that1.ServiceRegistrationFee) {
		return false
	}
	if !this.DomainVerificationFee.Equal(&that1.DomainVerificationFee) {
		return false
	}
	if !this.MinServiceStake.Equal(&that1.MinServiceStake) {
		return false
	}
	if this.MaxDelegationChainDepth != that1.MaxDelegationChainDepth {
		return false
	}
	if this.UcanMaxLifetime != that1.UcanMaxLifetime {
		return false
	}
	if this.UcanMinLifetime != that1.UcanMinLifetime {
		return false
	}
	if len(this.SupportedSignatureAlgorithms) != len(that1.SupportedSignatureAlgorithms) {
		return false
	}
	for i := range this.SupportedSignatureAlgorithms {
		if this.SupportedSignatureAlgorithms[i] != that1.SupportedSignatureAlgorithms[i] {
			return false
		}
	}
	if this.RequireDomainOwnershipProof != that1.RequireDomainOwnershipProof {
		return false
	}
	if this.RequireHttps != that1.RequireHttps {
		return false
	}
	if this.AllowLocalhost != that1.AllowLocalhost {
		return false
	}
	if this.MaxServiceDescriptionLength != that1.MaxServiceDescriptionLength {
		return false
	}
	if this.MaxRegistrationsPerBlock != that1.MaxRegistrationsPerBlock {
		return false
	}
	if this.MaxUpdatesPerBlock != that1.MaxUpdatesPerBlock {
		return false
	}
	if this.MaxCapabilityGrantsPerBlock != that1.MaxCapabilityGrantsPerBlock {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Capabilities) > 0 {
		for iNdEx := len(m.Capabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Capabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxCapabilityGrantsPerBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxCapabilityGrantsPerBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MaxUpdatesPerBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxUpdatesPerBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MaxRegistrationsPerBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxRegistrationsPerBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MaxServiceDescriptionLength != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxServiceDescriptionLength))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AllowLocalhost {
		i--
		if m.AllowLocalhost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RequireHttps {
		i--
		if m.RequireHttps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.RequireDomainOwnershipProof {
		i--
		if m.RequireDomainOwnershipProof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.SupportedSignatureAlgorithms) > 0 {
		for iNdEx := len(m.SupportedSignatureAlgorithms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedSignatureAlgorithms[iNdEx])
			copy(dAtA[i:], m.SupportedSignatureAlgorithms[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.SupportedSignatureAlgorithms[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.UcanMinLifetime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UcanMinLifetime))
		i--
		dAtA[i] = 0x60
	}
	if m.UcanMaxLifetime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UcanMaxLifetime))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxDelegationChainDepth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxDelegationChainDepth))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.MinServiceStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.DomainVerificationFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ServiceRegistrationFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.CapabilityDefaultExpiration != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CapabilityDefaultExpiration))
		i--
		dAtA[i] = 0x30
	}
	if m.ServiceHealthCheckInterval != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceHealthCheckInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.DomainVerificationTimeout != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DomainVerificationTimeout))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxEndpointsPerService != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxEndpointsPerService))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxDomainsPerService != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxDomainsPerService))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxServicesPerAccount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxServicesPerAccount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxServicesPerAccount != 0 {
		n += 1 + sovGenesis(uint64(m.MaxServicesPerAccount))
	}
	if m.MaxDomainsPerService != 0 {
		n += 1 + sovGenesis(uint64(m.MaxDomainsPerService))
	}
	if m.MaxEndpointsPerService != 0 {
		n += 1 + sovGenesis(uint64(m.MaxEndpointsPerService))
	}
	if m.DomainVerificationTimeout != 0 {
		n += 1 + sovGenesis(uint64(m.DomainVerificationTimeout))
	}
	if m.ServiceHealthCheckInterval != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceHealthCheckInterval))
	}
	if m.CapabilityDefaultExpiration != 0 {
		n += 1 + sovGenesis(uint64(m.CapabilityDefaultExpiration))
	}
	l = m.ServiceRegistrationFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.DomainVerificationFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.MinServiceStake.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.MaxDelegationChainDepth != 0 {
		n += 1 + sovGenesis(uint64(m.MaxDelegationChainDepth))
	}
	if m.UcanMaxLifetime != 0 {
		n += 1 + sovGenesis(uint64(m.UcanMaxLifetime))
	}
	if m.UcanMinLifetime != 0 {
		n += 1 + sovGenesis(uint64(m.UcanMinLifetime))
	}
	if len(m.SupportedSignatureAlgorithms) > 0 {
		for _, s := range m.SupportedSignatureAlgorithms {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.RequireDomainOwnershipProof {
		n += 2
	}
	if m.RequireHttps {
		n += 2
	}
	if m.AllowLocalhost {
		n += 3
	}
	if m.MaxServiceDescriptionLength != 0 {
		n += 2 + sovGenesis(uint64(m.MaxServiceDescriptionLength))
	}
	if m.MaxRegistrationsPerBlock != 0 {
		n += 2 + sovGenesis(uint64(m.MaxRegistrationsPerBlock))
	}
	if m.MaxUpdatesPerBlock != 0 {
		n += 2 + sovGenesis(uint64(m.MaxUpdatesPerBlock))
	}
	if m.MaxCapabilityGrantsPerBlock != 0 {
		n += 2 + sovGenesis(uint64(m.MaxCapabilityGrantsPerBlock))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capabilities = append(m.Capabilities, ServiceCapability{})
			if err := m.Capabilities[len(m.Capabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxServicesPerAccount", wireType)
			}
			m.MaxServicesPerAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxServicesPerAccount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDomainsPerService", wireType)
			}
			m.MaxDomainsPerService = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDomainsPerService |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEndpointsPerService", wireType)
			}
			m.MaxEndpointsPerService = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEndpointsPerService |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainVerificationTimeout", wireType)
			}
			m.DomainVerificationTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainVerificationTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHealthCheckInterval", wireType)
			}
			m.ServiceHealthCheckInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceHealthCheckInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapabilityDefaultExpiration", wireType)
			}
			m.CapabilityDefaultExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CapabilityDefaultExpiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceRegistrationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceRegistrationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainVerificationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DomainVerificationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinServiceStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinServiceStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegationChainDepth", wireType)
			}
			m.MaxDelegationChainDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegationChainDepth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UcanMaxLifetime", wireType)
			}
			m.UcanMaxLifetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UcanMaxLifetime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UcanMinLifetime", wireType)
			}
			m.UcanMinLifetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UcanMinLifetime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedSignatureAlgorithms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedSignatureAlgorithms = append(m.SupportedSignatureAlgorithms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireDomainOwnershipProof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireDomainOwnershipProof = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireHttps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireHttps = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowLocalhost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowLocalhost = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxServiceDescriptionLength", wireType)
			}
			m.MaxServiceDescriptionLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxServiceDescriptionLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRegistrationsPerBlock", wireType)
			}
			m.MaxRegistrationsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRegistrationsPerBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUpdatesPerBlock", wireType)
			}
			m.MaxUpdatesPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUpdatesPerBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCapabilityGrantsPerBlock", wireType)
			}
			m.MaxCapabilityGrantsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCapabilityGrantsPerBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
