// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/v1/constants.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AssetType defines the type of asset: native, wrapped, staking, pool, or unspecified
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	AssetType_ASSET_TYPE_NATIVE      AssetType = 1
	AssetType_ASSET_TYPE_WRAPPED     AssetType = 2
	AssetType_ASSET_TYPE_STAKING     AssetType = 3
	AssetType_ASSET_TYPE_POOL        AssetType = 4
	AssetType_ASSET_TYPE_IBC         AssetType = 5
	AssetType_ASSET_TYPE_CW20        AssetType = 6
)

var AssetType_name = map[int32]string{
	0: "ASSET_TYPE_UNSPECIFIED",
	1: "ASSET_TYPE_NATIVE",
	2: "ASSET_TYPE_WRAPPED",
	3: "ASSET_TYPE_STAKING",
	4: "ASSET_TYPE_POOL",
	5: "ASSET_TYPE_IBC",
	6: "ASSET_TYPE_CW20",
}

var AssetType_value = map[string]int32{
	"ASSET_TYPE_UNSPECIFIED": 0,
	"ASSET_TYPE_NATIVE":      1,
	"ASSET_TYPE_WRAPPED":     2,
	"ASSET_TYPE_STAKING":     3,
	"ASSET_TYPE_POOL":        4,
	"ASSET_TYPE_IBC":         5,
	"ASSET_TYPE_CW20":        6,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{0}
}

// DIDNamespace define the different namespaces of DID
type DIDNamespace int32

const (
	DIDNamespace_DID_NAMESPACE_UNSPECIFIED DIDNamespace = 0
	DIDNamespace_DID_NAMESPACE_IPFS        DIDNamespace = 1
	DIDNamespace_DID_NAMESPACE_SONR        DIDNamespace = 2
	DIDNamespace_DID_NAMESPACE_BITCOIN     DIDNamespace = 3
	DIDNamespace_DID_NAMESPACE_ETHEREUM    DIDNamespace = 4
	DIDNamespace_DID_NAMESPACE_IBC         DIDNamespace = 5
	DIDNamespace_DID_NAMESPACE_WEBAUTHN    DIDNamespace = 6
	DIDNamespace_DID_NAMESPACE_DWN         DIDNamespace = 7
	DIDNamespace_DID_NAMESPACE_SERVICE     DIDNamespace = 8
)

var DIDNamespace_name = map[int32]string{
	0: "DID_NAMESPACE_UNSPECIFIED",
	1: "DID_NAMESPACE_IPFS",
	2: "DID_NAMESPACE_SONR",
	3: "DID_NAMESPACE_BITCOIN",
	4: "DID_NAMESPACE_ETHEREUM",
	5: "DID_NAMESPACE_IBC",
	6: "DID_NAMESPACE_WEBAUTHN",
	7: "DID_NAMESPACE_DWN",
	8: "DID_NAMESPACE_SERVICE",
}

var DIDNamespace_value = map[string]int32{
	"DID_NAMESPACE_UNSPECIFIED": 0,
	"DID_NAMESPACE_IPFS":        1,
	"DID_NAMESPACE_SONR":        2,
	"DID_NAMESPACE_BITCOIN":     3,
	"DID_NAMESPACE_ETHEREUM":    4,
	"DID_NAMESPACE_IBC":         5,
	"DID_NAMESPACE_WEBAUTHN":    6,
	"DID_NAMESPACE_DWN":         7,
	"DID_NAMESPACE_SERVICE":     8,
}

func (x DIDNamespace) String() string {
	return proto.EnumName(DIDNamespace_name, int32(x))
}

func (DIDNamespace) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{1}
}

// KeyAlgorithm defines the key algorithm
type KeyAlgorithm int32

const (
	KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED KeyAlgorithm = 0
	KeyAlgorithm_KEY_ALGORITHM_ES256       KeyAlgorithm = 1
	KeyAlgorithm_KEY_ALGORITHM_ES384       KeyAlgorithm = 2
	KeyAlgorithm_KEY_ALGORITHM_ES512       KeyAlgorithm = 3
	KeyAlgorithm_KEY_ALGORITHM_EDDSA       KeyAlgorithm = 4
	KeyAlgorithm_KEY_ALGORITHM_ES256K      KeyAlgorithm = 5
	KeyAlgorithm_KEY_ALGORITHM_BLS12377    KeyAlgorithm = 6
	KeyAlgorithm_KEY_ALGORITHM_KECCAK256   KeyAlgorithm = 7
)

var KeyAlgorithm_name = map[int32]string{
	0: "KEY_ALGORITHM_UNSPECIFIED",
	1: "KEY_ALGORITHM_ES256",
	2: "KEY_ALGORITHM_ES384",
	3: "KEY_ALGORITHM_ES512",
	4: "KEY_ALGORITHM_EDDSA",
	5: "KEY_ALGORITHM_ES256K",
	6: "KEY_ALGORITHM_BLS12377",
	7: "KEY_ALGORITHM_KECCAK256",
}

var KeyAlgorithm_value = map[string]int32{
	"KEY_ALGORITHM_UNSPECIFIED": 0,
	"KEY_ALGORITHM_ES256":       1,
	"KEY_ALGORITHM_ES384":       2,
	"KEY_ALGORITHM_ES512":       3,
	"KEY_ALGORITHM_EDDSA":       4,
	"KEY_ALGORITHM_ES256K":      5,
	"KEY_ALGORITHM_BLS12377":    6,
	"KEY_ALGORITHM_KECCAK256":   7,
}

func (x KeyAlgorithm) String() string {
	return proto.EnumName(KeyAlgorithm_name, int32(x))
}

func (KeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{2}
}

// KeyCurve defines the key curve
type KeyCurve int32

const (
	KeyCurve_KEY_CURVE_UNSPECIFIED KeyCurve = 0
	KeyCurve_KEY_CURVE_P256        KeyCurve = 1
	KeyCurve_KEY_CURVE_P384        KeyCurve = 2
	KeyCurve_KEY_CURVE_P521        KeyCurve = 3
	KeyCurve_KEY_CURVE_X25519      KeyCurve = 4
	KeyCurve_KEY_CURVE_X448        KeyCurve = 5
	KeyCurve_KEY_CURVE_ED25519     KeyCurve = 6
	KeyCurve_KEY_CURVE_ED448       KeyCurve = 7
	KeyCurve_KEY_CURVE_SECP256K1   KeyCurve = 8
)

var KeyCurve_name = map[int32]string{
	0: "KEY_CURVE_UNSPECIFIED",
	1: "KEY_CURVE_P256",
	2: "KEY_CURVE_P384",
	3: "KEY_CURVE_P521",
	4: "KEY_CURVE_X25519",
	5: "KEY_CURVE_X448",
	6: "KEY_CURVE_ED25519",
	7: "KEY_CURVE_ED448",
	8: "KEY_CURVE_SECP256K1",
}

var KeyCurve_value = map[string]int32{
	"KEY_CURVE_UNSPECIFIED": 0,
	"KEY_CURVE_P256":        1,
	"KEY_CURVE_P384":        2,
	"KEY_CURVE_P521":        3,
	"KEY_CURVE_X25519":      4,
	"KEY_CURVE_X448":        5,
	"KEY_CURVE_ED25519":     6,
	"KEY_CURVE_ED448":       7,
	"KEY_CURVE_SECP256K1":   8,
}

func (x KeyCurve) String() string {
	return proto.EnumName(KeyCurve_name, int32(x))
}

func (KeyCurve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{3}
}

// KeyEncoding defines the key encoding
type KeyEncoding int32

const (
	KeyEncoding_KEY_ENCODING_UNSPECIFIED KeyEncoding = 0
	KeyEncoding_KEY_ENCODING_RAW         KeyEncoding = 1
	KeyEncoding_KEY_ENCODING_HEX         KeyEncoding = 2
	KeyEncoding_KEY_ENCODING_MULTIBASE   KeyEncoding = 3
	KeyEncoding_KEY_ENCODING_JWK         KeyEncoding = 4
)

var KeyEncoding_name = map[int32]string{
	0: "KEY_ENCODING_UNSPECIFIED",
	1: "KEY_ENCODING_RAW",
	2: "KEY_ENCODING_HEX",
	3: "KEY_ENCODING_MULTIBASE",
	4: "KEY_ENCODING_JWK",
}

var KeyEncoding_value = map[string]int32{
	"KEY_ENCODING_UNSPECIFIED": 0,
	"KEY_ENCODING_RAW":         1,
	"KEY_ENCODING_HEX":         2,
	"KEY_ENCODING_MULTIBASE":   3,
	"KEY_ENCODING_JWK":         4,
}

func (x KeyEncoding) String() string {
	return proto.EnumName(KeyEncoding_name, int32(x))
}

func (KeyEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{4}
}

// KeyRole defines the kind of key
type KeyRole int32

const (
	KeyRole_KEY_ROLE_UNSPECIFIED KeyRole = 0
	// Blockchain key types
	KeyRole_KEY_ROLE_AUTHENTICATION KeyRole = 1
	KeyRole_KEY_ROLE_ASSERTION      KeyRole = 2
	KeyRole_KEY_ROLE_DELEGATION     KeyRole = 3
	KeyRole_KEY_ROLE_INVOCATION     KeyRole = 4
)

var KeyRole_name = map[int32]string{
	0: "KEY_ROLE_UNSPECIFIED",
	1: "KEY_ROLE_AUTHENTICATION",
	2: "KEY_ROLE_ASSERTION",
	3: "KEY_ROLE_DELEGATION",
	4: "KEY_ROLE_INVOCATION",
}

var KeyRole_value = map[string]int32{
	"KEY_ROLE_UNSPECIFIED":    0,
	"KEY_ROLE_AUTHENTICATION": 1,
	"KEY_ROLE_ASSERTION":      2,
	"KEY_ROLE_DELEGATION":     3,
	"KEY_ROLE_INVOCATION":     4,
}

func (x KeyRole) String() string {
	return proto.EnumName(KeyRole_name, int32(x))
}

func (KeyRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{5}
}

// KeyType defines the key type
type KeyType int32

const (
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	KeyType_KEY_TYPE_OCTET       KeyType = 1
	KeyType_KEY_TYPE_ELLIPTIC    KeyType = 2
	KeyType_KEY_TYPE_RSA         KeyType = 3
	KeyType_KEY_TYPE_SYMMETRIC   KeyType = 4
	KeyType_KEY_TYPE_HMAC        KeyType = 5
)

var KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "KEY_TYPE_OCTET",
	2: "KEY_TYPE_ELLIPTIC",
	3: "KEY_TYPE_RSA",
	4: "KEY_TYPE_SYMMETRIC",
	5: "KEY_TYPE_HMAC",
}

var KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED": 0,
	"KEY_TYPE_OCTET":       1,
	"KEY_TYPE_ELLIPTIC":    2,
	"KEY_TYPE_RSA":         3,
	"KEY_TYPE_SYMMETRIC":   4,
	"KEY_TYPE_HMAC":        5,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{6}
}

// PermissionScope define the Capabilities Controllers can grant for Services
type PermissionScope int32

const (
	PermissionScope_PERMISSION_SCOPE_UNSPECIFIED            PermissionScope = 0
	PermissionScope_PERMISSION_SCOPE_BASIC_INFO             PermissionScope = 1
	PermissionScope_PERMISSION_SCOPE_RECORDS_READ           PermissionScope = 2
	PermissionScope_PERMISSION_SCOPE_RECORDS_WRITE          PermissionScope = 3
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_READ      PermissionScope = 4
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_WRITE     PermissionScope = 5
	PermissionScope_PERMISSION_SCOPE_WALLETS_READ           PermissionScope = 6
	PermissionScope_PERMISSION_SCOPE_WALLETS_CREATE         PermissionScope = 7
	PermissionScope_PERMISSION_SCOPE_WALLETS_SUBSCRIBE      PermissionScope = 8
	PermissionScope_PERMISSION_SCOPE_WALLETS_UPDATE         PermissionScope = 9
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_VERIFY    PermissionScope = 10
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_BROADCAST PermissionScope = 11
	PermissionScope_PERMISSION_SCOPE_ADMIN_USER             PermissionScope = 12
	PermissionScope_PERMISSION_SCOPE_ADMIN_VALIDATOR        PermissionScope = 13
)

var PermissionScope_name = map[int32]string{
	0:  "PERMISSION_SCOPE_UNSPECIFIED",
	1:  "PERMISSION_SCOPE_BASIC_INFO",
	2:  "PERMISSION_SCOPE_RECORDS_READ",
	3:  "PERMISSION_SCOPE_RECORDS_WRITE",
	4:  "PERMISSION_SCOPE_TRANSACTIONS_READ",
	5:  "PERMISSION_SCOPE_TRANSACTIONS_WRITE",
	6:  "PERMISSION_SCOPE_WALLETS_READ",
	7:  "PERMISSION_SCOPE_WALLETS_CREATE",
	8:  "PERMISSION_SCOPE_WALLETS_SUBSCRIBE",
	9:  "PERMISSION_SCOPE_WALLETS_UPDATE",
	10: "PERMISSION_SCOPE_TRANSACTIONS_VERIFY",
	11: "PERMISSION_SCOPE_TRANSACTIONS_BROADCAST",
	12: "PERMISSION_SCOPE_ADMIN_USER",
	13: "PERMISSION_SCOPE_ADMIN_VALIDATOR",
}

var PermissionScope_value = map[string]int32{
	"PERMISSION_SCOPE_UNSPECIFIED":            0,
	"PERMISSION_SCOPE_BASIC_INFO":             1,
	"PERMISSION_SCOPE_RECORDS_READ":           2,
	"PERMISSION_SCOPE_RECORDS_WRITE":          3,
	"PERMISSION_SCOPE_TRANSACTIONS_READ":      4,
	"PERMISSION_SCOPE_TRANSACTIONS_WRITE":     5,
	"PERMISSION_SCOPE_WALLETS_READ":           6,
	"PERMISSION_SCOPE_WALLETS_CREATE":         7,
	"PERMISSION_SCOPE_WALLETS_SUBSCRIBE":      8,
	"PERMISSION_SCOPE_WALLETS_UPDATE":         9,
	"PERMISSION_SCOPE_TRANSACTIONS_VERIFY":    10,
	"PERMISSION_SCOPE_TRANSACTIONS_BROADCAST": 11,
	"PERMISSION_SCOPE_ADMIN_USER":             12,
	"PERMISSION_SCOPE_ADMIN_VALIDATOR":        13,
}

func (x PermissionScope) String() string {
	return proto.EnumName(PermissionScope_name, int32(x))
}

func (PermissionScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cc61ab03a01b9c8, []int{7}
}

func init() {
	proto.RegisterEnum("did.v1.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("did.v1.DIDNamespace", DIDNamespace_name, DIDNamespace_value)
	proto.RegisterEnum("did.v1.KeyAlgorithm", KeyAlgorithm_name, KeyAlgorithm_value)
	proto.RegisterEnum("did.v1.KeyCurve", KeyCurve_name, KeyCurve_value)
	proto.RegisterEnum("did.v1.KeyEncoding", KeyEncoding_name, KeyEncoding_value)
	proto.RegisterEnum("did.v1.KeyRole", KeyRole_name, KeyRole_value)
	proto.RegisterEnum("did.v1.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("did.v1.PermissionScope", PermissionScope_name, PermissionScope_value)
}

func init() { proto.RegisterFile("did/v1/constants.proto", fileDescriptor_7cc61ab03a01b9c8) }

var fileDescriptor_7cc61ab03a01b9c8 = []byte{
	// 902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x95, 0xdf, 0x72, 0xda, 0x46,
	0x14, 0xc6, 0x2d, 0x83, 0xb1, 0xb3, 0x71, 0x92, 0x93, 0x4d, 0xe2, 0x24, 0x4d, 0x42, 0xd2, 0x24,
	0xd3, 0x74, 0xe8, 0x8c, 0x29, 0xd8, 0x34, 0xe9, 0x4c, 0x6f, 0x56, 0xab, 0x63, 0xb3, 0x95, 0x90,
	0x34, 0xbb, 0x0b, 0xc4, 0xbd, 0x61, 0x1c, 0xd0, 0x38, 0xcc, 0xc4, 0x88, 0x01, 0xe2, 0x29, 0x8f,
	0xd0, 0xf6, 0xa6, 0x6f, 0xd0, 0x17, 0xe8, 0x83, 0xf4, 0xd2, 0x97, 0xbd, 0xec, 0xd8, 0x7d, 0x89,
	0xde, 0x75, 0x84, 0xf8, 0x27, 0xc0, 0xbe, 0xe1, 0xe2, 0xf7, 0x7d, 0x3a, 0xfa, 0xce, 0x39, 0xcb,
	0x8a, 0xec, 0xb4, 0xda, 0xad, 0xfc, 0x59, 0x21, 0xdf, 0x0c, 0x3b, 0xfd, 0xc1, 0x71, 0x67, 0xd0,
	0xdf, 0xed, 0xf6, 0xc2, 0x41, 0x48, 0x33, 0xad, 0x76, 0x6b, 0xf7, 0xac, 0x90, 0xfb, 0xd3, 0x20,
	0x37, 0x58, 0xbf, 0x1f, 0x0c, 0xf4, 0xb0, 0x1b, 0xd0, 0x2f, 0xc8, 0x0e, 0x53, 0x0a, 0x75, 0x43,
	0x1f, 0xf9, 0xd8, 0xa8, 0xba, 0xca, 0x47, 0x2e, 0x0e, 0x04, 0x5a, 0xb0, 0x46, 0x1f, 0x90, 0xbb,
	0x73, 0x9a, 0xcb, 0xb4, 0xa8, 0x21, 0x18, 0x74, 0x87, 0xd0, 0x39, 0x5c, 0x97, 0xcc, 0xf7, 0xd1,
	0x82, 0xf5, 0x05, 0xae, 0x34, 0xb3, 0x85, 0x7b, 0x08, 0x29, 0x7a, 0x8f, 0xdc, 0x99, 0xe3, 0xbe,
	0xe7, 0x39, 0x90, 0xa6, 0x94, 0xdc, 0x9e, 0x83, 0xc2, 0xe4, 0xb0, 0xb1, 0x60, 0xe4, 0xf5, 0xe2,
	0xb7, 0x90, 0xc9, 0xfd, 0x67, 0x90, 0x6d, 0x4b, 0x58, 0xee, 0xf1, 0x69, 0xd0, 0xef, 0x1e, 0x37,
	0x03, 0xfa, 0x8c, 0x3c, 0xb6, 0x84, 0xd5, 0x70, 0x59, 0x05, 0x95, 0xcf, 0xf8, 0x62, 0xe8, 0x1d,
	0x42, 0x93, 0xb2, 0xf0, 0x0f, 0x54, 0x9c, 0x3a, 0xc9, 0x95, 0xe7, 0x4a, 0x58, 0xa7, 0x8f, 0xc9,
	0x83, 0x24, 0x37, 0x85, 0xe6, 0x9e, 0x70, 0x21, 0x15, 0xcd, 0x26, 0x29, 0xa1, 0x2e, 0xa3, 0xc4,
	0x6a, 0x05, 0xd2, 0xd1, 0x6c, 0x16, 0x5e, 0x33, 0x6a, 0x61, 0xe9, 0x91, 0x3a, 0x9a, 0xac, 0xaa,
	0xcb, 0x2e, 0x64, 0x96, 0x1f, 0xb1, 0xea, 0x2e, 0x6c, 0x2e, 0x07, 0x50, 0x28, 0x6b, 0x82, 0x23,
	0x6c, 0xe5, 0xfe, 0x35, 0xc8, 0xb6, 0x1d, 0x0c, 0xd9, 0xa7, 0x93, 0xb0, 0xd7, 0x1e, 0x7c, 0x3c,
	0x8d, 0x7a, 0xb7, 0xf1, 0xa8, 0xc1, 0x9c, 0x43, 0x4f, 0x0a, 0x5d, 0xae, 0x2c, 0xf4, 0xfe, 0x90,
	0xdc, 0x4b, 0xca, 0xa8, 0x8a, 0xa5, 0xef, 0xc0, 0x58, 0x25, 0xec, 0xbd, 0xdb, 0x87, 0xf5, 0x55,
	0x42, 0xa9, 0x50, 0x84, 0xd4, 0x0a, 0xc1, 0xb2, 0x14, 0x83, 0x34, 0x7d, 0x44, 0xee, 0xaf, 0x78,
	0x87, 0x1d, 0xf7, 0x9e, 0x54, 0x4c, 0x47, 0x15, 0x8a, 0x7b, 0x6f, 0xdf, 0x42, 0x86, 0x3e, 0x21,
	0x0f, 0x93, 0x9a, 0x8d, 0x9c, 0x33, 0x3b, 0x4a, 0xb7, 0x99, 0x3b, 0x37, 0xc8, 0x96, 0x1d, 0x0c,
	0xf9, 0xe7, 0xde, 0x59, 0x10, 0x8d, 0x23, 0x72, 0xf2, 0xaa, 0xac, 0x2d, 0xae, 0x96, 0x92, 0xdb,
	0x33, 0xc9, 0x8f, 0x3b, 0x4b, 0xb2, 0xb8, 0xa9, 0x24, 0x2b, 0x15, 0x0b, 0x90, 0xa2, 0xf7, 0x09,
	0xcc, 0xd8, 0xfb, 0x62, 0xa9, 0x54, 0xf8, 0x3e, 0x3e, 0x85, 0x73, 0x74, 0x7f, 0xff, 0x1d, 0x6c,
	0x44, 0x6b, 0x9a, 0x31, 0xb4, 0x62, 0x6b, 0x26, 0x3a, 0x9c, 0xf3, 0x38, 0xf2, 0x6e, 0x4e, 0xa6,
	0x14, 0x43, 0x85, 0x3c, 0x0a, 0x65, 0x17, 0x60, 0x2b, 0xf7, 0x8b, 0x41, 0x6e, 0xda, 0xc1, 0x10,
	0x3b, 0xcd, 0xb0, 0xd5, 0xee, 0x9c, 0xd0, 0xa7, 0xe4, 0x51, 0x64, 0x44, 0x97, 0x7b, 0x96, 0x70,
	0x0f, 0x17, 0x1a, 0x1b, 0x87, 0x9b, 0xaa, 0x92, 0xd5, 0xc1, 0x58, 0xa2, 0x65, 0x7c, 0x0f, 0xeb,
	0x93, 0x29, 0x4f, 0x69, 0xa5, 0xea, 0x68, 0x61, 0x32, 0x85, 0xb3, 0x26, 0xa7, 0xda, 0x8f, 0x75,
	0x1b, 0xd2, 0xb9, 0x5f, 0x0d, 0xb2, 0x69, 0x07, 0x43, 0x19, 0x7e, 0x0a, 0x26, 0xdb, 0x93, 0x9e,
	0xb3, 0x38, 0xdc, 0xf1, 0x86, 0x46, 0x4a, 0x74, 0x62, 0xd1, 0xd5, 0x82, 0x33, 0x2d, 0x3c, 0x37,
	0xfe, 0xf3, 0xcc, 0x44, 0xa5, 0x50, 0x8e, 0xf8, 0xf4, 0xf8, 0x8c, 0xb8, 0x85, 0x0e, 0x1e, 0xc6,
	0x0f, 0xa4, 0x12, 0x82, 0x70, 0x6b, 0xde, 0xb8, 0x52, 0x3a, 0xf7, 0x5b, 0x1c, 0x66, 0x74, 0xf7,
	0x8c, 0xc3, 0xac, 0xb8, 0x79, 0xc6, 0x7b, 0x19, 0x29, 0x1e, 0xd7, 0xa8, 0xc1, 0x98, 0xec, 0x65,
	0xc4, 0xd0, 0x71, 0x84, 0xaf, 0x05, 0x87, 0x75, 0x0a, 0x64, 0x7b, 0x8a, 0xa5, 0x62, 0x90, 0x9a,
	0x84, 0x8d, 0x6f, 0xa1, 0xa3, 0x4a, 0x05, 0xb5, 0x14, 0x1c, 0xd2, 0xf4, 0x2e, 0xb9, 0x35, 0xe5,
	0xe5, 0x0a, 0xe3, 0xb0, 0x91, 0xfb, 0x23, 0x4d, 0xee, 0xf8, 0x41, 0xef, 0xb4, 0xdd, 0xef, 0xb7,
	0xc3, 0x8e, 0x6a, 0x86, 0xdd, 0x80, 0xbe, 0x20, 0x4f, 0x7d, 0x94, 0x15, 0xa1, 0x94, 0xf0, 0xdc,
	0x86, 0xe2, 0xde, 0x52, 0xba, 0xe7, 0xe4, 0xc9, 0x92, 0xc3, 0x64, 0x4a, 0xf0, 0x86, 0x70, 0x0f,
	0x3c, 0x30, 0xe8, 0x97, 0xe4, 0xd9, 0x92, 0x41, 0x22, 0xf7, 0xa4, 0xa5, 0x1a, 0x12, 0x59, 0x74,
	0x59, 0xbe, 0x24, 0xd9, 0x2b, 0x2d, 0x75, 0x29, 0x74, 0xb4, 0xce, 0xaf, 0xc8, 0xcb, 0x25, 0x8f,
	0x96, 0xcc, 0x55, 0x8c, 0x47, 0xd3, 0x1c, 0xd7, 0x4a, 0xd3, 0x37, 0xe4, 0xd5, 0xf5, 0xbe, 0xb8,
	0xe0, 0xc6, 0xca, 0x5c, 0x75, 0xe6, 0x38, 0xa8, 0xc7, 0xb5, 0x32, 0xf4, 0x15, 0x79, 0x7e, 0xa5,
	0x85, 0x4b, 0x64, 0x1a, 0x61, 0x73, 0x65, 0xb0, 0x89, 0x49, 0x55, 0x4d, 0xc5, 0xa5, 0x30, 0x11,
	0xb6, 0xae, 0x2d, 0x56, 0xf5, 0xad, 0xa8, 0xd8, 0x0d, 0xfa, 0x35, 0x79, 0x7d, 0x7d, 0xfa, 0x1a,
	0x4a, 0x71, 0x70, 0x04, 0x84, 0x7e, 0x43, 0xde, 0x5c, 0xef, 0x34, 0xa5, 0xc7, 0x2c, 0xce, 0x94,
	0x86, 0x9b, 0x2b, 0x97, 0xc4, 0xac, 0x8a, 0x70, 0x1b, 0x55, 0x85, 0x12, 0xb6, 0xe9, 0x6b, 0xf2,
	0xe2, 0x0a, 0x43, 0x8d, 0x39, 0xc2, 0x62, 0xda, 0x93, 0x70, 0xcb, 0xfc, 0xe1, 0xaf, 0x8b, 0xac,
	0x71, 0x7e, 0x91, 0x35, 0xfe, 0xb9, 0xc8, 0x1a, 0xbf, 0x5f, 0x66, 0xd7, 0xce, 0x2f, 0xb3, 0x6b,
	0x7f, 0x5f, 0x66, 0xd7, 0x7e, 0x7a, 0x79, 0xd2, 0x1e, 0x7c, 0xfc, 0xfc, 0x61, 0xb7, 0x19, 0x9e,
	0xe6, 0xc3, 0x4e, 0x3f, 0xec, 0xf4, 0xf2, 0xa3, 0x9f, 0x9f, 0xf3, 0xd1, 0x07, 0x78, 0x30, 0xec,
	0x06, 0xfd, 0x0f, 0x99, 0xd1, 0xa7, 0x77, 0xef, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x58,
	0x91, 0x1e, 0x94, 0x07, 0x00, 0x00,
}
