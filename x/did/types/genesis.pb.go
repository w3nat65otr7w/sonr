// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AssetType defines the type of asset: native, wrapped, staking, pool, or unspecified
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	AssetType_ASSET_TYPE_NATIVE      AssetType = 1
	AssetType_ASSET_TYPE_WRAPPED     AssetType = 2
	AssetType_ASSET_TYPE_STAKING     AssetType = 3
	AssetType_ASSET_TYPE_POOL        AssetType = 4
	AssetType_ASSET_TYPE_IBC         AssetType = 5
	AssetType_ASSET_TYPE_CW20        AssetType = 6
)

var AssetType_name = map[int32]string{
	0: "ASSET_TYPE_UNSPECIFIED",
	1: "ASSET_TYPE_NATIVE",
	2: "ASSET_TYPE_WRAPPED",
	3: "ASSET_TYPE_STAKING",
	4: "ASSET_TYPE_POOL",
	5: "ASSET_TYPE_IBC",
	6: "ASSET_TYPE_CW20",
}

var AssetType_value = map[string]int32{
	"ASSET_TYPE_UNSPECIFIED": 0,
	"ASSET_TYPE_NATIVE":      1,
	"ASSET_TYPE_WRAPPED":     2,
	"ASSET_TYPE_STAKING":     3,
	"ASSET_TYPE_POOL":        4,
	"ASSET_TYPE_IBC":         5,
	"ASSET_TYPE_CW20":        6,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{0}
}

// DIDNamespace define the different namespaces of DID
type DIDNamespace int32

const (
	DIDNamespace_DID_NAMESPACE_UNSPECIFIED DIDNamespace = 0
	DIDNamespace_DID_NAMESPACE_IPFS        DIDNamespace = 1
	DIDNamespace_DID_NAMESPACE_SONR        DIDNamespace = 2
	DIDNamespace_DID_NAMESPACE_BITCOIN     DIDNamespace = 3
	DIDNamespace_DID_NAMESPACE_ETHEREUM    DIDNamespace = 4
	DIDNamespace_DID_NAMESPACE_IBC         DIDNamespace = 5
	DIDNamespace_DID_NAMESPACE_WEBAUTHN    DIDNamespace = 6
	DIDNamespace_DID_NAMESPACE_DWN         DIDNamespace = 7
	DIDNamespace_DID_NAMESPACE_SERVICE     DIDNamespace = 8
)

var DIDNamespace_name = map[int32]string{
	0: "DID_NAMESPACE_UNSPECIFIED",
	1: "DID_NAMESPACE_IPFS",
	2: "DID_NAMESPACE_SONR",
	3: "DID_NAMESPACE_BITCOIN",
	4: "DID_NAMESPACE_ETHEREUM",
	5: "DID_NAMESPACE_IBC",
	6: "DID_NAMESPACE_WEBAUTHN",
	7: "DID_NAMESPACE_DWN",
	8: "DID_NAMESPACE_SERVICE",
}

var DIDNamespace_value = map[string]int32{
	"DID_NAMESPACE_UNSPECIFIED": 0,
	"DID_NAMESPACE_IPFS":        1,
	"DID_NAMESPACE_SONR":        2,
	"DID_NAMESPACE_BITCOIN":     3,
	"DID_NAMESPACE_ETHEREUM":    4,
	"DID_NAMESPACE_IBC":         5,
	"DID_NAMESPACE_WEBAUTHN":    6,
	"DID_NAMESPACE_DWN":         7,
	"DID_NAMESPACE_SERVICE":     8,
}

func (x DIDNamespace) String() string {
	return proto.EnumName(DIDNamespace_name, int32(x))
}

func (DIDNamespace) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{1}
}

// KeyAlgorithm defines the key algorithm
type KeyAlgorithm int32

const (
	KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED KeyAlgorithm = 0
	KeyAlgorithm_KEY_ALGORITHM_ES256       KeyAlgorithm = 1
	KeyAlgorithm_KEY_ALGORITHM_ES384       KeyAlgorithm = 2
	KeyAlgorithm_KEY_ALGORITHM_ES512       KeyAlgorithm = 3
	KeyAlgorithm_KEY_ALGORITHM_EDDSA       KeyAlgorithm = 4
	KeyAlgorithm_KEY_ALGORITHM_ES256K      KeyAlgorithm = 5
	KeyAlgorithm_KEY_ALGORITHM_ECDSA       KeyAlgorithm = 6
)

var KeyAlgorithm_name = map[int32]string{
	0: "KEY_ALGORITHM_UNSPECIFIED",
	1: "KEY_ALGORITHM_ES256",
	2: "KEY_ALGORITHM_ES384",
	3: "KEY_ALGORITHM_ES512",
	4: "KEY_ALGORITHM_EDDSA",
	5: "KEY_ALGORITHM_ES256K",
	6: "KEY_ALGORITHM_ECDSA",
}

var KeyAlgorithm_value = map[string]int32{
	"KEY_ALGORITHM_UNSPECIFIED": 0,
	"KEY_ALGORITHM_ES256":       1,
	"KEY_ALGORITHM_ES384":       2,
	"KEY_ALGORITHM_ES512":       3,
	"KEY_ALGORITHM_EDDSA":       4,
	"KEY_ALGORITHM_ES256K":      5,
	"KEY_ALGORITHM_ECDSA":       6,
}

func (x KeyAlgorithm) String() string {
	return proto.EnumName(KeyAlgorithm_name, int32(x))
}

func (KeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{2}
}

// KeyCurve defines the key curve
type KeyCurve int32

const (
	KeyCurve_KEY_CURVE_UNSPECIFIED KeyCurve = 0
	KeyCurve_KEY_CURVE_P256        KeyCurve = 1
	KeyCurve_KEY_CURVE_P384        KeyCurve = 2
	KeyCurve_KEY_CURVE_P521        KeyCurve = 3
	KeyCurve_KEY_CURVE_X25519      KeyCurve = 4
	KeyCurve_KEY_CURVE_X448        KeyCurve = 5
	KeyCurve_KEY_CURVE_ED25519     KeyCurve = 6
	KeyCurve_KEY_CURVE_ED448       KeyCurve = 7
	KeyCurve_KEY_CURVE_SECP256K1   KeyCurve = 8
	KeyCurve_KEY_CURVE_BLS12381    KeyCurve = 9
	KeyCurve_KEY_CURVE_KECCAK256   KeyCurve = 10
)

var KeyCurve_name = map[int32]string{
	0:  "KEY_CURVE_UNSPECIFIED",
	1:  "KEY_CURVE_P256",
	2:  "KEY_CURVE_P384",
	3:  "KEY_CURVE_P521",
	4:  "KEY_CURVE_X25519",
	5:  "KEY_CURVE_X448",
	6:  "KEY_CURVE_ED25519",
	7:  "KEY_CURVE_ED448",
	8:  "KEY_CURVE_SECP256K1",
	9:  "KEY_CURVE_BLS12381",
	10: "KEY_CURVE_KECCAK256",
}

var KeyCurve_value = map[string]int32{
	"KEY_CURVE_UNSPECIFIED": 0,
	"KEY_CURVE_P256":        1,
	"KEY_CURVE_P384":        2,
	"KEY_CURVE_P521":        3,
	"KEY_CURVE_X25519":      4,
	"KEY_CURVE_X448":        5,
	"KEY_CURVE_ED25519":     6,
	"KEY_CURVE_ED448":       7,
	"KEY_CURVE_SECP256K1":   8,
	"KEY_CURVE_BLS12381":    9,
	"KEY_CURVE_KECCAK256":   10,
}

func (x KeyCurve) String() string {
	return proto.EnumName(KeyCurve_name, int32(x))
}

func (KeyCurve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{3}
}

// KeyEncoding defines the key encoding
type KeyEncoding int32

const (
	KeyEncoding_KEY_ENCODING_UNSPECIFIED KeyEncoding = 0
	KeyEncoding_KEY_ENCODING_RAW         KeyEncoding = 1
	KeyEncoding_KEY_ENCODING_HEX         KeyEncoding = 2
	KeyEncoding_KEY_ENCODING_MULTIBASE   KeyEncoding = 3
)

var KeyEncoding_name = map[int32]string{
	0: "KEY_ENCODING_UNSPECIFIED",
	1: "KEY_ENCODING_RAW",
	2: "KEY_ENCODING_HEX",
	3: "KEY_ENCODING_MULTIBASE",
}

var KeyEncoding_value = map[string]int32{
	"KEY_ENCODING_UNSPECIFIED": 0,
	"KEY_ENCODING_RAW":         1,
	"KEY_ENCODING_HEX":         2,
	"KEY_ENCODING_MULTIBASE":   3,
}

func (x KeyEncoding) String() string {
	return proto.EnumName(KeyEncoding_name, int32(x))
}

func (KeyEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{4}
}

// KeyRole defines the kind of key
type KeyRole int32

const (
	KeyRole_KEY_ROLE_UNSPECIFIED    KeyRole = 0
	KeyRole_KEY_ROLE_AUTHENTICATION KeyRole = 1
	KeyRole_KEY_ROLE_ASSERTION      KeyRole = 2
	KeyRole_KEY_ROLE_DELEGATION     KeyRole = 3
	KeyRole_KEY_ROLE_INVOCATION     KeyRole = 4
)

var KeyRole_name = map[int32]string{
	0: "KEY_ROLE_UNSPECIFIED",
	1: "KEY_ROLE_AUTHENTICATION",
	2: "KEY_ROLE_ASSERTION",
	3: "KEY_ROLE_DELEGATION",
	4: "KEY_ROLE_INVOCATION",
}

var KeyRole_value = map[string]int32{
	"KEY_ROLE_UNSPECIFIED":    0,
	"KEY_ROLE_AUTHENTICATION": 1,
	"KEY_ROLE_ASSERTION":      2,
	"KEY_ROLE_DELEGATION":     3,
	"KEY_ROLE_INVOCATION":     4,
}

func (x KeyRole) String() string {
	return proto.EnumName(KeyRole_name, int32(x))
}

func (KeyRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{5}
}

// KeyType defines the key type
type KeyType int32

const (
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	KeyType_KEY_TYPE_OCTET       KeyType = 1
	KeyType_KEY_TYPE_ELLIPTIC    KeyType = 2
	KeyType_KEY_TYPE_RSA         KeyType = 3
	KeyType_KEY_TYPE_SYMMETRIC   KeyType = 4
	KeyType_KEY_TYPE_HMAC        KeyType = 5
	KeyType_KEY_TYPE_MPC         KeyType = 6
	KeyType_KEY_TYPE_ZK          KeyType = 7
	KeyType_KEY_TYPE_WEBAUTHN    KeyType = 8
	KeyType_KEY_TYPE_BIP32       KeyType = 9
)

var KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "KEY_TYPE_OCTET",
	2: "KEY_TYPE_ELLIPTIC",
	3: "KEY_TYPE_RSA",
	4: "KEY_TYPE_SYMMETRIC",
	5: "KEY_TYPE_HMAC",
	6: "KEY_TYPE_MPC",
	7: "KEY_TYPE_ZK",
	8: "KEY_TYPE_WEBAUTHN",
	9: "KEY_TYPE_BIP32",
}

var KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED": 0,
	"KEY_TYPE_OCTET":       1,
	"KEY_TYPE_ELLIPTIC":    2,
	"KEY_TYPE_RSA":         3,
	"KEY_TYPE_SYMMETRIC":   4,
	"KEY_TYPE_HMAC":        5,
	"KEY_TYPE_MPC":         6,
	"KEY_TYPE_ZK":          7,
	"KEY_TYPE_WEBAUTHN":    8,
	"KEY_TYPE_BIP32":       9,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{6}
}

type KeyshareRole int32

const (
	KeyshareRole_KEYSHARE_ROLE_UNSPECIFIED KeyshareRole = 0
	KeyshareRole_KEYSHARE_ROLE_USER        KeyshareRole = 1
	KeyshareRole_KEYSHARE_ROLE_VALIDATOR   KeyshareRole = 2
)

var KeyshareRole_name = map[int32]string{
	0: "KEYSHARE_ROLE_UNSPECIFIED",
	1: "KEYSHARE_ROLE_USER",
	2: "KEYSHARE_ROLE_VALIDATOR",
}

var KeyshareRole_value = map[string]int32{
	"KEYSHARE_ROLE_UNSPECIFIED": 0,
	"KEYSHARE_ROLE_USER":        1,
	"KEYSHARE_ROLE_VALIDATOR":   2,
}

func (x KeyshareRole) String() string {
	return proto.EnumName(KeyshareRole_name, int32(x))
}

func (KeyshareRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{7}
}

// PermissionScope define the Capabilities Controllers can grant for Services
type PermissionScope int32

const (
	PermissionScope_PERMISSION_SCOPE_UNSPECIFIED            PermissionScope = 0
	PermissionScope_PERMISSION_SCOPE_BASIC_INFO             PermissionScope = 1
	PermissionScope_PERMISSION_SCOPE_PERMISSIONS_READ       PermissionScope = 2
	PermissionScope_PERMISSION_SCOPE_PERMISSIONS_WRITE      PermissionScope = 3
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_READ      PermissionScope = 4
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_WRITE     PermissionScope = 5
	PermissionScope_PERMISSION_SCOPE_WALLETS_READ           PermissionScope = 6
	PermissionScope_PERMISSION_SCOPE_WALLETS_CREATE         PermissionScope = 7
	PermissionScope_PERMISSION_SCOPE_WALLETS_SUBSCRIBE      PermissionScope = 8
	PermissionScope_PERMISSION_SCOPE_WALLETS_UPDATE         PermissionScope = 9
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_VERIFY    PermissionScope = 10
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_BROADCAST PermissionScope = 11
	PermissionScope_PERMISSION_SCOPE_ADMIN_USER             PermissionScope = 12
	PermissionScope_PERMISSION_SCOPE_ADMIN_VALIDATOR        PermissionScope = 13
)

var PermissionScope_name = map[int32]string{
	0:  "PERMISSION_SCOPE_UNSPECIFIED",
	1:  "PERMISSION_SCOPE_BASIC_INFO",
	2:  "PERMISSION_SCOPE_PERMISSIONS_READ",
	3:  "PERMISSION_SCOPE_PERMISSIONS_WRITE",
	4:  "PERMISSION_SCOPE_TRANSACTIONS_READ",
	5:  "PERMISSION_SCOPE_TRANSACTIONS_WRITE",
	6:  "PERMISSION_SCOPE_WALLETS_READ",
	7:  "PERMISSION_SCOPE_WALLETS_CREATE",
	8:  "PERMISSION_SCOPE_WALLETS_SUBSCRIBE",
	9:  "PERMISSION_SCOPE_WALLETS_UPDATE",
	10: "PERMISSION_SCOPE_TRANSACTIONS_VERIFY",
	11: "PERMISSION_SCOPE_TRANSACTIONS_BROADCAST",
	12: "PERMISSION_SCOPE_ADMIN_USER",
	13: "PERMISSION_SCOPE_ADMIN_VALIDATOR",
}

var PermissionScope_value = map[string]int32{
	"PERMISSION_SCOPE_UNSPECIFIED":            0,
	"PERMISSION_SCOPE_BASIC_INFO":             1,
	"PERMISSION_SCOPE_PERMISSIONS_READ":       2,
	"PERMISSION_SCOPE_PERMISSIONS_WRITE":      3,
	"PERMISSION_SCOPE_TRANSACTIONS_READ":      4,
	"PERMISSION_SCOPE_TRANSACTIONS_WRITE":     5,
	"PERMISSION_SCOPE_WALLETS_READ":           6,
	"PERMISSION_SCOPE_WALLETS_CREATE":         7,
	"PERMISSION_SCOPE_WALLETS_SUBSCRIBE":      8,
	"PERMISSION_SCOPE_WALLETS_UPDATE":         9,
	"PERMISSION_SCOPE_TRANSACTIONS_VERIFY":    10,
	"PERMISSION_SCOPE_TRANSACTIONS_BROADCAST": 11,
	"PERMISSION_SCOPE_ADMIN_USER":             12,
	"PERMISSION_SCOPE_ADMIN_VALIDATOR":        13,
}

func (x PermissionScope) String() string {
	return proto.EnumName(PermissionScope_name, int32(x))
}

func (PermissionScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{8}
}

// GenesisState defines the module genesis state
type GenesisState struct {
	// Params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// GlobalIntegrity defines a zkp integrity proof for the entire DID namespace
	GlobalIntegrity *GlobalIntegrity `protobuf:"bytes,2,opt,name=global_integrity,json=globalIntegrity,proto3" json:"global_integrity,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetGlobalIntegrity() *GlobalIntegrity {
	if m != nil {
		return m.GlobalIntegrity
	}
	return nil
}

// GlobalIntegrity defines a zkp integrity proof for the entire DID namespace
type GlobalIntegrity struct {
	Controller  string `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
	Seed        string `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	Accumulator []byte `protobuf:"bytes,3,opt,name=accumulator,proto3" json:"accumulator,omitempty"`
	Count       uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GlobalIntegrity) Reset()         { *m = GlobalIntegrity{} }
func (m *GlobalIntegrity) String() string { return proto.CompactTextString(m) }
func (*GlobalIntegrity) ProtoMessage()    {}
func (*GlobalIntegrity) Descriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{1}
}
func (m *GlobalIntegrity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalIntegrity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalIntegrity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalIntegrity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalIntegrity.Merge(m, src)
}
func (m *GlobalIntegrity) XXX_Size() int {
	return m.Size()
}
func (m *GlobalIntegrity) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalIntegrity.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalIntegrity proto.InternalMessageInfo

func (m *GlobalIntegrity) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *GlobalIntegrity) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *GlobalIntegrity) GetAccumulator() []byte {
	if m != nil {
		return m.Accumulator
	}
	return nil
}

func (m *GlobalIntegrity) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Params defines the set of module parameters.
type Params struct {
	// Whitelisted Assets
	WhitelistedAssets []*AssetInfo `protobuf:"bytes,1,rep,name=whitelisted_assets,json=whitelistedAssets,proto3" json:"whitelisted_assets,omitempty"`
	// Whitelisted Key Types
	AllowedPublicKeys map[string]*KeyInfo `protobuf:"bytes,2,rep,name=allowed_public_keys,json=allowedPublicKeys,proto3" json:"allowed_public_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// IpfsActive is a flag to enable/disable ipfs
	IpfsActive bool `protobuf:"varint,3,opt,name=ipfs_active,json=ipfsActive,proto3" json:"ipfs_active,omitempty"`
	// Localhost Registration Enabled
	LocalhostRegistrationEnabled bool `protobuf:"varint,4,opt,name=localhost_registration_enabled,json=localhostRegistrationEnabled,proto3" json:"localhost_registration_enabled,omitempty"`
	// ConveyancePreference defines the conveyance preference
	ConveyancePreference string `protobuf:"bytes,5,opt,name=conveyance_preference,json=conveyancePreference,proto3" json:"conveyance_preference,omitempty"`
	// AttestationFormats defines the attestation formats
	AttestationFormats []string `protobuf:"bytes,6,rep,name=attestation_formats,json=attestationFormats,proto3" json:"attestation_formats,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetWhitelistedAssets() []*AssetInfo {
	if m != nil {
		return m.WhitelistedAssets
	}
	return nil
}

func (m *Params) GetAllowedPublicKeys() map[string]*KeyInfo {
	if m != nil {
		return m.AllowedPublicKeys
	}
	return nil
}

func (m *Params) GetIpfsActive() bool {
	if m != nil {
		return m.IpfsActive
	}
	return false
}

func (m *Params) GetLocalhostRegistrationEnabled() bool {
	if m != nil {
		return m.LocalhostRegistrationEnabled
	}
	return false
}

func (m *Params) GetConveyancePreference() string {
	if m != nil {
		return m.ConveyancePreference
	}
	return ""
}

func (m *Params) GetAttestationFormats() []string {
	if m != nil {
		return m.AttestationFormats
	}
	return nil
}

// AssetInfo defines the asset info
type AssetInfo struct {
	// The coin type index for bip44 path
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The hrp for bech32 address
	Hrp string `protobuf:"bytes,2,opt,name=hrp,proto3" json:"hrp,omitempty"`
	// The coin symbol
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The coin name
	AssetType AssetType `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=did.v1.AssetType" json:"asset_type,omitempty"`
	// The name of the asset
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The icon url
	IconUrl string `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (m *AssetInfo) Reset()         { *m = AssetInfo{} }
func (m *AssetInfo) String() string { return proto.CompactTextString(m) }
func (*AssetInfo) ProtoMessage()    {}
func (*AssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{3}
}
func (m *AssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetInfo.Merge(m, src)
}
func (m *AssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *AssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AssetInfo proto.InternalMessageInfo

func (m *AssetInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AssetInfo) GetHrp() string {
	if m != nil {
		return m.Hrp
	}
	return ""
}

func (m *AssetInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *AssetInfo) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *AssetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetInfo) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

// KeyInfo defines information for accepted PubKey types
type KeyInfo struct {
	Role      KeyRole      `protobuf:"varint,1,opt,name=role,proto3,enum=did.v1.KeyRole" json:"role,omitempty"`
	Algorithm KeyAlgorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=did.v1.KeyAlgorithm" json:"algorithm,omitempty"`
	Encoding  KeyEncoding  `protobuf:"varint,3,opt,name=encoding,proto3,enum=did.v1.KeyEncoding" json:"encoding,omitempty"`
	Curve     KeyCurve     `protobuf:"varint,4,opt,name=curve,proto3,enum=did.v1.KeyCurve" json:"curve,omitempty"`
	Type      KeyType      `protobuf:"varint,5,opt,name=type,proto3,enum=did.v1.KeyType" json:"type,omitempty"`
}

func (m *KeyInfo) Reset()         { *m = KeyInfo{} }
func (m *KeyInfo) String() string { return proto.CompactTextString(m) }
func (*KeyInfo) ProtoMessage()    {}
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fda181cae44f7c00, []int{4}
}
func (m *KeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyInfo.Merge(m, src)
}
func (m *KeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *KeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_KeyInfo proto.InternalMessageInfo

func (m *KeyInfo) GetRole() KeyRole {
	if m != nil {
		return m.Role
	}
	return KeyRole_KEY_ROLE_UNSPECIFIED
}

func (m *KeyInfo) GetAlgorithm() KeyAlgorithm {
	if m != nil {
		return m.Algorithm
	}
	return KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED
}

func (m *KeyInfo) GetEncoding() KeyEncoding {
	if m != nil {
		return m.Encoding
	}
	return KeyEncoding_KEY_ENCODING_UNSPECIFIED
}

func (m *KeyInfo) GetCurve() KeyCurve {
	if m != nil {
		return m.Curve
	}
	return KeyCurve_KEY_CURVE_UNSPECIFIED
}

func (m *KeyInfo) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("did.v1.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("did.v1.DIDNamespace", DIDNamespace_name, DIDNamespace_value)
	proto.RegisterEnum("did.v1.KeyAlgorithm", KeyAlgorithm_name, KeyAlgorithm_value)
	proto.RegisterEnum("did.v1.KeyCurve", KeyCurve_name, KeyCurve_value)
	proto.RegisterEnum("did.v1.KeyEncoding", KeyEncoding_name, KeyEncoding_value)
	proto.RegisterEnum("did.v1.KeyRole", KeyRole_name, KeyRole_value)
	proto.RegisterEnum("did.v1.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("did.v1.KeyshareRole", KeyshareRole_name, KeyshareRole_value)
	proto.RegisterEnum("did.v1.PermissionScope", PermissionScope_name, PermissionScope_value)
	proto.RegisterType((*GenesisState)(nil), "did.v1.GenesisState")
	proto.RegisterType((*GlobalIntegrity)(nil), "did.v1.GlobalIntegrity")
	proto.RegisterType((*Params)(nil), "did.v1.Params")
	proto.RegisterMapType((map[string]*KeyInfo)(nil), "did.v1.Params.AllowedPublicKeysEntry")
	proto.RegisterType((*AssetInfo)(nil), "did.v1.AssetInfo")
	proto.RegisterType((*KeyInfo)(nil), "did.v1.KeyInfo")
}

func init() { proto.RegisterFile("did/v1/genesis.proto", fileDescriptor_fda181cae44f7c00) }

var fileDescriptor_fda181cae44f7c00 = []byte{
	// 1547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0x3d, 0x73, 0xe3, 0xc6,
	0x19, 0x16, 0xf8, 0x25, 0xf2, 0x95, 0x2c, 0xad, 0x56, 0x3a, 0x1d, 0xef, 0x7c, 0x96, 0x64, 0x9d,
	0xcf, 0xd6, 0x30, 0x19, 0xd1, 0xa2, 0x4e, 0x99, 0x8b, 0x27, 0x45, 0x40, 0x70, 0x25, 0x61, 0x48,
	0x82, 0x98, 0x05, 0x28, 0xf9, 0xdc, 0x60, 0x20, 0x72, 0x45, 0x61, 0x0c, 0x02, 0x1c, 0x00, 0x92,
	0xcd, 0x22, 0x33, 0x49, 0xeb, 0x2a, 0x65, 0x4a, 0x77, 0x69, 0x52, 0xe4, 0x47, 0xa4, 0x70, 0xe9,
	0x32, 0x69, 0x3c, 0x9e, 0xbb, 0x22, 0xf9, 0x0b, 0xe9, 0x3c, 0xbb, 0xe0, 0x07, 0xf8, 0x61, 0x35,
	0x9c, 0xdd, 0xe7, 0x79, 0xde, 0x77, 0xdf, 0xaf, 0xdd, 0x01, 0x61, 0xa7, 0xeb, 0x74, 0xcb, 0x0f,
	0x27, 0xe5, 0x1e, 0xf3, 0x58, 0xe8, 0x84, 0xc7, 0x83, 0xc0, 0x8f, 0x7c, 0x9c, 0xeb, 0x3a, 0xdd,
	0xe3, 0x87, 0x93, 0xe7, 0x5b, 0x76, 0xdf, 0xf1, 0xfc, 0xb2, 0xf8, 0x8d, 0xa9, 0xe7, 0x3b, 0x3d,
	0xbf, 0xe7, 0x8b, 0x65, 0x99, 0xaf, 0x62, 0xf4, 0xf0, 0xcf, 0x12, 0xac, 0x5f, 0xc4, 0x2e, 0x8c,
	0xc8, 0x8e, 0x18, 0xfe, 0x2d, 0xe4, 0x06, 0x76, 0x60, 0xf7, 0xc3, 0xa2, 0x74, 0x20, 0x1d, 0xad,
	0x55, 0x36, 0x8e, 0x63, 0x97, 0xc7, 0xba, 0x40, 0xab, 0x99, 0x1f, 0x7e, 0xda, 0x5f, 0xa1, 0x23,
	0x0d, 0xae, 0x02, 0xea, 0xb9, 0xfe, 0x8d, 0xed, 0x5a, 0x8e, 0x17, 0xb1, 0x5e, 0xe0, 0x44, 0xc3,
	0x62, 0x4a, 0xd8, 0x3d, 0x1d, 0xdb, 0x5d, 0x08, 0x5e, 0x1d, 0xd3, 0x74, 0xb3, 0x37, 0x0b, 0x1c,
	0xfe, 0x09, 0x36, 0xe7, 0x34, 0x78, 0x0f, 0xa0, 0xe3, 0x7b, 0x51, 0xe0, 0xbb, 0x2e, 0x0b, 0x44,
	0x20, 0x05, 0x9a, 0x40, 0x30, 0x86, 0x4c, 0xc8, 0x58, 0x57, 0x1c, 0x55, 0xa0, 0x62, 0x8d, 0x0f,
	0x60, 0xcd, 0xee, 0x74, 0xee, 0xfb, 0xf7, 0xae, 0x1d, 0xf9, 0x41, 0x31, 0x7d, 0x20, 0x1d, 0xad,
	0xd3, 0x24, 0x84, 0x77, 0x20, 0xdb, 0xf1, 0xef, 0xbd, 0xa8, 0x98, 0x39, 0x90, 0x8e, 0x32, 0x34,
	0xde, 0x1c, 0xfe, 0x94, 0x86, 0x5c, 0x9c, 0x1b, 0xfe, 0x23, 0xe0, 0x6f, 0xee, 0x9c, 0x88, 0xb9,
	0x4e, 0x18, 0xb1, 0xae, 0x65, 0x87, 0x21, 0x8b, 0x78, 0x1d, 0xd2, 0x47, 0x6b, 0x95, 0xad, 0x71,
	0x3e, 0x32, 0x47, 0x55, 0xef, 0xd6, 0xa7, 0x5b, 0x09, 0xb1, 0x40, 0x43, 0xdc, 0x86, 0x6d, 0xdb,
	0x75, 0xfd, 0x6f, 0x58, 0xd7, 0x1a, 0xdc, 0xdf, 0xb8, 0x4e, 0xc7, 0xfa, 0x9a, 0x0d, 0xc3, 0x62,
	0x4a, 0xb8, 0x78, 0x35, 0x5b, 0xca, 0x63, 0x39, 0x56, 0xea, 0x42, 0x58, 0x67, 0xc3, 0x90, 0x78,
	0x51, 0x30, 0xa4, 0x5b, 0xf6, 0x3c, 0x8e, 0xf7, 0x61, 0xcd, 0x19, 0xdc, 0x86, 0x96, 0xdd, 0x89,
	0x9c, 0x07, 0x26, 0x72, 0xcb, 0x53, 0xe0, 0x90, 0x2c, 0x10, 0x5c, 0x83, 0x3d, 0xd7, 0xef, 0xd8,
	0xee, 0x9d, 0x1f, 0x46, 0x56, 0xc0, 0x7a, 0x4e, 0x18, 0x05, 0x76, 0xe4, 0xf8, 0x9e, 0xc5, 0x3c,
	0xfb, 0xc6, 0x65, 0x5d, 0x91, 0x73, 0x9e, 0xbe, 0x98, 0xa8, 0x68, 0x42, 0x44, 0x62, 0x0d, 0x3e,
	0x85, 0x27, 0x1d, 0xdf, 0x7b, 0x60, 0x43, 0xdb, 0xeb, 0x30, 0x6b, 0x10, 0xb0, 0x5b, 0x16, 0x30,
	0xaf, 0xc3, 0x8a, 0x59, 0x51, 0xe7, 0x9d, 0x29, 0xa9, 0x4f, 0x38, 0x5c, 0x86, 0x6d, 0x3b, 0x8a,
	0x58, 0x18, 0xc5, 0xe7, 0xdd, 0xfa, 0x41, 0xdf, 0x8e, 0xc2, 0x62, 0xee, 0x20, 0x7d, 0x54, 0xa0,
	0x38, 0x41, 0x9d, 0xc7, 0xcc, 0xf3, 0x36, 0xec, 0x2e, 0xcf, 0x1c, 0x23, 0x48, 0x7f, 0xcd, 0x86,
	0xa3, 0x7e, 0xf3, 0x25, 0x7e, 0x05, 0xd9, 0x07, 0xdb, 0xbd, 0x67, 0xa3, 0xa1, 0xda, 0x1c, 0x57,
	0xb0, 0xce, 0x86, 0xa2, 0x05, 0x31, 0xfb, 0x45, 0xea, 0x8d, 0xf4, 0xc5, 0xd3, 0xbf, 0x7d, 0xbf,
	0xbf, 0xf2, 0xbf, 0xef, 0xf7, 0xa5, 0xef, 0xfe, 0xfb, 0xcf, 0x12, 0xf0, 0xdb, 0x11, 0xcf, 0xe8,
	0xe1, 0x3f, 0x24, 0x28, 0x4c, 0x9a, 0xc6, 0x87, 0xc0, 0xf1, 0xba, 0xec, 0x5b, 0x71, 0x4a, 0x9a,
	0xc6, 0x1b, 0x7e, 0xf2, 0x5d, 0x30, 0x18, 0xcd, 0x13, 0x5f, 0xe2, 0x5d, 0xc8, 0x85, 0xc3, 0xfe,
	0x8d, 0xef, 0x8a, 0x6a, 0x17, 0xe8, 0x68, 0x87, 0x3f, 0x07, 0x10, 0x73, 0x61, 0x45, 0xc3, 0x01,
	0x13, 0x55, 0xdd, 0x98, 0x9b, 0x0d, 0x73, 0x38, 0x60, 0xb4, 0x60, 0x8f, 0x97, 0x7c, 0x58, 0x3d,
	0xbb, 0x3f, 0x2e, 0xa2, 0x58, 0xe3, 0x67, 0x90, 0x77, 0x3a, 0xbe, 0x67, 0xdd, 0x07, 0x6e, 0x31,
	0x27, 0xf0, 0x55, 0xbe, 0x6f, 0x07, 0xee, 0xe1, 0xcf, 0x12, 0xac, 0x8e, 0xd2, 0xc3, 0x2f, 0x21,
	0x13, 0xf8, 0x2e, 0x13, 0xb1, 0x6e, 0xcc, 0x64, 0x4f, 0x7d, 0x97, 0x51, 0x41, 0xe2, 0x0a, 0x14,
	0x6c, 0xb7, 0xe7, 0x07, 0x4e, 0x74, 0xd7, 0x17, 0x19, 0x6c, 0x54, 0x76, 0x12, 0x4a, 0x79, 0xcc,
	0xd1, 0xa9, 0x0c, 0x97, 0x21, 0xcf, 0xbc, 0x8e, 0xdf, 0x75, 0xbc, 0x9e, 0xc8, 0x6f, 0xa3, 0xb2,
	0x9d, 0x30, 0x21, 0x23, 0x8a, 0x4e, 0x44, 0xf8, 0x53, 0xc8, 0x76, 0xee, 0x83, 0x87, 0x71, 0xc6,
	0x28, 0xa1, 0x56, 0x38, 0x4e, 0x63, 0x9a, 0x47, 0x2c, 0x0a, 0x93, 0x5d, 0x88, 0x58, 0x94, 0x45,
	0x90, 0xa5, 0x49, 0x47, 0x44, 0x7d, 0x9e, 0xc3, 0xae, 0x6c, 0x18, 0xc4, 0xb4, 0xcc, 0xb7, 0x3a,
	0xb1, 0xda, 0x9a, 0xa1, 0x13, 0x45, 0x3d, 0x57, 0x49, 0x0d, 0xad, 0xe0, 0x27, 0xb0, 0x95, 0xe0,
	0x34, 0xd9, 0x54, 0xaf, 0x08, 0x92, 0xf0, 0x2e, 0xe0, 0x04, 0x7c, 0x4d, 0x65, 0x5d, 0x27, 0x35,
	0x94, 0x9a, 0xc3, 0x0d, 0x53, 0xae, 0xab, 0xda, 0x05, 0x4a, 0xe3, 0x6d, 0xd8, 0x4c, 0xe0, 0x7a,
	0xab, 0xd5, 0x40, 0x19, 0x8c, 0x61, 0x23, 0x01, 0xaa, 0x55, 0x05, 0x65, 0xe7, 0x84, 0xca, 0x75,
	0xe5, 0x73, 0x94, 0x2b, 0xfd, 0x5f, 0x82, 0xf5, 0x9a, 0x5a, 0xd3, 0xec, 0x3e, 0x0b, 0x07, 0x76,
	0x87, 0xe1, 0x8f, 0xe0, 0x59, 0x4d, 0xad, 0x59, 0x9a, 0xdc, 0x24, 0x86, 0x2e, 0x2b, 0xf3, 0x41,
	0xef, 0x02, 0x9e, 0xa5, 0x55, 0xfd, 0xdc, 0x88, 0xa3, 0x9e, 0xc5, 0x8d, 0x96, 0x46, 0x51, 0x0a,
	0x3f, 0x83, 0x27, 0xb3, 0x78, 0x55, 0x35, 0x95, 0x96, 0xaa, 0xa1, 0x34, 0xaf, 0xcd, 0x2c, 0x45,
	0xcc, 0x4b, 0x42, 0x49, 0xbb, 0x89, 0x32, 0xbc, 0x36, 0x73, 0xc7, 0x88, 0x14, 0x16, 0x4c, 0xae,
	0x49, 0x55, 0x6e, 0x9b, 0x97, 0x1a, 0xca, 0x2d, 0x9a, 0xd4, 0xae, 0x35, 0xb4, 0xba, 0x18, 0x80,
	0x41, 0xe8, 0x95, 0xaa, 0x10, 0x94, 0x2f, 0xfd, 0x4b, 0x82, 0xf5, 0xe4, 0x10, 0xf1, 0xdc, 0xeb,
	0xe4, 0xad, 0x25, 0x37, 0x2e, 0x5a, 0x54, 0x35, 0x2f, 0x9b, 0x73, 0xb9, 0x3f, 0x85, 0xed, 0x59,
	0x9a, 0x18, 0x95, 0xb3, 0xdf, 0x21, 0x69, 0x19, 0x71, 0xfa, 0xe6, 0x35, 0x4a, 0x2d, 0x23, 0xce,
	0x4e, 0x2a, 0x28, 0xbd, 0x84, 0xa8, 0xd5, 0x0c, 0x19, 0x65, 0x70, 0x11, 0x76, 0x96, 0x9c, 0x51,
	0x47, 0xd9, 0x25, 0x26, 0x0a, 0x37, 0xc9, 0x95, 0xfe, 0x92, 0x82, 0xfc, 0x78, 0x54, 0x79, 0xba,
	0x5c, 0xa5, 0xb4, 0xe9, 0xd5, 0x7c, 0xeb, 0x30, 0x6c, 0x4c, 0x29, 0x3d, 0x8e, 0x7c, 0x16, 0x8b,
	0x83, 0x9e, 0xc5, 0xce, 0x2a, 0x27, 0x28, 0x8d, 0x77, 0x00, 0x4d, 0xb1, 0x2f, 0x2b, 0x67, 0x67,
	0x27, 0xbf, 0x8f, 0xa7, 0x2c, 0x81, 0xbe, 0x7e, 0xfd, 0x06, 0x65, 0x79, 0x1b, 0xa6, 0x18, 0xa9,
	0xc5, 0xd2, 0x1c, 0x1f, 0xbe, 0x24, 0xcc, 0xb5, 0xab, 0xe3, 0x94, 0x62, 0xd0, 0x20, 0x0a, 0x0f,
	0xaa, 0x7e, 0x82, 0xf2, 0x7c, 0x9a, 0xa6, 0x44, 0xb5, 0x61, 0x9c, 0x54, 0x4e, 0xdf, 0x9c, 0xa0,
	0xc2, 0xac, 0x41, 0x9d, 0x28, 0x8a, 0x5c, 0xe7, 0x79, 0x40, 0x29, 0x84, 0xb5, 0xc4, 0xdd, 0xc6,
	0x2f, 0xa0, 0xc8, 0x75, 0x44, 0x53, 0x5a, 0x35, 0x55, 0xbb, 0x98, 0x2b, 0xc4, 0x28, 0x99, 0x09,
	0x4b, 0xe5, 0x6b, 0x24, 0x2d, 0xa0, 0x97, 0xe4, 0x4b, 0x94, 0xe2, 0x13, 0x37, 0x83, 0x36, 0xdb,
	0x0d, 0x53, 0xad, 0xca, 0x06, 0x41, 0xe9, 0xd2, 0x77, 0xf1, 0x6b, 0xc6, 0x9f, 0xab, 0x71, 0xdf,
	0x68, 0xab, 0x31, 0x5f, 0xf6, 0x0f, 0xe1, 0xe9, 0x84, 0xe1, 0xb3, 0x4a, 0x34, 0x53, 0x55, 0x64,
	0x53, 0x6d, 0x69, 0xf1, 0xb5, 0x99, 0x92, 0x86, 0x41, 0xa8, 0xc0, 0x27, 0x83, 0x23, 0xf0, 0x1a,
	0x69, 0x90, 0x8b, 0xd8, 0x20, 0x3d, 0x43, 0xa8, 0xda, 0x55, 0x6b, 0xe4, 0x29, 0x53, 0xfa, 0x4f,
	0x1c, 0x8c, 0x78, 0x75, 0x46, 0xc1, 0x2c, 0x79, 0x73, 0x46, 0x1d, 0x13, 0x4c, 0x4b, 0x31, 0x89,
	0x89, 0xa4, 0x71, 0xc7, 0x04, 0x46, 0x1a, 0x0d, 0x55, 0x37, 0x55, 0x05, 0xa5, 0x30, 0x82, 0xf5,
	0x09, 0x4c, 0x0d, 0x19, 0xa5, 0xc7, 0xc1, 0xc6, 0xef, 0xcf, 0xdb, 0x66, 0x93, 0x98, 0x54, 0x55,
	0x50, 0x06, 0x6f, 0xc1, 0x07, 0x13, 0xfc, 0xb2, 0x29, 0xf3, 0x8b, 0x9a, 0x34, 0x6e, 0xea, 0x0a,
	0xca, 0xe1, 0x4d, 0x58, 0x9b, 0x20, 0x5f, 0xd5, 0xd1, 0xea, 0xcc, 0xb1, 0x93, 0x6b, 0x9c, 0x9f,
	0x89, 0xb0, 0xaa, 0xea, 0xa7, 0x15, 0x54, 0x28, 0xdd, 0x88, 0x7b, 0x1a, 0xde, 0xd9, 0x01, 0x13,
	0xc5, 0x8e, 0xef, 0xa9, 0x71, 0x29, 0x53, 0xb2, 0xac, 0xe2, 0x71, 0x9c, 0x49, 0xda, 0x20, 0x14,
	0x49, 0xa3, 0x4e, 0x24, 0xf0, 0x2b, 0xb9, 0xa1, 0xd6, 0x64, 0xb3, 0x45, 0x51, 0xaa, 0xf4, 0xf7,
	0x0c, 0x6c, 0xea, 0x2c, 0xe8, 0x3b, 0x61, 0xe8, 0xf8, 0x9e, 0xd1, 0xf1, 0x07, 0x0c, 0x1f, 0xc0,
	0x0b, 0x9d, 0xd0, 0xa6, 0x6a, 0x18, 0x6a, 0x4b, 0xb3, 0x0c, 0xa5, 0xb5, 0x50, 0xcf, 0x7d, 0xf8,
	0x70, 0x41, 0x51, 0x95, 0x0d, 0x55, 0xb1, 0x54, 0xed, 0xbc, 0x85, 0x24, 0xfc, 0x0a, 0x3e, 0x5e,
	0x10, 0x4c, 0x01, 0xc3, 0xa2, 0x44, 0xe6, 0x8f, 0xfb, 0xa7, 0x70, 0xf8, 0xa8, 0xec, 0x9a, 0xaa,
	0x26, 0x41, 0xe9, 0xa5, 0x3a, 0x93, 0xca, 0x9a, 0x21, 0x2b, 0xe6, 0xd4, 0x5f, 0x06, 0x7f, 0x06,
	0x2f, 0x1f, 0xd7, 0xc5, 0x0e, 0xb3, 0xf8, 0x63, 0xf8, 0x68, 0x41, 0x78, 0x2d, 0x37, 0x1a, 0xc4,
	0x1c, 0xf9, 0xca, 0xe1, 0x97, 0xb0, 0xff, 0xab, 0x12, 0x85, 0x12, 0xd9, 0x24, 0x68, 0x75, 0x69,
	0x60, 0x63, 0x91, 0xd1, 0xae, 0x1a, 0x0a, 0x55, 0xab, 0x04, 0xe5, 0x1f, 0x75, 0xd6, 0xd6, 0x6b,
	0xdc, 0x59, 0x01, 0x1f, 0xc1, 0x27, 0x8f, 0x47, 0x7f, 0x45, 0xa8, 0x7a, 0xfe, 0x16, 0x01, 0xfe,
	0x0d, 0x7c, 0xf6, 0xb8, 0xb2, 0x4a, 0x5b, 0x72, 0x4d, 0x91, 0x0d, 0x13, 0xad, 0x2d, 0x6d, 0x96,
	0x5c, 0x6b, 0xaa, 0x5a, 0x3c, 0x20, 0xeb, 0xf8, 0x13, 0x38, 0xf8, 0x15, 0xc1, 0x74, 0x52, 0x3e,
	0xa8, 0xfe, 0xe1, 0x87, 0x77, 0x7b, 0xd2, 0x8f, 0xef, 0xf6, 0xa4, 0x9f, 0xdf, 0xed, 0x49, 0x7f,
	0x7d, 0xbf, 0xb7, 0xf2, 0xe3, 0xfb, 0xbd, 0x95, 0x7f, 0xbf, 0xdf, 0x5b, 0xf9, 0xea, 0xb0, 0xe7,
	0x44, 0x77, 0xf7, 0x37, 0xc7, 0x1d, 0xbf, 0x5f, 0xf6, 0xbd, 0xd0, 0xf7, 0x82, 0xb2, 0xf8, 0xf9,
	0xb6, 0xcc, 0x3f, 0xd9, 0xf8, 0xe7, 0x41, 0x78, 0x93, 0x13, 0xff, 0x4d, 0x4e, 0x7f, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x75, 0x67, 0x23, 0xa4, 0xe4, 0x0c, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WhitelistedAssets) != len(that1.WhitelistedAssets) {
		return false
	}
	for i := range this.WhitelistedAssets {
		if !this.WhitelistedAssets[i].Equal(that1.WhitelistedAssets[i]) {
			return false
		}
	}
	if len(this.AllowedPublicKeys) != len(that1.AllowedPublicKeys) {
		return false
	}
	for i := range this.AllowedPublicKeys {
		if !this.AllowedPublicKeys[i].Equal(that1.AllowedPublicKeys[i]) {
			return false
		}
	}
	if this.IpfsActive != that1.IpfsActive {
		return false
	}
	if this.LocalhostRegistrationEnabled != that1.LocalhostRegistrationEnabled {
		return false
	}
	if this.ConveyancePreference != that1.ConveyancePreference {
		return false
	}
	if len(this.AttestationFormats) != len(that1.AttestationFormats) {
		return false
	}
	for i := range this.AttestationFormats {
		if this.AttestationFormats[i] != that1.AttestationFormats[i] {
			return false
		}
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalIntegrity != nil {
		{
			size, err := m.GlobalIntegrity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GlobalIntegrity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalIntegrity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalIntegrity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Accumulator) > 0 {
		i -= len(m.Accumulator)
		copy(dAtA[i:], m.Accumulator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Accumulator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Seed) > 0 {
		i -= len(m.Seed)
		copy(dAtA[i:], m.Seed)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Seed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttestationFormats) > 0 {
		for iNdEx := len(m.AttestationFormats) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AttestationFormats[iNdEx])
			copy(dAtA[i:], m.AttestationFormats[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AttestationFormats[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ConveyancePreference) > 0 {
		i -= len(m.ConveyancePreference)
		copy(dAtA[i:], m.ConveyancePreference)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ConveyancePreference)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LocalhostRegistrationEnabled {
		i--
		if m.LocalhostRegistrationEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IpfsActive {
		i--
		if m.IpfsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AllowedPublicKeys) > 0 {
		for k := range m.AllowedPublicKeys {
			v := m.AllowedPublicKeys[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGenesis(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WhitelistedAssets) > 0 {
		for iNdEx := len(m.WhitelistedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhitelistedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AssetType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hrp) > 0 {
		i -= len(m.Hrp)
		copy(dAtA[i:], m.Hrp)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Hrp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.Curve != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Curve))
		i--
		dAtA[i] = 0x20
	}
	if m.Encoding != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Encoding))
		i--
		dAtA[i] = 0x18
	}
	if m.Algorithm != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if m.Role != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.GlobalIntegrity != nil {
		l = m.GlobalIntegrity.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GlobalIntegrity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Accumulator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovGenesis(uint64(m.Count))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhitelistedAssets) > 0 {
		for _, e := range m.WhitelistedAssets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AllowedPublicKeys) > 0 {
		for k, v := range m.AllowedPublicKeys {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenesis(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.IpfsActive {
		n += 2
	}
	if m.LocalhostRegistrationEnabled {
		n += 2
	}
	l = len(m.ConveyancePreference)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.AttestationFormats) > 0 {
		for _, s := range m.AttestationFormats {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *AssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGenesis(uint64(m.Index))
	}
	l = len(m.Hrp)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovGenesis(uint64(m.AssetType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *KeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovGenesis(uint64(m.Role))
	}
	if m.Algorithm != 0 {
		n += 1 + sovGenesis(uint64(m.Algorithm))
	}
	if m.Encoding != 0 {
		n += 1 + sovGenesis(uint64(m.Encoding))
	}
	if m.Curve != 0 {
		n += 1 + sovGenesis(uint64(m.Curve))
	}
	if m.Type != 0 {
		n += 1 + sovGenesis(uint64(m.Type))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalIntegrity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalIntegrity == nil {
				m.GlobalIntegrity = &GlobalIntegrity{}
			}
			if err := m.GlobalIntegrity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalIntegrity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalIntegrity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalIntegrity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accumulator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accumulator = append(m.Accumulator[:0], dAtA[iNdEx:postIndex]...)
			if m.Accumulator == nil {
				m.Accumulator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedAssets = append(m.WhitelistedAssets, &AssetInfo{})
			if err := m.WhitelistedAssets[len(m.WhitelistedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedPublicKeys == nil {
				m.AllowedPublicKeys = make(map[string]*KeyInfo)
			}
			var mapkey string
			var mapvalue *KeyInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &KeyInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllowedPublicKeys[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpfsActive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalhostRegistrationEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalhostRegistrationEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConveyancePreference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConveyancePreference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationFormats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationFormats = append(m.AttestationFormats, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= KeyRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= KeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= KeyEncoding(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curve", wireType)
			}
			m.Curve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curve |= KeyCurve(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
