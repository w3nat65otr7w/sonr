// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dwn/v1/events.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventRecordWritten is emitted when a record is written to DWN
type EventRecordWritten struct {
	// Record ID
	RecordId string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// Target DID
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Protocol URI
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Schema URI
	Schema string `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	// Data CID
	DataCid string `protobuf:"bytes,5,opt,name=data_cid,json=dataCid,proto3" json:"data_cid,omitempty"`
	// Data size in bytes
	DataSize uint64 `protobuf:"varint,6,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Whether data is encrypted
	Encrypted bool `protobuf:"varint,7,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventRecordWritten) Reset()         { *m = EventRecordWritten{} }
func (m *EventRecordWritten) String() string { return proto.CompactTextString(m) }
func (*EventRecordWritten) ProtoMessage()    {}
func (*EventRecordWritten) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{0}
}
func (m *EventRecordWritten) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordWritten) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordWritten.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordWritten) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordWritten.Merge(m, src)
}
func (m *EventRecordWritten) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordWritten) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordWritten.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordWritten proto.InternalMessageInfo

func (m *EventRecordWritten) GetRecordId() string {
	if m != nil {
		return m.RecordId
	}
	return ""
}

func (m *EventRecordWritten) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *EventRecordWritten) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *EventRecordWritten) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *EventRecordWritten) GetDataCid() string {
	if m != nil {
		return m.DataCid
	}
	return ""
}

func (m *EventRecordWritten) GetDataSize() uint64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *EventRecordWritten) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *EventRecordWritten) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventRecordDeleted is emitted when a record is deleted from DWN
type EventRecordDeleted struct {
	// Record ID
	RecordId string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// Target DID
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Deleter address
	Deleter string `protobuf:"bytes,3,opt,name=deleter,proto3" json:"deleter,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventRecordDeleted) Reset()         { *m = EventRecordDeleted{} }
func (m *EventRecordDeleted) String() string { return proto.CompactTextString(m) }
func (*EventRecordDeleted) ProtoMessage()    {}
func (*EventRecordDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{1}
}
func (m *EventRecordDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordDeleted.Merge(m, src)
}
func (m *EventRecordDeleted) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordDeleted proto.InternalMessageInfo

func (m *EventRecordDeleted) GetRecordId() string {
	if m != nil {
		return m.RecordId
	}
	return ""
}

func (m *EventRecordDeleted) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *EventRecordDeleted) GetDeleter() string {
	if m != nil {
		return m.Deleter
	}
	return ""
}

func (m *EventRecordDeleted) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventProtocolConfigured is emitted when a protocol is configured
type EventProtocolConfigured struct {
	// Target DID
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Protocol URI
	ProtocolUri string `protobuf:"bytes,2,opt,name=protocol_uri,json=protocolUri,proto3" json:"protocol_uri,omitempty"`
	// Whether protocol is published
	Published bool `protobuf:"varint,3,opt,name=published,proto3" json:"published,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventProtocolConfigured) Reset()         { *m = EventProtocolConfigured{} }
func (m *EventProtocolConfigured) String() string { return proto.CompactTextString(m) }
func (*EventProtocolConfigured) ProtoMessage()    {}
func (*EventProtocolConfigured) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{2}
}
func (m *EventProtocolConfigured) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProtocolConfigured) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProtocolConfigured.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProtocolConfigured) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProtocolConfigured.Merge(m, src)
}
func (m *EventProtocolConfigured) XXX_Size() int {
	return m.Size()
}
func (m *EventProtocolConfigured) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProtocolConfigured.DiscardUnknown(m)
}

var xxx_messageInfo_EventProtocolConfigured proto.InternalMessageInfo

func (m *EventProtocolConfigured) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *EventProtocolConfigured) GetProtocolUri() string {
	if m != nil {
		return m.ProtocolUri
	}
	return ""
}

func (m *EventProtocolConfigured) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *EventProtocolConfigured) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventPermissionGranted is emitted when a permission is granted
type EventPermissionGranted struct {
	// Permission ID
	PermissionId string `protobuf:"bytes,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// Grantor DID
	Grantor string `protobuf:"bytes,2,opt,name=grantor,proto3" json:"grantor,omitempty"`
	// Grantee DID
	Grantee string `protobuf:"bytes,3,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// Interface name
	InterfaceName string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Method name
	Method string `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	// Expiration timestamp
	ExpiresAt *time.Time `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventPermissionGranted) Reset()         { *m = EventPermissionGranted{} }
func (m *EventPermissionGranted) String() string { return proto.CompactTextString(m) }
func (*EventPermissionGranted) ProtoMessage()    {}
func (*EventPermissionGranted) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{3}
}
func (m *EventPermissionGranted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPermissionGranted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPermissionGranted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPermissionGranted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPermissionGranted.Merge(m, src)
}
func (m *EventPermissionGranted) XXX_Size() int {
	return m.Size()
}
func (m *EventPermissionGranted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPermissionGranted.DiscardUnknown(m)
}

var xxx_messageInfo_EventPermissionGranted proto.InternalMessageInfo

func (m *EventPermissionGranted) GetPermissionId() string {
	if m != nil {
		return m.PermissionId
	}
	return ""
}

func (m *EventPermissionGranted) GetGrantor() string {
	if m != nil {
		return m.Grantor
	}
	return ""
}

func (m *EventPermissionGranted) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *EventPermissionGranted) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *EventPermissionGranted) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *EventPermissionGranted) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *EventPermissionGranted) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventPermissionRevoked is emitted when a permission is revoked
type EventPermissionRevoked struct {
	// Permission ID
	PermissionId string `protobuf:"bytes,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// Revoker DID
	Revoker string `protobuf:"bytes,2,opt,name=revoker,proto3" json:"revoker,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventPermissionRevoked) Reset()         { *m = EventPermissionRevoked{} }
func (m *EventPermissionRevoked) String() string { return proto.CompactTextString(m) }
func (*EventPermissionRevoked) ProtoMessage()    {}
func (*EventPermissionRevoked) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{4}
}
func (m *EventPermissionRevoked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPermissionRevoked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPermissionRevoked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPermissionRevoked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPermissionRevoked.Merge(m, src)
}
func (m *EventPermissionRevoked) XXX_Size() int {
	return m.Size()
}
func (m *EventPermissionRevoked) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPermissionRevoked.DiscardUnknown(m)
}

var xxx_messageInfo_EventPermissionRevoked proto.InternalMessageInfo

func (m *EventPermissionRevoked) GetPermissionId() string {
	if m != nil {
		return m.PermissionId
	}
	return ""
}

func (m *EventPermissionRevoked) GetRevoker() string {
	if m != nil {
		return m.Revoker
	}
	return ""
}

func (m *EventPermissionRevoked) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventVaultCreated is emitted when a vault is created
type EventVaultCreated struct {
	// Vault ID
	VaultId string `protobuf:"bytes,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	// Owner DID
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Vault public key
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventVaultCreated) Reset()         { *m = EventVaultCreated{} }
func (m *EventVaultCreated) String() string { return proto.CompactTextString(m) }
func (*EventVaultCreated) ProtoMessage()    {}
func (*EventVaultCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{5}
}
func (m *EventVaultCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVaultCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVaultCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVaultCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVaultCreated.Merge(m, src)
}
func (m *EventVaultCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventVaultCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVaultCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventVaultCreated proto.InternalMessageInfo

func (m *EventVaultCreated) GetVaultId() string {
	if m != nil {
		return m.VaultId
	}
	return ""
}

func (m *EventVaultCreated) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventVaultCreated) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *EventVaultCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventVaultKeysRotated is emitted when vault keys are rotated
type EventVaultKeysRotated struct {
	// Vault ID
	VaultId string `protobuf:"bytes,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	// Owner DID
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// New public key
	NewPublicKey string `protobuf:"bytes,3,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty"`
	// Rotation height
	RotationHeight uint64 `protobuf:"varint,4,opt,name=rotation_height,json=rotationHeight,proto3" json:"rotation_height,omitempty"`
	// Block height
	BlockHeight uint64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *EventVaultKeysRotated) Reset()         { *m = EventVaultKeysRotated{} }
func (m *EventVaultKeysRotated) String() string { return proto.CompactTextString(m) }
func (*EventVaultKeysRotated) ProtoMessage()    {}
func (*EventVaultKeysRotated) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{6}
}
func (m *EventVaultKeysRotated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVaultKeysRotated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVaultKeysRotated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVaultKeysRotated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVaultKeysRotated.Merge(m, src)
}
func (m *EventVaultKeysRotated) XXX_Size() int {
	return m.Size()
}
func (m *EventVaultKeysRotated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVaultKeysRotated.DiscardUnknown(m)
}

var xxx_messageInfo_EventVaultKeysRotated proto.InternalMessageInfo

func (m *EventVaultKeysRotated) GetVaultId() string {
	if m != nil {
		return m.VaultId
	}
	return ""
}

func (m *EventVaultKeysRotated) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventVaultKeysRotated) GetNewPublicKey() string {
	if m != nil {
		return m.NewPublicKey
	}
	return ""
}

func (m *EventVaultKeysRotated) GetRotationHeight() uint64 {
	if m != nil {
		return m.RotationHeight
	}
	return 0
}

func (m *EventVaultKeysRotated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// EventKeyRotation is emitted when encryption keys are rotated
type EventKeyRotation struct {
	// Previous key version (0 if first rotation)
	OldKeyVersion uint64 `protobuf:"varint,1,opt,name=old_key_version,json=oldKeyVersion,proto3" json:"old_key_version,omitempty"`
	// New key version
	NewKeyVersion uint64 `protobuf:"varint,2,opt,name=new_key_version,json=newKeyVersion,proto3" json:"new_key_version,omitempty"`
	// Reason for rotation
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Block height when rotation occurred
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Whether running in single node mode
	SingleNodeMode bool `protobuf:"varint,5,opt,name=single_node_mode,json=singleNodeMode,proto3" json:"single_node_mode,omitempty"`
	// Number of validators at time of rotation
	ValidatorCount uint32 `protobuf:"varint,6,opt,name=validator_count,json=validatorCount,proto3" json:"validator_count,omitempty"`
}

func (m *EventKeyRotation) Reset()         { *m = EventKeyRotation{} }
func (m *EventKeyRotation) String() string { return proto.CompactTextString(m) }
func (*EventKeyRotation) ProtoMessage()    {}
func (*EventKeyRotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b2c15ef2ff67ab, []int{7}
}
func (m *EventKeyRotation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventKeyRotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventKeyRotation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventKeyRotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventKeyRotation.Merge(m, src)
}
func (m *EventKeyRotation) XXX_Size() int {
	return m.Size()
}
func (m *EventKeyRotation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventKeyRotation.DiscardUnknown(m)
}

var xxx_messageInfo_EventKeyRotation proto.InternalMessageInfo

func (m *EventKeyRotation) GetOldKeyVersion() uint64 {
	if m != nil {
		return m.OldKeyVersion
	}
	return 0
}

func (m *EventKeyRotation) GetNewKeyVersion() uint64 {
	if m != nil {
		return m.NewKeyVersion
	}
	return 0
}

func (m *EventKeyRotation) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *EventKeyRotation) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventKeyRotation) GetSingleNodeMode() bool {
	if m != nil {
		return m.SingleNodeMode
	}
	return false
}

func (m *EventKeyRotation) GetValidatorCount() uint32 {
	if m != nil {
		return m.ValidatorCount
	}
	return 0
}

func init() {
	proto.RegisterType((*EventRecordWritten)(nil), "dwn.v1.EventRecordWritten")
	proto.RegisterType((*EventRecordDeleted)(nil), "dwn.v1.EventRecordDeleted")
	proto.RegisterType((*EventProtocolConfigured)(nil), "dwn.v1.EventProtocolConfigured")
	proto.RegisterType((*EventPermissionGranted)(nil), "dwn.v1.EventPermissionGranted")
	proto.RegisterType((*EventPermissionRevoked)(nil), "dwn.v1.EventPermissionRevoked")
	proto.RegisterType((*EventVaultCreated)(nil), "dwn.v1.EventVaultCreated")
	proto.RegisterType((*EventVaultKeysRotated)(nil), "dwn.v1.EventVaultKeysRotated")
	proto.RegisterType((*EventKeyRotation)(nil), "dwn.v1.EventKeyRotation")
}

func init() { proto.RegisterFile("dwn/v1/events.proto", fileDescriptor_93b2c15ef2ff67ab) }

var fileDescriptor_93b2c15ef2ff67ab = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0xdb, 0x34, 0x71, 0xa6, 0x49, 0xda, 0xeb, 0xdb, 0xdb, 0xeb, 0xe6, 0x5e, 0xd2, 0x3f,
	0x7e, 0xb2, 0x21, 0x56, 0x61, 0xcd, 0x82, 0x06, 0x04, 0x55, 0x44, 0x55, 0x19, 0x28, 0x12, 0x1b,
	0xcb, 0xf1, 0x9c, 0x3a, 0xa3, 0xda, 0x33, 0xd1, 0x78, 0x92, 0x34, 0x7d, 0x00, 0xd6, 0xdd, 0x20,
	0xf1, 0x2c, 0x3c, 0x41, 0x97, 0x5d, 0xb2, 0x02, 0xd4, 0xbe, 0x00, 0x2b, 0xd6, 0x68, 0x66, 0xec,
	0xa4, 0x95, 0x59, 0x94, 0xae, 0x92, 0xef, 0x3b, 0xe7, 0xcc, 0xf9, 0xce, 0x37, 0x67, 0x64, 0xf4,
	0x37, 0x1e, 0x51, 0x67, 0xb8, 0xed, 0xc0, 0x10, 0xa8, 0x48, 0x5a, 0x7d, 0xce, 0x04, 0xb3, 0x8a,
	0x78, 0x44, 0x5b, 0xc3, 0xed, 0xfa, 0x72, 0xc8, 0x42, 0xa6, 0x28, 0x47, 0xfe, 0xd3, 0xd1, 0xfa,
	0x5a, 0xc8, 0x58, 0x18, 0x81, 0xa3, 0x50, 0x77, 0x70, 0xe8, 0x08, 0x12, 0x43, 0x22, 0xfc, 0xb8,
	0xaf, 0x13, 0x36, 0x7f, 0x1a, 0xc8, 0x7a, 0x2e, 0xcf, 0x73, 0x21, 0x60, 0x1c, 0xbf, 0xe3, 0x44,
	0x08, 0xa0, 0xd6, 0x7f, 0xa8, 0xcc, 0x15, 0xe1, 0x11, 0x6c, 0x1b, 0xeb, 0x46, 0xb3, 0xec, 0x9a,
	0x9a, 0xd8, 0xc5, 0xd6, 0x0a, 0x2a, 0x0a, 0x9f, 0x87, 0x20, 0xec, 0x59, 0x15, 0x49, 0x91, 0x55,
	0x47, 0xa6, 0x3a, 0x34, 0x60, 0x91, 0x3d, 0xa7, 0x6b, 0x32, 0x2c, 0x6b, 0x92, 0xa0, 0x07, 0xb1,
	0x6f, 0x17, 0x74, 0x8d, 0x46, 0xd6, 0x2a, 0x32, 0xb1, 0x2f, 0x7c, 0x2f, 0x20, 0xd8, 0x9e, 0x57,
	0x91, 0x92, 0xc4, 0x6d, 0x82, 0xa5, 0x06, 0x15, 0x4a, 0xc8, 0x09, 0xd8, 0xc5, 0x75, 0xa3, 0x59,
	0x70, 0x55, 0xee, 0x6b, 0x72, 0x02, 0xd6, 0xff, 0xa8, 0x0c, 0x34, 0xe0, 0xe3, 0xbe, 0x00, 0x6c,
	0x97, 0xd6, 0x8d, 0xa6, 0xe9, 0x4e, 0x09, 0x6b, 0x03, 0x55, 0xba, 0x11, 0x0b, 0x8e, 0xbc, 0x1e,
	0x90, 0xb0, 0x27, 0x6c, 0x53, 0x55, 0x2f, 0x28, 0xee, 0xa5, 0xa2, 0x36, 0x3f, 0x5c, 0x1f, 0xfc,
	0x19, 0x44, 0x20, 0x2b, 0x6f, 0x35, 0xb8, 0x8d, 0x4a, 0x58, 0xd5, 0xf3, 0x74, 0xee, 0x0c, 0xe6,
	0x84, 0x14, 0xf2, 0x42, 0x3e, 0x1a, 0xe8, 0x5f, 0x25, 0x64, 0x3f, 0xf5, 0xaa, 0xcd, 0xe8, 0x21,
	0x09, 0x07, 0x1c, 0xae, 0x36, 0x34, 0xae, 0x35, 0xdc, 0x40, 0x95, 0xcc, 0x59, 0x6f, 0xc0, 0x49,
	0x2a, 0x67, 0x21, 0xe3, 0xde, 0x72, 0x22, 0x0d, 0xea, 0x0f, 0xba, 0x11, 0x49, 0x7a, 0x80, 0x95,
	0x2a, 0xd3, 0x9d, 0x12, 0x37, 0xd1, 0xf5, 0x69, 0x16, 0xad, 0x68, 0x5d, 0xc0, 0x63, 0x92, 0x24,
	0x84, 0xd1, 0x17, 0xdc, 0xa7, 0xd2, 0xa4, 0x2d, 0x54, 0xed, 0x4f, 0xc8, 0xa9, 0x51, 0x95, 0x29,
	0xb9, 0x8b, 0xa5, 0x29, 0xa1, 0xcc, 0x67, 0x3c, 0x95, 0x97, 0xc1, 0x49, 0x04, 0x20, 0xb3, 0x2b,
	0x85, 0xd6, 0x3d, 0x54, 0x23, 0x54, 0x00, 0x3f, 0xf4, 0x03, 0xf0, 0xa8, 0x1f, 0x43, 0xba, 0x2d,
	0xd5, 0x09, 0xbb, 0xe7, 0xc7, 0x20, 0x6d, 0x89, 0x41, 0xf4, 0x58, 0xb6, 0x32, 0x29, 0xb2, 0xda,
	0x08, 0xc1, 0x71, 0x9f, 0x70, 0x48, 0x3c, 0x5f, 0xa8, 0x95, 0x59, 0x78, 0x54, 0x6f, 0xe9, 0x27,
	0xd0, 0xca, 0x9e, 0x40, 0xeb, 0x4d, 0xf6, 0x04, 0x76, 0xcc, 0xb3, 0xaf, 0x6b, 0xc6, 0xe9, 0xb7,
	0x35, 0xc3, 0x2d, 0xa7, 0x75, 0x4f, 0x45, 0xce, 0x9a, 0x52, 0xde, 0x9a, 0x93, 0x9c, 0x33, 0x2e,
	0x0c, 0xd9, 0xd1, 0x1f, 0x38, 0xc3, 0x55, 0xfe, 0xc4, 0x99, 0x14, 0xe6, 0x7a, 0xcf, 0xfd, 0x76,
	0x6f, 0xff, 0x52, 0xcd, 0x0f, 0xfc, 0x41, 0x24, 0xda, 0x1c, 0x7c, 0x79, 0x23, 0xab, 0xc8, 0x1c,
	0x4a, 0x3c, 0x6d, 0x59, 0x52, 0x78, 0x17, 0x5b, 0xcb, 0x68, 0x9e, 0x8d, 0xe8, 0xa4, 0x97, 0x06,
	0xd6, 0x1d, 0x84, 0xd4, 0x36, 0x04, 0xde, 0x11, 0x8c, 0xd3, 0x6b, 0xd0, 0xfb, 0x11, 0x74, 0x60,
	0x7c, 0x93, 0xfd, 0xf8, 0x6c, 0xa0, 0x7f, 0xa6, 0x42, 0x3a, 0x30, 0x4e, 0x5c, 0x26, 0x6e, 0x27,
	0xe6, 0x2e, 0xaa, 0x51, 0x18, 0x79, 0x39, 0x41, 0x15, 0x0a, 0xa3, 0xfd, 0x89, 0xa6, 0x07, 0x68,
	0x91, 0xcb, 0x0e, 0xd2, 0xd9, 0x6b, 0xb2, 0x6a, 0x19, 0xad, 0x95, 0xe5, 0xc4, 0xcf, 0xe7, 0xc5,
	0xff, 0x30, 0xd0, 0x92, 0x12, 0xdf, 0x81, 0xb1, 0x9b, 0x56, 0x5b, 0xf7, 0xd1, 0x22, 0x8b, 0xb0,
	0xec, 0xef, 0x0d, 0x81, 0xcb, 0xcb, 0x52, 0xf2, 0x0b, 0x6e, 0x95, 0x45, 0xb8, 0x03, 0xe3, 0x03,
	0x4d, 0xca, 0x3c, 0x29, 0xf7, 0x6a, 0xde, 0xac, 0xce, 0xa3, 0x30, 0xba, 0x92, 0xb7, 0x82, 0x8a,
	0x1c, 0xfc, 0x84, 0xd1, 0x74, 0x9c, 0x14, 0xdd, 0xc0, 0x5c, 0xab, 0x89, 0x96, 0x12, 0x42, 0xc3,
	0x08, 0x3c, 0xca, 0x30, 0x78, 0x31, 0xc3, 0xa0, 0xc6, 0x30, 0xdd, 0x9a, 0xe6, 0xf7, 0x18, 0x86,
	0x57, 0x0c, 0x83, 0x74, 0x65, 0xe8, 0x47, 0x04, 0xfb, 0x82, 0x71, 0x2f, 0x60, 0x03, 0xaa, 0x17,
	0xbf, 0xea, 0xd6, 0x26, 0x74, 0x5b, 0xb2, 0x3b, 0x4f, 0xce, 0x2e, 0x1a, 0xc6, 0xf9, 0x45, 0xc3,
	0xf8, 0x7e, 0xd1, 0x30, 0x4e, 0x2f, 0x1b, 0x33, 0xe7, 0x97, 0x8d, 0x99, 0x2f, 0x97, 0x8d, 0x99,
	0xf7, 0x5b, 0x21, 0x11, 0xbd, 0x41, 0xb7, 0x15, 0xb0, 0xd8, 0x49, 0x18, 0xe5, 0x0f, 0x09, 0x53,
	0xbf, 0xce, 0xb1, 0x23, 0xbf, 0x38, 0x62, 0xdc, 0x87, 0xa4, 0x5b, 0x54, 0xef, 0xe7, 0xf1, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x7d, 0x20, 0x67, 0x85, 0x06, 0x00, 0x00,
}

func (m *EventRecordWritten) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordWritten) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordWritten) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.Encrypted {
		i--
		if m.Encrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DataSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DataCid) > 0 {
		i -= len(m.DataCid)
		copy(dAtA[i:], m.DataCid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DataCid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordId) > 0 {
		i -= len(m.RecordId)
		copy(dAtA[i:], m.RecordId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Deleter) > 0 {
		i -= len(m.Deleter)
		copy(dAtA[i:], m.Deleter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Deleter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordId) > 0 {
		i -= len(m.RecordId)
		copy(dAtA[i:], m.RecordId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProtocolConfigured) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProtocolConfigured) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProtocolConfigured) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.Published {
		i--
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProtocolUri) > 0 {
		i -= len(m.ProtocolUri)
		copy(dAtA[i:], m.ProtocolUri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ProtocolUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPermissionGranted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPermissionGranted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPermissionGranted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.ExpiresAt != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEvents(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InterfaceName) > 0 {
		i -= len(m.InterfaceName)
		copy(dAtA[i:], m.InterfaceName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InterfaceName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Grantor) > 0 {
		i -= len(m.Grantor)
		copy(dAtA[i:], m.Grantor)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Grantor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PermissionId) > 0 {
		i -= len(m.PermissionId)
		copy(dAtA[i:], m.PermissionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PermissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPermissionRevoked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPermissionRevoked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPermissionRevoked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Revoker) > 0 {
		i -= len(m.Revoker)
		copy(dAtA[i:], m.Revoker)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Revoker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PermissionId) > 0 {
		i -= len(m.PermissionId)
		copy(dAtA[i:], m.PermissionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PermissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventVaultCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVaultCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVaultCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventVaultKeysRotated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVaultKeysRotated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVaultKeysRotated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.RotationHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RotationHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NewPublicKey) > 0 {
		i -= len(m.NewPublicKey)
		copy(dAtA[i:], m.NewPublicKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewPublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventKeyRotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventKeyRotation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventKeyRotation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValidatorCount))
		i--
		dAtA[i] = 0x30
	}
	if m.SingleNodeMode {
		i--
		if m.SingleNodeMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewKeyVersion != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewKeyVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.OldKeyVersion != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OldKeyVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventRecordWritten) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DataCid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DataSize != 0 {
		n += 1 + sovEvents(uint64(m.DataSize))
	}
	if m.Encrypted {
		n += 2
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventRecordDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Deleter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventProtocolConfigured) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ProtocolUri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Published {
		n += 2
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventPermissionGranted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PermissionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Grantor)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InterfaceName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventPermissionRevoked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PermissionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Revoker)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventVaultCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventVaultKeysRotated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewPublicKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RotationHeight != 0 {
		n += 1 + sovEvents(uint64(m.RotationHeight))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventKeyRotation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldKeyVersion != 0 {
		n += 1 + sovEvents(uint64(m.OldKeyVersion))
	}
	if m.NewKeyVersion != 0 {
		n += 1 + sovEvents(uint64(m.NewKeyVersion))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	if m.SingleNodeMode {
		n += 2
	}
	if m.ValidatorCount != 0 {
		n += 1 + sovEvents(uint64(m.ValidatorCount))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventRecordWritten) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordWritten: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordWritten: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deleter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProtocolConfigured) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProtocolConfigured: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProtocolConfigured: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPermissionGranted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPermissionGranted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPermissionGranted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPermissionRevoked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPermissionRevoked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPermissionRevoked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revoker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVaultCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVaultCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVaultCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVaultKeysRotated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVaultKeysRotated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVaultKeysRotated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationHeight", wireType)
			}
			m.RotationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RotationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventKeyRotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventKeyRotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventKeyRotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldKeyVersion", wireType)
			}
			m.OldKeyVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldKeyVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKeyVersion", wireType)
			}
			m.NewKeyVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewKeyVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleNodeMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SingleNodeMode = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCount", wireType)
			}
			m.ValidatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
