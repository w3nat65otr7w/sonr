// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dwn/v1/genesis.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module genesis state
type GenesisState struct {
	// Params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// DWN Records
	Records []DWNRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records"`
	// DWN Protocols
	Protocols []DWNProtocol `protobuf:"bytes,3,rep,name=protocols,proto3" json:"protocols"`
	// DWN Permissions
	Permissions []DWNPermission `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions"`
	// Vaults
	Vaults []VaultState `protobuf:"bytes,5,rep,name=vaults,proto3" json:"vaults"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7492a25d5871dc, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetRecords() []DWNRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *GenesisState) GetProtocols() []DWNProtocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *GenesisState) GetPermissions() []DWNPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *GenesisState) GetVaults() []VaultState {
	if m != nil {
		return m.Vaults
	}
	return nil
}

// Params defines the set of module parameters.
type Params struct {
	// Maximum size for DWN record data in bytes
	MaxRecordSize uint64 `protobuf:"varint,1,opt,name=max_record_size,json=maxRecordSize,proto3" json:"max_record_size,omitempty"`
	// Maximum number of protocols per DWN
	MaxProtocolsPerDwn uint32 `protobuf:"varint,2,opt,name=max_protocols_per_dwn,json=maxProtocolsPerDwn,proto3" json:"max_protocols_per_dwn,omitempty"`
	// Maximum number of permissions per DWN
	MaxPermissionsPerDwn uint32 `protobuf:"varint,3,opt,name=max_permissions_per_dwn,json=maxPermissionsPerDwn,proto3" json:"max_permissions_per_dwn,omitempty"`
	// Enable vault creation
	VaultCreationEnabled bool `protobuf:"varint,4,opt,name=vault_creation_enabled,json=vaultCreationEnabled,proto3" json:"vault_creation_enabled,omitempty"`
	// Minimum vault refresh interval in blocks
	MinVaultRefreshInterval uint64 `protobuf:"varint,5,opt,name=min_vault_refresh_interval,json=minVaultRefreshInterval,proto3" json:"min_vault_refresh_interval,omitempty"`
	// Encryption configuration
	EncryptionEnabled bool `protobuf:"varint,6,opt,name=encryption_enabled,json=encryptionEnabled,proto3" json:"encryption_enabled,omitempty"`
	// Key rotation interval in days
	KeyRotationDays uint32 `protobuf:"varint,7,opt,name=key_rotation_days,json=keyRotationDays,proto3" json:"key_rotation_days,omitempty"`
	// Minimum validators required for key generation (percentage of active set)
	MinValidatorsForKeyGen uint32 `protobuf:"varint,8,opt,name=min_validators_for_key_gen,json=minValidatorsForKeyGen,proto3" json:"min_validators_for_key_gen,omitempty"`
	// Protocols that require encryption
	EncryptedProtocols []string `protobuf:"bytes,9,rep,name=encrypted_protocols,json=encryptedProtocols,proto3" json:"encrypted_protocols,omitempty"`
	// Schemas that require encryption
	EncryptedSchemas []string `protobuf:"bytes,10,rep,name=encrypted_schemas,json=encryptedSchemas,proto3" json:"encrypted_schemas,omitempty"`
	// Enable single-node fallback for development
	SingleNodeFallback bool `protobuf:"varint,11,opt,name=single_node_fallback,json=singleNodeFallback,proto3" json:"single_node_fallback,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7492a25d5871dc, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxRecordSize() uint64 {
	if m != nil {
		return m.MaxRecordSize
	}
	return 0
}

func (m *Params) GetMaxProtocolsPerDwn() uint32 {
	if m != nil {
		return m.MaxProtocolsPerDwn
	}
	return 0
}

func (m *Params) GetMaxPermissionsPerDwn() uint32 {
	if m != nil {
		return m.MaxPermissionsPerDwn
	}
	return 0
}

func (m *Params) GetVaultCreationEnabled() bool {
	if m != nil {
		return m.VaultCreationEnabled
	}
	return false
}

func (m *Params) GetMinVaultRefreshInterval() uint64 {
	if m != nil {
		return m.MinVaultRefreshInterval
	}
	return 0
}

func (m *Params) GetEncryptionEnabled() bool {
	if m != nil {
		return m.EncryptionEnabled
	}
	return false
}

func (m *Params) GetKeyRotationDays() uint32 {
	if m != nil {
		return m.KeyRotationDays
	}
	return 0
}

func (m *Params) GetMinValidatorsForKeyGen() uint32 {
	if m != nil {
		return m.MinValidatorsForKeyGen
	}
	return 0
}

func (m *Params) GetEncryptedProtocols() []string {
	if m != nil {
		return m.EncryptedProtocols
	}
	return nil
}

func (m *Params) GetEncryptedSchemas() []string {
	if m != nil {
		return m.EncryptedSchemas
	}
	return nil
}

func (m *Params) GetSingleNodeFallback() bool {
	if m != nil {
		return m.SingleNodeFallback
	}
	return false
}

type IPFSStatus struct {
	PeerId   string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	PeerType string `protobuf:"bytes,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	Version  string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *IPFSStatus) Reset()         { *m = IPFSStatus{} }
func (m *IPFSStatus) String() string { return proto.CompactTextString(m) }
func (*IPFSStatus) ProtoMessage()    {}
func (*IPFSStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7492a25d5871dc, []int{2}
}
func (m *IPFSStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPFSStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPFSStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPFSStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPFSStatus.Merge(m, src)
}
func (m *IPFSStatus) XXX_Size() int {
	return m.Size()
}
func (m *IPFSStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IPFSStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IPFSStatus proto.InternalMessageInfo

func (m *IPFSStatus) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *IPFSStatus) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *IPFSStatus) GetPeerType() string {
	if m != nil {
		return m.PeerType
	}
	return ""
}

func (m *IPFSStatus) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "dwn.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "dwn.v1.Params")
	proto.RegisterType((*IPFSStatus)(nil), "dwn.v1.IPFSStatus")
}

func init() { proto.RegisterFile("dwn/v1/genesis.proto", fileDescriptor_8e7492a25d5871dc) }

var fileDescriptor_8e7492a25d5871dc = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0xc1, 0x4e, 0xdb, 0x4e,
	0x10, 0xc6, 0x63, 0x12, 0x12, 0xb2, 0xf9, 0xf3, 0xa7, 0x59, 0x02, 0xb1, 0xa8, 0x14, 0x22, 0x2a,
	0x55, 0x11, 0x2d, 0x31, 0xa1, 0xad, 0x2a, 0x51, 0x71, 0xa1, 0x14, 0x84, 0x2a, 0xa1, 0xc8, 0xa9,
	0x5a, 0xa9, 0x17, 0x6b, 0x13, 0x0f, 0xc1, 0xc2, 0xde, 0xb5, 0x76, 0x4d, 0x12, 0xf3, 0x08, 0x3d,
	0xf5, 0xd8, 0xde, 0x78, 0x84, 0x3e, 0x06, 0x97, 0x4a, 0x1c, 0x7b, 0xaa, 0x2a, 0x38, 0xb4, 0x8f,
	0x51, 0x79, 0xd6, 0x4e, 0xe8, 0x05, 0xec, 0xf9, 0xbe, 0x5f, 0x66, 0xbe, 0xd1, 0x98, 0xd4, 0xdc,
	0x31, 0xb7, 0x46, 0x1d, 0x6b, 0x08, 0x1c, 0x94, 0xa7, 0xda, 0xa1, 0x14, 0x91, 0xa0, 0x45, 0x77,
	0xcc, 0xdb, 0xa3, 0xce, 0x5a, 0x95, 0x05, 0x1e, 0x17, 0x16, 0xfe, 0xd5, 0xd2, 0x1a, 0x4d, 0x01,
	0x15, 0xb1, 0x08, 0xd2, 0x5a, 0x6d, 0x28, 0x86, 0x02, 0x1f, 0xad, 0xe4, 0x49, 0x57, 0x37, 0xbe,
	0xce, 0x91, 0xff, 0x8e, 0xf4, 0xcf, 0xf6, 0x12, 0x33, 0x7d, 0x4a, 0x8a, 0x21, 0x93, 0x2c, 0x50,
	0xa6, 0xd1, 0x34, 0x5a, 0x95, 0x9d, 0xff, 0xdb, 0xba, 0x4d, 0xbb, 0x8b, 0xd5, 0xfd, 0xc2, 0xf5,
	0xcf, 0xf5, 0x9c, 0x9d, 0x7a, 0x68, 0x87, 0x94, 0x24, 0x0c, 0x84, 0x74, 0x95, 0x39, 0xd7, 0xcc,
	0xb7, 0x2a, 0x3b, 0xd5, 0xcc, 0x7e, 0xf0, 0xe1, 0xc4, 0x46, 0x25, 0x25, 0x32, 0x1f, 0x7d, 0x49,
	0xca, 0xd8, 0x7a, 0x20, 0x7c, 0x65, 0xe6, 0x11, 0x5a, 0xbe, 0x07, 0x75, 0x53, 0x2d, 0xc5, 0x66,
	0x5e, 0xba, 0x47, 0x2a, 0x21, 0xc8, 0xc0, 0x53, 0xca, 0x13, 0x5c, 0x99, 0x05, 0x44, 0x57, 0xee,
	0xa3, 0x53, 0x35, 0x85, 0xef, 0xfb, 0xe9, 0x36, 0x29, 0x8e, 0xd8, 0x85, 0x1f, 0x29, 0x73, 0x1e,
	0x49, 0x9a, 0x91, 0xef, 0x93, 0x2a, 0x86, 0xcf, 0xc2, 0x69, 0xdf, 0xc6, 0xf7, 0x02, 0x29, 0xea,
	0xd4, 0xf4, 0x31, 0x59, 0x0a, 0xd8, 0xc4, 0xd1, 0x19, 0x1c, 0xe5, 0x5d, 0x02, 0xae, 0xa7, 0x60,
	0x2f, 0x06, 0x6c, 0xa2, 0x73, 0xf6, 0xbc, 0x4b, 0xa0, 0x1d, 0xb2, 0x92, 0xf8, 0xa6, 0x43, 0x3b,
	0x21, 0x48, 0xc7, 0x1d, 0x73, 0x73, 0xae, 0x69, 0xb4, 0x16, 0x6d, 0x1a, 0xb0, 0x49, 0x16, 0x50,
	0x75, 0x41, 0x1e, 0x8c, 0x39, 0x7d, 0x41, 0xea, 0x88, 0xcc, 0x46, 0x9d, 0x42, 0x79, 0x84, 0x6a,
	0x09, 0x34, 0x53, 0x53, 0xec, 0x39, 0x59, 0xc5, 0x31, 0x9d, 0x81, 0x04, 0x16, 0x79, 0x82, 0x3b,
	0xc0, 0x59, 0xdf, 0x07, 0xd7, 0x2c, 0x34, 0x8d, 0xd6, 0x82, 0x5d, 0x43, 0xf5, 0x75, 0x2a, 0xbe,
	0xd1, 0x1a, 0x7d, 0x45, 0xd6, 0x02, 0x8f, 0x3b, 0x9a, 0x94, 0x70, 0x2a, 0x41, 0x9d, 0x39, 0x1e,
	0x8f, 0x40, 0x8e, 0x98, 0x6f, 0xce, 0x63, 0xa4, 0x7a, 0xe0, 0x71, 0xdc, 0x89, 0xad, 0xf5, 0xe3,
	0x54, 0xa6, 0x5b, 0x84, 0x02, 0x1f, 0xc8, 0x38, 0xfc, 0xa7, 0x5d, 0x11, 0xdb, 0x55, 0x67, 0x4a,
	0xd6, 0x6b, 0x93, 0x54, 0xcf, 0x21, 0x76, 0xa4, 0x88, 0xf4, 0x7c, 0x2e, 0x8b, 0x95, 0x59, 0xc2,
	0x48, 0x4b, 0xe7, 0x10, 0xdb, 0x69, 0xfd, 0x80, 0xc5, 0x8a, 0xee, 0x66, 0x73, 0xf9, 0x9e, 0xcb,
	0x22, 0x21, 0x95, 0x73, 0x2a, 0xa4, 0x93, 0xe0, 0x43, 0xe0, 0xe6, 0x02, 0x42, 0xab, 0x38, 0x57,
	0x66, 0x38, 0x14, 0xf2, 0x2d, 0xc4, 0x47, 0xc0, 0xa9, 0x45, 0x96, 0xd3, 0xe6, 0xe0, 0xce, 0x36,
	0x6f, 0x96, 0x9b, 0xf9, 0x56, 0xd9, 0xa6, 0x53, 0x69, 0xba, 0x77, 0xfa, 0x84, 0x54, 0x67, 0x80,
	0x1a, 0x9c, 0x41, 0xc0, 0x94, 0x49, 0xd0, 0xfe, 0x60, 0x2a, 0xf4, 0x74, 0x9d, 0x6e, 0x93, 0x9a,
	0xf2, 0xf8, 0xd0, 0x07, 0x87, 0x0b, 0x17, 0x9c, 0x53, 0xe6, 0xfb, 0x7d, 0x36, 0x38, 0x37, 0x2b,
	0x18, 0x9b, 0x6a, 0xed, 0x44, 0xb8, 0x70, 0x98, 0x2a, 0xbb, 0xf5, 0x2f, 0x57, 0xeb, 0xb9, 0x3f,
	0x57, 0xeb, 0xc6, 0xa7, 0xdf, 0xdf, 0x36, 0x49, 0xf2, 0x25, 0xea, 0x8f, 0x65, 0x23, 0x26, 0xe4,
	0xb8, 0x7b, 0xd8, 0x4b, 0x4e, 0xed, 0x42, 0xd1, 0x3a, 0x29, 0x85, 0x00, 0xd2, 0xf1, 0x5c, 0x3c,
	0xa5, 0xb2, 0x5d, 0x4c, 0x5e, 0x8f, 0x5d, 0xfa, 0x90, 0x94, 0x51, 0xe0, 0x2c, 0x00, 0xbc, 0x9b,
	0xb2, 0xbd, 0x90, 0x14, 0x4e, 0x58, 0x00, 0x53, 0x31, 0x8a, 0x43, 0xc0, 0xfb, 0x48, 0xc5, 0x77,
	0x71, 0x08, 0xd4, 0x24, 0xa5, 0x11, 0xc8, 0xe4, 0x4a, 0xf0, 0x08, 0xca, 0x76, 0xf6, 0xba, 0xbf,
	0x77, 0x7d, 0xdb, 0x30, 0x6e, 0x6e, 0x1b, 0xc6, 0xaf, 0xdb, 0x86, 0xf1, 0xf9, 0xae, 0x91, 0xbb,
	0xb9, 0x6b, 0xe4, 0x7e, 0xdc, 0x35, 0x72, 0x1f, 0x1f, 0x0d, 0xbd, 0xe8, 0xec, 0xa2, 0xdf, 0x1e,
	0x88, 0xc0, 0x52, 0x82, 0xcb, 0x2d, 0x4f, 0xe0, 0x7f, 0x6b, 0x62, 0x25, 0xa3, 0x27, 0x7d, 0x54,
	0xbf, 0x88, 0x6b, 0x7d, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x68, 0xbb, 0x7a, 0x47, 0x89, 0x04,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRecordSize != that1.MaxRecordSize {
		return false
	}
	if this.MaxProtocolsPerDwn != that1.MaxProtocolsPerDwn {
		return false
	}
	if this.MaxPermissionsPerDwn != that1.MaxPermissionsPerDwn {
		return false
	}
	if this.VaultCreationEnabled != that1.VaultCreationEnabled {
		return false
	}
	if this.MinVaultRefreshInterval != that1.MinVaultRefreshInterval {
		return false
	}
	if this.EncryptionEnabled != that1.EncryptionEnabled {
		return false
	}
	if this.KeyRotationDays != that1.KeyRotationDays {
		return false
	}
	if this.MinValidatorsForKeyGen != that1.MinValidatorsForKeyGen {
		return false
	}
	if len(this.EncryptedProtocols) != len(that1.EncryptedProtocols) {
		return false
	}
	for i := range this.EncryptedProtocols {
		if this.EncryptedProtocols[i] != that1.EncryptedProtocols[i] {
			return false
		}
	}
	if len(this.EncryptedSchemas) != len(that1.EncryptedSchemas) {
		return false
	}
	for i := range this.EncryptedSchemas {
		if this.EncryptedSchemas[i] != that1.EncryptedSchemas[i] {
			return false
		}
	}
	if this.SingleNodeFallback != that1.SingleNodeFallback {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Permissions) > 0 {
		for iNdEx := len(m.Permissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Permissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Protocols) > 0 {
		for iNdEx := len(m.Protocols) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Protocols[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SingleNodeFallback {
		i--
		if m.SingleNodeFallback {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.EncryptedSchemas) > 0 {
		for iNdEx := len(m.EncryptedSchemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EncryptedSchemas[iNdEx])
			copy(dAtA[i:], m.EncryptedSchemas[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.EncryptedSchemas[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.EncryptedProtocols) > 0 {
		for iNdEx := len(m.EncryptedProtocols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EncryptedProtocols[iNdEx])
			copy(dAtA[i:], m.EncryptedProtocols[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.EncryptedProtocols[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.MinValidatorsForKeyGen != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinValidatorsForKeyGen))
		i--
		dAtA[i] = 0x40
	}
	if m.KeyRotationDays != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KeyRotationDays))
		i--
		dAtA[i] = 0x38
	}
	if m.EncryptionEnabled {
		i--
		if m.EncryptionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MinVaultRefreshInterval != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinVaultRefreshInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.VaultCreationEnabled {
		i--
		if m.VaultCreationEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MaxPermissionsPerDwn != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxPermissionsPerDwn))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxProtocolsPerDwn != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxProtocolsPerDwn))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxRecordSize != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxRecordSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IPFSStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPFSStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPFSStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PeerType) > 0 {
		i -= len(m.PeerType)
		copy(dAtA[i:], m.PeerType)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PeerType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PeerName) > 0 {
		i -= len(m.PeerName)
		copy(dAtA[i:], m.PeerName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PeerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Protocols) > 0 {
		for _, e := range m.Protocols {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxRecordSize != 0 {
		n += 1 + sovGenesis(uint64(m.MaxRecordSize))
	}
	if m.MaxProtocolsPerDwn != 0 {
		n += 1 + sovGenesis(uint64(m.MaxProtocolsPerDwn))
	}
	if m.MaxPermissionsPerDwn != 0 {
		n += 1 + sovGenesis(uint64(m.MaxPermissionsPerDwn))
	}
	if m.VaultCreationEnabled {
		n += 2
	}
	if m.MinVaultRefreshInterval != 0 {
		n += 1 + sovGenesis(uint64(m.MinVaultRefreshInterval))
	}
	if m.EncryptionEnabled {
		n += 2
	}
	if m.KeyRotationDays != 0 {
		n += 1 + sovGenesis(uint64(m.KeyRotationDays))
	}
	if m.MinValidatorsForKeyGen != 0 {
		n += 1 + sovGenesis(uint64(m.MinValidatorsForKeyGen))
	}
	if len(m.EncryptedProtocols) > 0 {
		for _, s := range m.EncryptedProtocols {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EncryptedSchemas) > 0 {
		for _, s := range m.EncryptedSchemas {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.SingleNodeFallback {
		n += 2
	}
	return n
}

func (m *IPFSStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PeerName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PeerType)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, DWNRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, DWNProtocol{})
			if err := m.Protocols[len(m.Protocols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, DWNPermission{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, VaultState{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecordSize", wireType)
			}
			m.MaxRecordSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecordSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProtocolsPerDwn", wireType)
			}
			m.MaxProtocolsPerDwn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProtocolsPerDwn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPermissionsPerDwn", wireType)
			}
			m.MaxPermissionsPerDwn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPermissionsPerDwn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCreationEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VaultCreationEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVaultRefreshInterval", wireType)
			}
			m.MinVaultRefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVaultRefreshInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EncryptionEnabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRotationDays", wireType)
			}
			m.KeyRotationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyRotationDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidatorsForKeyGen", wireType)
			}
			m.MinValidatorsForKeyGen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidatorsForKeyGen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedProtocols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedProtocols = append(m.EncryptedProtocols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSchemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSchemas = append(m.EncryptedSchemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleNodeFallback", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SingleNodeFallback = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPFSStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPFSStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPFSStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
