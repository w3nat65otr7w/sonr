syntax = "proto3";

package did.v1;

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/onsonr/hway/x/did/types";

// AssetInfo defines the asset info
message AssetInfo {
    string id = 1;
    string denom = 2;
    string symbol = 3;
    string asset_type = 4;
    string origin_chain = 5;
    string origin_denom = 6;
    int32 decimals = 7;
    string description = 8;
    string image_url = 9;
    string coingecko_id = 10;
    bool is_enabled = 11;
    string ibc_path = 12;
    string ibc_channel = 13;
    string ibc_port = 14;
}

// ChainInfo defines the chain info
message ChainInfo {
    string id = 1;
    string chain_id = 2;
    string name = 3;
    string symbol = 4;
    string bech32_prefix = 5;
    string genesis_time = 6;
    repeated Endpoint grpc_endpoints = 7;
    repeated Endpoint rest_endpoints = 8;
    ExplorerInfo explorer = 9;
    FeeInfo fee_info = 10;
}

// Credential defines a WebAuthn credential
message Credential {
  string id = 1;
  string credential_type = 2;
  bytes credential_id = 3;
  repeated string transport = 4;
  string attestation_type = 5;
  string display_name = 6;
  string controller = 7;
}  

// Document defines a DID document
message Document {
  string id = 1;
  repeated VerificationMethod verification_methods = 2;
  repeated string authentication = 4;
  repeated string assertion_method = 5;
  repeated string capability_delegation = 7;
  repeated string capability_invocation = 8;
}

// Endpoint defines an endpoint
message Endpoint {
    string url = 1;
    bool is_primary = 2;
}

// ExplorerInfo defines the explorer info
message ExplorerInfo {
    string name = 1;
    string url = 2;
}

// FeeInfo defines a fee info
message FeeInfo {
    string base_denom = 1;
    repeated string fee_rates = 2;
    int32 init_gas_limit = 3;
    bool is_simulable = 4;
    double gas_multiply = 5;
}

// Identity defines an associated profile for a did subject
message Identity {
  string id = 1;
  string subject = 2;
  string controller = 3;
  repeated Credential credentials = 4;
  repeated VerificationMethod verification_methods = 5;
}

// PubKey defines a public key for a did
message PubKey {
  string id = 1;
  bytes key = 2;
  string key_type = 3;
  string controller = 4;
}

// VerificationMethod defines a verification method
message VerificationMethod {
  string id = 1;
  string controller = 2;
  
  // The delegation proof or verification method
  string public_key_multibase = 3;

  // Public Key JWKS is a map of the associated public keys
  map<string, string> public_key_jwks = 4;
}


