name: sonr-core

services:
  ipfs:
    container_name: ipfs
    image: ipfs/kubo:release
    ports:
      - "127.0.0.1:5001:5001"
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:4001:4001"
    volumes:
      - ${HOME}/.ipfs:/data/ipfs
    networks:
      - sonr-network

  cluster:
    container_name: cluster
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs
    environment:
      CLUSTER_PEERNAME: cluster
      CLUSTER_SECRET: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_MONITORPINGINTERVAL: 2s
    ports:
      - "127.0.0.1:9094:9094"
      - "127.0.0.1:9095:9095"
    volumes:
      - ${HOME}/.ipfs-cluster:/data/ipfs-cluster
    networks:
      - sonr-network

  caddy:
    container_name: caddy
    image: caddy:2-alpine
    restart: unless-stopped
    depends_on:
      snrd:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    environment:
      CADDY_DOMAIN: ${CADDY_DOMAIN:-localhost}
    networks:
      - sonr-network

  snrd:
    container_name: snrd
    image: onsonr/snrd:latest
    build:
      context: .
      dockerfile: cmd/snrd/Dockerfile
    restart: unless-stopped
    depends_on:
      - ipfs
     command: ["/usr/bin/devnet"]
    environment:
      CHAIN_ID: ${CHAIN_ID:-sonrtest_1-1}
      MONIKER: ${MONIKER:-sonr-dev-node}
      DENOM: ${DENOM:-usnr}
      BLOCK_TIME: ${BLOCK_TIME:-1s}
      CLEAN: ${CLEAN:-true}
      KEYRING: ${KEYRING:-test}
      HOME_DIR: /home/snrd/.snrd
      KEY: acc0
      KEY2: acc1
      KEYALGO: eth_secp256k1
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      TRACE: ${TRACE:-true}
      SKIP_INSTALL: "true"
    ports:
      - "26657:26657"
      - "1317:1317"
      - "9090:9090"
      - "9091:9091"
      - "8545:8545"
      - "8546:8546"
      - "26656:26656"
      - "6060:6060"
    volumes:
      - ${HOME}/.sonr:/root/.sonr
    healthcheck:
      test: ["CMD", "snrd", "status", "--home", "/home/snrd/.snrd"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - sonr-network

networks:
  sonr-network:
    driver: bridge
    name: sonr-network

volumes:
  caddy-config:
  caddy-data:
