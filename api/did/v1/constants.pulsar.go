// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package didv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: did/v1/constants.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssetType defines the type of asset: native, wrapped, staking, pool, or unspecified
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	AssetType_ASSET_TYPE_NATIVE      AssetType = 1
	AssetType_ASSET_TYPE_WRAPPED     AssetType = 2
	AssetType_ASSET_TYPE_STAKING     AssetType = 3
	AssetType_ASSET_TYPE_POOL        AssetType = 4
	AssetType_ASSET_TYPE_IBC         AssetType = 5
	AssetType_ASSET_TYPE_CW20        AssetType = 6
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "ASSET_TYPE_NATIVE",
		2: "ASSET_TYPE_WRAPPED",
		3: "ASSET_TYPE_STAKING",
		4: "ASSET_TYPE_POOL",
		5: "ASSET_TYPE_IBC",
		6: "ASSET_TYPE_CW20",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED": 0,
		"ASSET_TYPE_NATIVE":      1,
		"ASSET_TYPE_WRAPPED":     2,
		"ASSET_TYPE_STAKING":     3,
		"ASSET_TYPE_POOL":        4,
		"ASSET_TYPE_IBC":         5,
		"ASSET_TYPE_CW20":        6,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{0}
}

// DIDNamespace define the different namespaces of DID
type DIDNamespace int32

const (
	DIDNamespace_DID_NAMESPACE_UNSPECIFIED DIDNamespace = 0
	DIDNamespace_DID_NAMESPACE_IPFS        DIDNamespace = 1
	DIDNamespace_DID_NAMESPACE_SONR        DIDNamespace = 2
	DIDNamespace_DID_NAMESPACE_BITCOIN     DIDNamespace = 3
	DIDNamespace_DID_NAMESPACE_ETHEREUM    DIDNamespace = 4
	DIDNamespace_DID_NAMESPACE_IBC         DIDNamespace = 5
	DIDNamespace_DID_NAMESPACE_WEBAUTHN    DIDNamespace = 6
	DIDNamespace_DID_NAMESPACE_DWN         DIDNamespace = 7
	DIDNamespace_DID_NAMESPACE_SERVICE     DIDNamespace = 8
)

// Enum value maps for DIDNamespace.
var (
	DIDNamespace_name = map[int32]string{
		0: "DID_NAMESPACE_UNSPECIFIED",
		1: "DID_NAMESPACE_IPFS",
		2: "DID_NAMESPACE_SONR",
		3: "DID_NAMESPACE_BITCOIN",
		4: "DID_NAMESPACE_ETHEREUM",
		5: "DID_NAMESPACE_IBC",
		6: "DID_NAMESPACE_WEBAUTHN",
		7: "DID_NAMESPACE_DWN",
		8: "DID_NAMESPACE_SERVICE",
	}
	DIDNamespace_value = map[string]int32{
		"DID_NAMESPACE_UNSPECIFIED": 0,
		"DID_NAMESPACE_IPFS":        1,
		"DID_NAMESPACE_SONR":        2,
		"DID_NAMESPACE_BITCOIN":     3,
		"DID_NAMESPACE_ETHEREUM":    4,
		"DID_NAMESPACE_IBC":         5,
		"DID_NAMESPACE_WEBAUTHN":    6,
		"DID_NAMESPACE_DWN":         7,
		"DID_NAMESPACE_SERVICE":     8,
	}
)

func (x DIDNamespace) Enum() *DIDNamespace {
	p := new(DIDNamespace)
	*p = x
	return p
}

func (x DIDNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DIDNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[1].Descriptor()
}

func (DIDNamespace) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[1]
}

func (x DIDNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DIDNamespace.Descriptor instead.
func (DIDNamespace) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{1}
}

// KeyAlgorithm defines the key algorithm
type KeyAlgorithm int32

const (
	KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED KeyAlgorithm = 0
	KeyAlgorithm_KEY_ALGORITHM_ES256       KeyAlgorithm = 1
	KeyAlgorithm_KEY_ALGORITHM_ES384       KeyAlgorithm = 2
	KeyAlgorithm_KEY_ALGORITHM_ES512       KeyAlgorithm = 3
	KeyAlgorithm_KEY_ALGORITHM_EDDSA       KeyAlgorithm = 4
	KeyAlgorithm_KEY_ALGORITHM_ES256K      KeyAlgorithm = 5
	KeyAlgorithm_KEY_ALGORITHM_BLS12377    KeyAlgorithm = 6
	KeyAlgorithm_KEY_ALGORITHM_KECCAK256   KeyAlgorithm = 7
)

// Enum value maps for KeyAlgorithm.
var (
	KeyAlgorithm_name = map[int32]string{
		0: "KEY_ALGORITHM_UNSPECIFIED",
		1: "KEY_ALGORITHM_ES256",
		2: "KEY_ALGORITHM_ES384",
		3: "KEY_ALGORITHM_ES512",
		4: "KEY_ALGORITHM_EDDSA",
		5: "KEY_ALGORITHM_ES256K",
		6: "KEY_ALGORITHM_BLS12377",
		7: "KEY_ALGORITHM_KECCAK256",
	}
	KeyAlgorithm_value = map[string]int32{
		"KEY_ALGORITHM_UNSPECIFIED": 0,
		"KEY_ALGORITHM_ES256":       1,
		"KEY_ALGORITHM_ES384":       2,
		"KEY_ALGORITHM_ES512":       3,
		"KEY_ALGORITHM_EDDSA":       4,
		"KEY_ALGORITHM_ES256K":      5,
		"KEY_ALGORITHM_BLS12377":    6,
		"KEY_ALGORITHM_KECCAK256":   7,
	}
)

func (x KeyAlgorithm) Enum() *KeyAlgorithm {
	p := new(KeyAlgorithm)
	*p = x
	return p
}

func (x KeyAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[2].Descriptor()
}

func (KeyAlgorithm) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[2]
}

func (x KeyAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyAlgorithm.Descriptor instead.
func (KeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{2}
}

// KeyCurve defines the key curve
type KeyCurve int32

const (
	KeyCurve_KEY_CURVE_UNSPECIFIED KeyCurve = 0
	KeyCurve_KEY_CURVE_P256        KeyCurve = 1
	KeyCurve_KEY_CURVE_P384        KeyCurve = 2
	KeyCurve_KEY_CURVE_P521        KeyCurve = 3
	KeyCurve_KEY_CURVE_X25519      KeyCurve = 4
	KeyCurve_KEY_CURVE_X448        KeyCurve = 5
	KeyCurve_KEY_CURVE_ED25519     KeyCurve = 6
	KeyCurve_KEY_CURVE_ED448       KeyCurve = 7
	KeyCurve_KEY_CURVE_SECP256K1   KeyCurve = 8
)

// Enum value maps for KeyCurve.
var (
	KeyCurve_name = map[int32]string{
		0: "KEY_CURVE_UNSPECIFIED",
		1: "KEY_CURVE_P256",
		2: "KEY_CURVE_P384",
		3: "KEY_CURVE_P521",
		4: "KEY_CURVE_X25519",
		5: "KEY_CURVE_X448",
		6: "KEY_CURVE_ED25519",
		7: "KEY_CURVE_ED448",
		8: "KEY_CURVE_SECP256K1",
	}
	KeyCurve_value = map[string]int32{
		"KEY_CURVE_UNSPECIFIED": 0,
		"KEY_CURVE_P256":        1,
		"KEY_CURVE_P384":        2,
		"KEY_CURVE_P521":        3,
		"KEY_CURVE_X25519":      4,
		"KEY_CURVE_X448":        5,
		"KEY_CURVE_ED25519":     6,
		"KEY_CURVE_ED448":       7,
		"KEY_CURVE_SECP256K1":   8,
	}
)

func (x KeyCurve) Enum() *KeyCurve {
	p := new(KeyCurve)
	*p = x
	return p
}

func (x KeyCurve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyCurve) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[3].Descriptor()
}

func (KeyCurve) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[3]
}

func (x KeyCurve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyCurve.Descriptor instead.
func (KeyCurve) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{3}
}

// KeyEncoding defines the key encoding
type KeyEncoding int32

const (
	KeyEncoding_KEY_ENCODING_UNSPECIFIED KeyEncoding = 0
	KeyEncoding_KEY_ENCODING_RAW         KeyEncoding = 1
	KeyEncoding_KEY_ENCODING_HEX         KeyEncoding = 2
	KeyEncoding_KEY_ENCODING_MULTIBASE   KeyEncoding = 3
	KeyEncoding_KEY_ENCODING_JWK         KeyEncoding = 4
)

// Enum value maps for KeyEncoding.
var (
	KeyEncoding_name = map[int32]string{
		0: "KEY_ENCODING_UNSPECIFIED",
		1: "KEY_ENCODING_RAW",
		2: "KEY_ENCODING_HEX",
		3: "KEY_ENCODING_MULTIBASE",
		4: "KEY_ENCODING_JWK",
	}
	KeyEncoding_value = map[string]int32{
		"KEY_ENCODING_UNSPECIFIED": 0,
		"KEY_ENCODING_RAW":         1,
		"KEY_ENCODING_HEX":         2,
		"KEY_ENCODING_MULTIBASE":   3,
		"KEY_ENCODING_JWK":         4,
	}
)

func (x KeyEncoding) Enum() *KeyEncoding {
	p := new(KeyEncoding)
	*p = x
	return p
}

func (x KeyEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[4].Descriptor()
}

func (KeyEncoding) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[4]
}

func (x KeyEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyEncoding.Descriptor instead.
func (KeyEncoding) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{4}
}

// KeyRole defines the kind of key
type KeyRole int32

const (
	KeyRole_KEY_ROLE_UNSPECIFIED KeyRole = 0
	// Blockchain key types
	KeyRole_KEY_ROLE_AUTHENTICATION KeyRole = 1 // Passkeys and FIDO
	KeyRole_KEY_ROLE_ASSERTION      KeyRole = 2 // Zk Identifiers
	KeyRole_KEY_ROLE_DELEGATION     KeyRole = 3 // ETH,BTC,IBC addresses
	KeyRole_KEY_ROLE_INVOCATION     KeyRole = 4 // DWN Controllers
)

// Enum value maps for KeyRole.
var (
	KeyRole_name = map[int32]string{
		0: "KEY_ROLE_UNSPECIFIED",
		1: "KEY_ROLE_AUTHENTICATION",
		2: "KEY_ROLE_ASSERTION",
		3: "KEY_ROLE_DELEGATION",
		4: "KEY_ROLE_INVOCATION",
	}
	KeyRole_value = map[string]int32{
		"KEY_ROLE_UNSPECIFIED":    0,
		"KEY_ROLE_AUTHENTICATION": 1,
		"KEY_ROLE_ASSERTION":      2,
		"KEY_ROLE_DELEGATION":     3,
		"KEY_ROLE_INVOCATION":     4,
	}
)

func (x KeyRole) Enum() *KeyRole {
	p := new(KeyRole)
	*p = x
	return p
}

func (x KeyRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyRole) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[5].Descriptor()
}

func (KeyRole) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[5]
}

func (x KeyRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyRole.Descriptor instead.
func (KeyRole) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{5}
}

// KeyType defines the key type
type KeyType int32

const (
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	KeyType_KEY_TYPE_OCTET       KeyType = 1
	KeyType_KEY_TYPE_ELLIPTIC    KeyType = 2
	KeyType_KEY_TYPE_RSA         KeyType = 3
	KeyType_KEY_TYPE_SYMMETRIC   KeyType = 4
	KeyType_KEY_TYPE_HMAC        KeyType = 5
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "KEY_TYPE_OCTET",
		2: "KEY_TYPE_ELLIPTIC",
		3: "KEY_TYPE_RSA",
		4: "KEY_TYPE_SYMMETRIC",
		5: "KEY_TYPE_HMAC",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED": 0,
		"KEY_TYPE_OCTET":       1,
		"KEY_TYPE_ELLIPTIC":    2,
		"KEY_TYPE_RSA":         3,
		"KEY_TYPE_SYMMETRIC":   4,
		"KEY_TYPE_HMAC":        5,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[6].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[6]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{6}
}

// PermissionScope define the Capabilities Controllers can grant for Services
type PermissionScope int32

const (
	PermissionScope_PERMISSION_SCOPE_UNSPECIFIED            PermissionScope = 0
	PermissionScope_PERMISSION_SCOPE_BASIC_INFO             PermissionScope = 1
	PermissionScope_PERMISSION_SCOPE_RECORDS_READ           PermissionScope = 2
	PermissionScope_PERMISSION_SCOPE_RECORDS_WRITE          PermissionScope = 3
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_READ      PermissionScope = 4
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_WRITE     PermissionScope = 5
	PermissionScope_PERMISSION_SCOPE_WALLETS_READ           PermissionScope = 6
	PermissionScope_PERMISSION_SCOPE_WALLETS_CREATE         PermissionScope = 7
	PermissionScope_PERMISSION_SCOPE_WALLETS_SUBSCRIBE      PermissionScope = 8
	PermissionScope_PERMISSION_SCOPE_WALLETS_UPDATE         PermissionScope = 9
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_VERIFY    PermissionScope = 10
	PermissionScope_PERMISSION_SCOPE_TRANSACTIONS_BROADCAST PermissionScope = 11
	PermissionScope_PERMISSION_SCOPE_ADMIN_USER             PermissionScope = 12
	PermissionScope_PERMISSION_SCOPE_ADMIN_VALIDATOR        PermissionScope = 13
)

// Enum value maps for PermissionScope.
var (
	PermissionScope_name = map[int32]string{
		0:  "PERMISSION_SCOPE_UNSPECIFIED",
		1:  "PERMISSION_SCOPE_BASIC_INFO",
		2:  "PERMISSION_SCOPE_RECORDS_READ",
		3:  "PERMISSION_SCOPE_RECORDS_WRITE",
		4:  "PERMISSION_SCOPE_TRANSACTIONS_READ",
		5:  "PERMISSION_SCOPE_TRANSACTIONS_WRITE",
		6:  "PERMISSION_SCOPE_WALLETS_READ",
		7:  "PERMISSION_SCOPE_WALLETS_CREATE",
		8:  "PERMISSION_SCOPE_WALLETS_SUBSCRIBE",
		9:  "PERMISSION_SCOPE_WALLETS_UPDATE",
		10: "PERMISSION_SCOPE_TRANSACTIONS_VERIFY",
		11: "PERMISSION_SCOPE_TRANSACTIONS_BROADCAST",
		12: "PERMISSION_SCOPE_ADMIN_USER",
		13: "PERMISSION_SCOPE_ADMIN_VALIDATOR",
	}
	PermissionScope_value = map[string]int32{
		"PERMISSION_SCOPE_UNSPECIFIED":            0,
		"PERMISSION_SCOPE_BASIC_INFO":             1,
		"PERMISSION_SCOPE_RECORDS_READ":           2,
		"PERMISSION_SCOPE_RECORDS_WRITE":          3,
		"PERMISSION_SCOPE_TRANSACTIONS_READ":      4,
		"PERMISSION_SCOPE_TRANSACTIONS_WRITE":     5,
		"PERMISSION_SCOPE_WALLETS_READ":           6,
		"PERMISSION_SCOPE_WALLETS_CREATE":         7,
		"PERMISSION_SCOPE_WALLETS_SUBSCRIBE":      8,
		"PERMISSION_SCOPE_WALLETS_UPDATE":         9,
		"PERMISSION_SCOPE_TRANSACTIONS_VERIFY":    10,
		"PERMISSION_SCOPE_TRANSACTIONS_BROADCAST": 11,
		"PERMISSION_SCOPE_ADMIN_USER":             12,
		"PERMISSION_SCOPE_ADMIN_VALIDATOR":        13,
	}
)

func (x PermissionScope) Enum() *PermissionScope {
	p := new(PermissionScope)
	*p = x
	return p
}

func (x PermissionScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionScope) Descriptor() protoreflect.EnumDescriptor {
	return file_did_v1_constants_proto_enumTypes[7].Descriptor()
}

func (PermissionScope) Type() protoreflect.EnumType {
	return &file_did_v1_constants_proto_enumTypes[7]
}

func (x PermissionScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionScope.Descriptor instead.
func (PermissionScope) EnumDescriptor() ([]byte, []int) {
	return file_did_v1_constants_proto_rawDescGZIP(), []int{7}
}

var File_did_v1_constants_proto protoreflect.FileDescriptor

var file_did_v1_constants_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2a, 0xac, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x43, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x57, 0x32, 0x30, 0x10, 0x06, 0x2a,
	0xf9, 0x01, 0x0a, 0x0c, 0x44, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x49, 0x50, 0x46, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x44, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x52, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x45, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x42, 0x43, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57,
	0x45, 0x42, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x57, 0x4e, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x08, 0x2a, 0xe4, 0x01, 0x0a, 0x0c,
	0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x19,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45, 0x53, 0x32,
	0x35, 0x36, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45, 0x53, 0x33, 0x38, 0x34, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45,
	0x53, 0x35, 0x31, 0x32, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45, 0x44, 0x44, 0x53, 0x41, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x45, 0x53, 0x32, 0x35, 0x36, 0x4b, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x42, 0x4c, 0x53, 0x31, 0x32,
	0x33, 0x37, 0x37, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4b, 0x45, 0x43, 0x43, 0x41, 0x4b, 0x32, 0x35, 0x36,
	0x10, 0x07, 0x2a, 0xd0, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45,
	0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x50, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x50, 0x33, 0x38, 0x34,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f,
	0x50, 0x35, 0x32, 0x31, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x58, 0x34, 0x34, 0x38, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x45, 0x44,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x45, 0x44, 0x34, 0x34, 0x38, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13,
	0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35,
	0x36, 0x4b, 0x31, 0x10, 0x08, 0x2a, 0x89, 0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59,
	0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4b,
	0x45, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4a, 0x57, 0x4b, 0x10,
	0x04, 0x2a, 0x8a, 0x01, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x4b, 0x45, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x8b,
	0x01, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x4c, 0x49, 0x50, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x05, 0x2a, 0x9f, 0x04, 0x0a,
	0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x06, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x09,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0d, 0x42, 0x7e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6e, 0x73, 0x6f, 0x6e,
	0x72, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x76,
	0x31, 0x3b, 0x64, 0x69, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x06,
	0x44, 0x69, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x44, 0x69, 0x64, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x12, 0x44, 0x69, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x44, 0x69, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_did_v1_constants_proto_rawDescOnce sync.Once
	file_did_v1_constants_proto_rawDescData = file_did_v1_constants_proto_rawDesc
)

func file_did_v1_constants_proto_rawDescGZIP() []byte {
	file_did_v1_constants_proto_rawDescOnce.Do(func() {
		file_did_v1_constants_proto_rawDescData = protoimpl.X.CompressGZIP(file_did_v1_constants_proto_rawDescData)
	})
	return file_did_v1_constants_proto_rawDescData
}

var file_did_v1_constants_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_did_v1_constants_proto_goTypes = []interface{}{
	(AssetType)(0),       // 0: did.v1.AssetType
	(DIDNamespace)(0),    // 1: did.v1.DIDNamespace
	(KeyAlgorithm)(0),    // 2: did.v1.KeyAlgorithm
	(KeyCurve)(0),        // 3: did.v1.KeyCurve
	(KeyEncoding)(0),     // 4: did.v1.KeyEncoding
	(KeyRole)(0),         // 5: did.v1.KeyRole
	(KeyType)(0),         // 6: did.v1.KeyType
	(PermissionScope)(0), // 7: did.v1.PermissionScope
}
var file_did_v1_constants_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_did_v1_constants_proto_init() }
func file_did_v1_constants_proto_init() {
	if File_did_v1_constants_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_did_v1_constants_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_did_v1_constants_proto_goTypes,
		DependencyIndexes: file_did_v1_constants_proto_depIdxs,
		EnumInfos:         file_did_v1_constants_proto_enumTypes,
	}.Build()
	File_did_v1_constants_proto = out.File
	file_did_v1_constants_proto_rawDesc = nil
	file_did_v1_constants_proto_goTypes = nil
	file_did_v1_constants_proto_depIdxs = nil
}
