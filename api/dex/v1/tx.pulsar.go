// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dexv1

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "cosmossdk.io/api/cosmos/msg/v1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

var _ protoreflect.List = (*_MsgRegisterDEXAccount_3_list)(nil)

type _MsgRegisterDEXAccount_3_list struct {
	list *[]string
}

func (x *_MsgRegisterDEXAccount_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgRegisterDEXAccount_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_MsgRegisterDEXAccount_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MsgRegisterDEXAccount_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgRegisterDEXAccount_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgRegisterDEXAccount at list field Features as it is not of Message kind"))
}

func (x *_MsgRegisterDEXAccount_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgRegisterDEXAccount_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_MsgRegisterDEXAccount_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgRegisterDEXAccount               protoreflect.MessageDescriptor
	fd_MsgRegisterDEXAccount_did           protoreflect.FieldDescriptor
	fd_MsgRegisterDEXAccount_connection_id protoreflect.FieldDescriptor
	fd_MsgRegisterDEXAccount_features      protoreflect.FieldDescriptor
	fd_MsgRegisterDEXAccount_metadata      protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgRegisterDEXAccount = File_dex_v1_tx_proto.Messages().ByName("MsgRegisterDEXAccount")
	fd_MsgRegisterDEXAccount_did = md_MsgRegisterDEXAccount.Fields().ByName("did")
	fd_MsgRegisterDEXAccount_connection_id = md_MsgRegisterDEXAccount.Fields().ByName("connection_id")
	fd_MsgRegisterDEXAccount_features = md_MsgRegisterDEXAccount.Fields().ByName("features")
	fd_MsgRegisterDEXAccount_metadata = md_MsgRegisterDEXAccount.Fields().ByName("metadata")
}

var _ protoreflect.Message = (*fastReflection_MsgRegisterDEXAccount)(nil)

type fastReflection_MsgRegisterDEXAccount MsgRegisterDEXAccount

func (x *MsgRegisterDEXAccount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRegisterDEXAccount)(x)
}

func (x *MsgRegisterDEXAccount) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRegisterDEXAccount_messageType fastReflection_MsgRegisterDEXAccount_messageType
var _ protoreflect.MessageType = fastReflection_MsgRegisterDEXAccount_messageType{}

type fastReflection_MsgRegisterDEXAccount_messageType struct{}

func (x fastReflection_MsgRegisterDEXAccount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRegisterDEXAccount)(nil)
}
func (x fastReflection_MsgRegisterDEXAccount_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRegisterDEXAccount)
}
func (x fastReflection_MsgRegisterDEXAccount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRegisterDEXAccount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRegisterDEXAccount) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRegisterDEXAccount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRegisterDEXAccount) Type() protoreflect.MessageType {
	return _fastReflection_MsgRegisterDEXAccount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRegisterDEXAccount) New() protoreflect.Message {
	return new(fastReflection_MsgRegisterDEXAccount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRegisterDEXAccount) Interface() protoreflect.ProtoMessage {
	return (*MsgRegisterDEXAccount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRegisterDEXAccount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_MsgRegisterDEXAccount_did, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_MsgRegisterDEXAccount_connection_id, value) {
			return
		}
	}
	if len(x.Features) != 0 {
		value := protoreflect.ValueOfList(&_MsgRegisterDEXAccount_3_list{list: &x.Features})
		if !f(fd_MsgRegisterDEXAccount_features, value) {
			return
		}
	}
	if x.Metadata != "" {
		value := protoreflect.ValueOfString(x.Metadata)
		if !f(fd_MsgRegisterDEXAccount_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRegisterDEXAccount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccount.did":
		return x.Did != ""
	case "dex.v1.MsgRegisterDEXAccount.connection_id":
		return x.ConnectionId != ""
	case "dex.v1.MsgRegisterDEXAccount.features":
		return len(x.Features) != 0
	case "dex.v1.MsgRegisterDEXAccount.metadata":
		return x.Metadata != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccount"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccount.did":
		x.Did = ""
	case "dex.v1.MsgRegisterDEXAccount.connection_id":
		x.ConnectionId = ""
	case "dex.v1.MsgRegisterDEXAccount.features":
		x.Features = nil
	case "dex.v1.MsgRegisterDEXAccount.metadata":
		x.Metadata = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccount"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRegisterDEXAccount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgRegisterDEXAccount.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRegisterDEXAccount.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRegisterDEXAccount.features":
		if len(x.Features) == 0 {
			return protoreflect.ValueOfList(&_MsgRegisterDEXAccount_3_list{})
		}
		listValue := &_MsgRegisterDEXAccount_3_list{list: &x.Features}
		return protoreflect.ValueOfList(listValue)
	case "dex.v1.MsgRegisterDEXAccount.metadata":
		value := x.Metadata
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccount"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccount.did":
		x.Did = value.Interface().(string)
	case "dex.v1.MsgRegisterDEXAccount.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "dex.v1.MsgRegisterDEXAccount.features":
		lv := value.List()
		clv := lv.(*_MsgRegisterDEXAccount_3_list)
		x.Features = *clv.list
	case "dex.v1.MsgRegisterDEXAccount.metadata":
		x.Metadata = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccount"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccount.features":
		if x.Features == nil {
			x.Features = []string{}
		}
		value := &_MsgRegisterDEXAccount_3_list{list: &x.Features}
		return protoreflect.ValueOfList(value)
	case "dex.v1.MsgRegisterDEXAccount.did":
		panic(fmt.Errorf("field did of message dex.v1.MsgRegisterDEXAccount is not mutable"))
	case "dex.v1.MsgRegisterDEXAccount.connection_id":
		panic(fmt.Errorf("field connection_id of message dex.v1.MsgRegisterDEXAccount is not mutable"))
	case "dex.v1.MsgRegisterDEXAccount.metadata":
		panic(fmt.Errorf("field metadata of message dex.v1.MsgRegisterDEXAccount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccount"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRegisterDEXAccount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccount.did":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRegisterDEXAccount.connection_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRegisterDEXAccount.features":
		list := []string{}
		return protoreflect.ValueOfList(&_MsgRegisterDEXAccount_3_list{list: &list})
	case "dex.v1.MsgRegisterDEXAccount.metadata":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccount"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRegisterDEXAccount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgRegisterDEXAccount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRegisterDEXAccount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRegisterDEXAccount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRegisterDEXAccount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRegisterDEXAccount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Features) > 0 {
			for _, s := range x.Features {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Metadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRegisterDEXAccount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Metadata) > 0 {
			i -= len(x.Metadata)
			copy(dAtA[i:], x.Metadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Metadata)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Features) > 0 {
			for iNdEx := len(x.Features) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Features[iNdEx])
				copy(dAtA[i:], x.Features[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Features[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRegisterDEXAccount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRegisterDEXAccount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRegisterDEXAccount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Features = append(x.Features, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Metadata = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgRegisterDEXAccountResponse                 protoreflect.MessageDescriptor
	fd_MsgRegisterDEXAccountResponse_port_id         protoreflect.FieldDescriptor
	fd_MsgRegisterDEXAccountResponse_account_address protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgRegisterDEXAccountResponse = File_dex_v1_tx_proto.Messages().ByName("MsgRegisterDEXAccountResponse")
	fd_MsgRegisterDEXAccountResponse_port_id = md_MsgRegisterDEXAccountResponse.Fields().ByName("port_id")
	fd_MsgRegisterDEXAccountResponse_account_address = md_MsgRegisterDEXAccountResponse.Fields().ByName("account_address")
}

var _ protoreflect.Message = (*fastReflection_MsgRegisterDEXAccountResponse)(nil)

type fastReflection_MsgRegisterDEXAccountResponse MsgRegisterDEXAccountResponse

func (x *MsgRegisterDEXAccountResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRegisterDEXAccountResponse)(x)
}

func (x *MsgRegisterDEXAccountResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRegisterDEXAccountResponse_messageType fastReflection_MsgRegisterDEXAccountResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgRegisterDEXAccountResponse_messageType{}

type fastReflection_MsgRegisterDEXAccountResponse_messageType struct{}

func (x fastReflection_MsgRegisterDEXAccountResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRegisterDEXAccountResponse)(nil)
}
func (x fastReflection_MsgRegisterDEXAccountResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRegisterDEXAccountResponse)
}
func (x fastReflection_MsgRegisterDEXAccountResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRegisterDEXAccountResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRegisterDEXAccountResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgRegisterDEXAccountResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRegisterDEXAccountResponse) New() protoreflect.Message {
	return new(fastReflection_MsgRegisterDEXAccountResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgRegisterDEXAccountResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_MsgRegisterDEXAccountResponse_port_id, value) {
			return
		}
	}
	if x.AccountAddress != "" {
		value := protoreflect.ValueOfString(x.AccountAddress)
		if !f(fd_MsgRegisterDEXAccountResponse_account_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccountResponse.port_id":
		return x.PortId != ""
	case "dex.v1.MsgRegisterDEXAccountResponse.account_address":
		return x.AccountAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccountResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccountResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccountResponse.port_id":
		x.PortId = ""
	case "dex.v1.MsgRegisterDEXAccountResponse.account_address":
		x.AccountAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccountResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccountResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgRegisterDEXAccountResponse.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRegisterDEXAccountResponse.account_address":
		value := x.AccountAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccountResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccountResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccountResponse.port_id":
		x.PortId = value.Interface().(string)
	case "dex.v1.MsgRegisterDEXAccountResponse.account_address":
		x.AccountAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccountResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccountResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccountResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccountResponse.port_id":
		panic(fmt.Errorf("field port_id of message dex.v1.MsgRegisterDEXAccountResponse is not mutable"))
	case "dex.v1.MsgRegisterDEXAccountResponse.account_address":
		panic(fmt.Errorf("field account_address of message dex.v1.MsgRegisterDEXAccountResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccountResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccountResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRegisterDEXAccountResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRegisterDEXAccountResponse.port_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRegisterDEXAccountResponse.account_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRegisterDEXAccountResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRegisterDEXAccountResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRegisterDEXAccountResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgRegisterDEXAccountResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRegisterDEXAccountResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRegisterDEXAccountResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRegisterDEXAccountResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRegisterDEXAccountResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRegisterDEXAccountResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AccountAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRegisterDEXAccountResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AccountAddress) > 0 {
			i -= len(x.AccountAddress)
			copy(dAtA[i:], x.AccountAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AccountAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRegisterDEXAccountResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRegisterDEXAccountResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRegisterDEXAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccountAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgExecuteSwap                protoreflect.MessageDescriptor
	fd_MsgExecuteSwap_did            protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_connection_id  protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_source_denom   protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_target_denom   protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_amount         protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_min_amount_out protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_route          protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_ucan_token     protoreflect.FieldDescriptor
	fd_MsgExecuteSwap_timeout        protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgExecuteSwap = File_dex_v1_tx_proto.Messages().ByName("MsgExecuteSwap")
	fd_MsgExecuteSwap_did = md_MsgExecuteSwap.Fields().ByName("did")
	fd_MsgExecuteSwap_connection_id = md_MsgExecuteSwap.Fields().ByName("connection_id")
	fd_MsgExecuteSwap_source_denom = md_MsgExecuteSwap.Fields().ByName("source_denom")
	fd_MsgExecuteSwap_target_denom = md_MsgExecuteSwap.Fields().ByName("target_denom")
	fd_MsgExecuteSwap_amount = md_MsgExecuteSwap.Fields().ByName("amount")
	fd_MsgExecuteSwap_min_amount_out = md_MsgExecuteSwap.Fields().ByName("min_amount_out")
	fd_MsgExecuteSwap_route = md_MsgExecuteSwap.Fields().ByName("route")
	fd_MsgExecuteSwap_ucan_token = md_MsgExecuteSwap.Fields().ByName("ucan_token")
	fd_MsgExecuteSwap_timeout = md_MsgExecuteSwap.Fields().ByName("timeout")
}

var _ protoreflect.Message = (*fastReflection_MsgExecuteSwap)(nil)

type fastReflection_MsgExecuteSwap MsgExecuteSwap

func (x *MsgExecuteSwap) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgExecuteSwap)(x)
}

func (x *MsgExecuteSwap) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgExecuteSwap_messageType fastReflection_MsgExecuteSwap_messageType
var _ protoreflect.MessageType = fastReflection_MsgExecuteSwap_messageType{}

type fastReflection_MsgExecuteSwap_messageType struct{}

func (x fastReflection_MsgExecuteSwap_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgExecuteSwap)(nil)
}
func (x fastReflection_MsgExecuteSwap_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteSwap)
}
func (x fastReflection_MsgExecuteSwap_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteSwap
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgExecuteSwap) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteSwap
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgExecuteSwap) Type() protoreflect.MessageType {
	return _fastReflection_MsgExecuteSwap_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgExecuteSwap) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteSwap)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgExecuteSwap) Interface() protoreflect.ProtoMessage {
	return (*MsgExecuteSwap)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgExecuteSwap) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_MsgExecuteSwap_did, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_MsgExecuteSwap_connection_id, value) {
			return
		}
	}
	if x.SourceDenom != "" {
		value := protoreflect.ValueOfString(x.SourceDenom)
		if !f(fd_MsgExecuteSwap_source_denom, value) {
			return
		}
	}
	if x.TargetDenom != "" {
		value := protoreflect.ValueOfString(x.TargetDenom)
		if !f(fd_MsgExecuteSwap_target_denom, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_MsgExecuteSwap_amount, value) {
			return
		}
	}
	if x.MinAmountOut != "" {
		value := protoreflect.ValueOfString(x.MinAmountOut)
		if !f(fd_MsgExecuteSwap_min_amount_out, value) {
			return
		}
	}
	if x.Route != "" {
		value := protoreflect.ValueOfString(x.Route)
		if !f(fd_MsgExecuteSwap_route, value) {
			return
		}
	}
	if x.UcanToken != "" {
		value := protoreflect.ValueOfString(x.UcanToken)
		if !f(fd_MsgExecuteSwap_ucan_token, value) {
			return
		}
	}
	if x.Timeout != nil {
		value := protoreflect.ValueOfMessage(x.Timeout.ProtoReflect())
		if !f(fd_MsgExecuteSwap_timeout, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgExecuteSwap) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwap.did":
		return x.Did != ""
	case "dex.v1.MsgExecuteSwap.connection_id":
		return x.ConnectionId != ""
	case "dex.v1.MsgExecuteSwap.source_denom":
		return x.SourceDenom != ""
	case "dex.v1.MsgExecuteSwap.target_denom":
		return x.TargetDenom != ""
	case "dex.v1.MsgExecuteSwap.amount":
		return x.Amount != ""
	case "dex.v1.MsgExecuteSwap.min_amount_out":
		return x.MinAmountOut != ""
	case "dex.v1.MsgExecuteSwap.route":
		return x.Route != ""
	case "dex.v1.MsgExecuteSwap.ucan_token":
		return x.UcanToken != ""
	case "dex.v1.MsgExecuteSwap.timeout":
		return x.Timeout != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwap"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwap does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwap) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwap.did":
		x.Did = ""
	case "dex.v1.MsgExecuteSwap.connection_id":
		x.ConnectionId = ""
	case "dex.v1.MsgExecuteSwap.source_denom":
		x.SourceDenom = ""
	case "dex.v1.MsgExecuteSwap.target_denom":
		x.TargetDenom = ""
	case "dex.v1.MsgExecuteSwap.amount":
		x.Amount = ""
	case "dex.v1.MsgExecuteSwap.min_amount_out":
		x.MinAmountOut = ""
	case "dex.v1.MsgExecuteSwap.route":
		x.Route = ""
	case "dex.v1.MsgExecuteSwap.ucan_token":
		x.UcanToken = ""
	case "dex.v1.MsgExecuteSwap.timeout":
		x.Timeout = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwap"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwap does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgExecuteSwap) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgExecuteSwap.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.source_denom":
		value := x.SourceDenom
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.target_denom":
		value := x.TargetDenom
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.min_amount_out":
		value := x.MinAmountOut
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.route":
		value := x.Route
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.ucan_token":
		value := x.UcanToken
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwap.timeout":
		value := x.Timeout
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwap"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwap does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwap) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwap.did":
		x.Did = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.source_denom":
		x.SourceDenom = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.target_denom":
		x.TargetDenom = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.amount":
		x.Amount = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.min_amount_out":
		x.MinAmountOut = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.route":
		x.Route = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.ucan_token":
		x.UcanToken = value.Interface().(string)
	case "dex.v1.MsgExecuteSwap.timeout":
		x.Timeout = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwap"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwap does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwap) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwap.timeout":
		if x.Timeout == nil {
			x.Timeout = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timeout.ProtoReflect())
	case "dex.v1.MsgExecuteSwap.did":
		panic(fmt.Errorf("field did of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.connection_id":
		panic(fmt.Errorf("field connection_id of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.source_denom":
		panic(fmt.Errorf("field source_denom of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.target_denom":
		panic(fmt.Errorf("field target_denom of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.amount":
		panic(fmt.Errorf("field amount of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.min_amount_out":
		panic(fmt.Errorf("field min_amount_out of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.route":
		panic(fmt.Errorf("field route of message dex.v1.MsgExecuteSwap is not mutable"))
	case "dex.v1.MsgExecuteSwap.ucan_token":
		panic(fmt.Errorf("field ucan_token of message dex.v1.MsgExecuteSwap is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwap"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwap does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgExecuteSwap) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwap.did":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.connection_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.source_denom":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.target_denom":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.amount":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.min_amount_out":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.route":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.ucan_token":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwap.timeout":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwap"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwap does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgExecuteSwap) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgExecuteSwap", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgExecuteSwap) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwap) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgExecuteSwap) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgExecuteSwap) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgExecuteSwap)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinAmountOut)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Route)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UcanToken)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timeout != nil {
			l = options.Size(x.Timeout)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteSwap)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timeout != nil {
			encoded, err := options.Marshal(x.Timeout)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.UcanToken) > 0 {
			i -= len(x.UcanToken)
			copy(dAtA[i:], x.UcanToken)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UcanToken)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Route) > 0 {
			i -= len(x.Route)
			copy(dAtA[i:], x.Route)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Route)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.MinAmountOut) > 0 {
			i -= len(x.MinAmountOut)
			copy(dAtA[i:], x.MinAmountOut)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinAmountOut)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TargetDenom) > 0 {
			i -= len(x.TargetDenom)
			copy(dAtA[i:], x.TargetDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetDenom)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.SourceDenom) > 0 {
			i -= len(x.SourceDenom)
			copy(dAtA[i:], x.SourceDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteSwap)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteSwap: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteSwap: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinAmountOut", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinAmountOut = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Route = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanToken", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UcanToken = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timeout == nil {
					x.Timeout = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timeout); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgExecuteSwapResponse                 protoreflect.MessageDescriptor
	fd_MsgExecuteSwapResponse_tx_hash         protoreflect.FieldDescriptor
	fd_MsgExecuteSwapResponse_amount_received protoreflect.FieldDescriptor
	fd_MsgExecuteSwapResponse_sequence        protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgExecuteSwapResponse = File_dex_v1_tx_proto.Messages().ByName("MsgExecuteSwapResponse")
	fd_MsgExecuteSwapResponse_tx_hash = md_MsgExecuteSwapResponse.Fields().ByName("tx_hash")
	fd_MsgExecuteSwapResponse_amount_received = md_MsgExecuteSwapResponse.Fields().ByName("amount_received")
	fd_MsgExecuteSwapResponse_sequence = md_MsgExecuteSwapResponse.Fields().ByName("sequence")
}

var _ protoreflect.Message = (*fastReflection_MsgExecuteSwapResponse)(nil)

type fastReflection_MsgExecuteSwapResponse MsgExecuteSwapResponse

func (x *MsgExecuteSwapResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgExecuteSwapResponse)(x)
}

func (x *MsgExecuteSwapResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgExecuteSwapResponse_messageType fastReflection_MsgExecuteSwapResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgExecuteSwapResponse_messageType{}

type fastReflection_MsgExecuteSwapResponse_messageType struct{}

func (x fastReflection_MsgExecuteSwapResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgExecuteSwapResponse)(nil)
}
func (x fastReflection_MsgExecuteSwapResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteSwapResponse)
}
func (x fastReflection_MsgExecuteSwapResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteSwapResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgExecuteSwapResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteSwapResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgExecuteSwapResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgExecuteSwapResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgExecuteSwapResponse) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteSwapResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgExecuteSwapResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgExecuteSwapResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgExecuteSwapResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_MsgExecuteSwapResponse_tx_hash, value) {
			return
		}
	}
	if x.AmountReceived != "" {
		value := protoreflect.ValueOfString(x.AmountReceived)
		if !f(fd_MsgExecuteSwapResponse_amount_received, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_MsgExecuteSwapResponse_sequence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgExecuteSwapResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwapResponse.tx_hash":
		return x.TxHash != ""
	case "dex.v1.MsgExecuteSwapResponse.amount_received":
		return x.AmountReceived != ""
	case "dex.v1.MsgExecuteSwapResponse.sequence":
		return x.Sequence != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwapResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwapResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwapResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwapResponse.tx_hash":
		x.TxHash = ""
	case "dex.v1.MsgExecuteSwapResponse.amount_received":
		x.AmountReceived = ""
	case "dex.v1.MsgExecuteSwapResponse.sequence":
		x.Sequence = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwapResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwapResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgExecuteSwapResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgExecuteSwapResponse.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwapResponse.amount_received":
		value := x.AmountReceived
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgExecuteSwapResponse.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwapResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwapResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwapResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwapResponse.tx_hash":
		x.TxHash = value.Interface().(string)
	case "dex.v1.MsgExecuteSwapResponse.amount_received":
		x.AmountReceived = value.Interface().(string)
	case "dex.v1.MsgExecuteSwapResponse.sequence":
		x.Sequence = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwapResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwapResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwapResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwapResponse.tx_hash":
		panic(fmt.Errorf("field tx_hash of message dex.v1.MsgExecuteSwapResponse is not mutable"))
	case "dex.v1.MsgExecuteSwapResponse.amount_received":
		panic(fmt.Errorf("field amount_received of message dex.v1.MsgExecuteSwapResponse is not mutable"))
	case "dex.v1.MsgExecuteSwapResponse.sequence":
		panic(fmt.Errorf("field sequence of message dex.v1.MsgExecuteSwapResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwapResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwapResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgExecuteSwapResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgExecuteSwapResponse.tx_hash":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwapResponse.amount_received":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgExecuteSwapResponse.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgExecuteSwapResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgExecuteSwapResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgExecuteSwapResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgExecuteSwapResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgExecuteSwapResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteSwapResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgExecuteSwapResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgExecuteSwapResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgExecuteSwapResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AmountReceived)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteSwapResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x18
		}
		if len(x.AmountReceived) > 0 {
			i -= len(x.AmountReceived)
			copy(dAtA[i:], x.AmountReceived)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountReceived)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteSwapResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteSwapResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountReceived", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountReceived = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgProvideLiquidity_4_list)(nil)

type _MsgProvideLiquidity_4_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgProvideLiquidity_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgProvideLiquidity_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgProvideLiquidity_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgProvideLiquidity_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgProvideLiquidity_4_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgProvideLiquidity_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgProvideLiquidity_4_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgProvideLiquidity_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgProvideLiquidity               protoreflect.MessageDescriptor
	fd_MsgProvideLiquidity_did           protoreflect.FieldDescriptor
	fd_MsgProvideLiquidity_connection_id protoreflect.FieldDescriptor
	fd_MsgProvideLiquidity_pool_id       protoreflect.FieldDescriptor
	fd_MsgProvideLiquidity_assets        protoreflect.FieldDescriptor
	fd_MsgProvideLiquidity_min_shares    protoreflect.FieldDescriptor
	fd_MsgProvideLiquidity_ucan_token    protoreflect.FieldDescriptor
	fd_MsgProvideLiquidity_timeout       protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgProvideLiquidity = File_dex_v1_tx_proto.Messages().ByName("MsgProvideLiquidity")
	fd_MsgProvideLiquidity_did = md_MsgProvideLiquidity.Fields().ByName("did")
	fd_MsgProvideLiquidity_connection_id = md_MsgProvideLiquidity.Fields().ByName("connection_id")
	fd_MsgProvideLiquidity_pool_id = md_MsgProvideLiquidity.Fields().ByName("pool_id")
	fd_MsgProvideLiquidity_assets = md_MsgProvideLiquidity.Fields().ByName("assets")
	fd_MsgProvideLiquidity_min_shares = md_MsgProvideLiquidity.Fields().ByName("min_shares")
	fd_MsgProvideLiquidity_ucan_token = md_MsgProvideLiquidity.Fields().ByName("ucan_token")
	fd_MsgProvideLiquidity_timeout = md_MsgProvideLiquidity.Fields().ByName("timeout")
}

var _ protoreflect.Message = (*fastReflection_MsgProvideLiquidity)(nil)

type fastReflection_MsgProvideLiquidity MsgProvideLiquidity

func (x *MsgProvideLiquidity) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgProvideLiquidity)(x)
}

func (x *MsgProvideLiquidity) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgProvideLiquidity_messageType fastReflection_MsgProvideLiquidity_messageType
var _ protoreflect.MessageType = fastReflection_MsgProvideLiquidity_messageType{}

type fastReflection_MsgProvideLiquidity_messageType struct{}

func (x fastReflection_MsgProvideLiquidity_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgProvideLiquidity)(nil)
}
func (x fastReflection_MsgProvideLiquidity_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgProvideLiquidity)
}
func (x fastReflection_MsgProvideLiquidity_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgProvideLiquidity
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgProvideLiquidity) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgProvideLiquidity
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgProvideLiquidity) Type() protoreflect.MessageType {
	return _fastReflection_MsgProvideLiquidity_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgProvideLiquidity) New() protoreflect.Message {
	return new(fastReflection_MsgProvideLiquidity)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgProvideLiquidity) Interface() protoreflect.ProtoMessage {
	return (*MsgProvideLiquidity)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgProvideLiquidity) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_MsgProvideLiquidity_did, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_MsgProvideLiquidity_connection_id, value) {
			return
		}
	}
	if x.PoolId != "" {
		value := protoreflect.ValueOfString(x.PoolId)
		if !f(fd_MsgProvideLiquidity_pool_id, value) {
			return
		}
	}
	if len(x.Assets) != 0 {
		value := protoreflect.ValueOfList(&_MsgProvideLiquidity_4_list{list: &x.Assets})
		if !f(fd_MsgProvideLiquidity_assets, value) {
			return
		}
	}
	if x.MinShares != "" {
		value := protoreflect.ValueOfString(x.MinShares)
		if !f(fd_MsgProvideLiquidity_min_shares, value) {
			return
		}
	}
	if x.UcanToken != "" {
		value := protoreflect.ValueOfString(x.UcanToken)
		if !f(fd_MsgProvideLiquidity_ucan_token, value) {
			return
		}
	}
	if x.Timeout != nil {
		value := protoreflect.ValueOfMessage(x.Timeout.ProtoReflect())
		if !f(fd_MsgProvideLiquidity_timeout, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgProvideLiquidity) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidity.did":
		return x.Did != ""
	case "dex.v1.MsgProvideLiquidity.connection_id":
		return x.ConnectionId != ""
	case "dex.v1.MsgProvideLiquidity.pool_id":
		return x.PoolId != ""
	case "dex.v1.MsgProvideLiquidity.assets":
		return len(x.Assets) != 0
	case "dex.v1.MsgProvideLiquidity.min_shares":
		return x.MinShares != ""
	case "dex.v1.MsgProvideLiquidity.ucan_token":
		return x.UcanToken != ""
	case "dex.v1.MsgProvideLiquidity.timeout":
		return x.Timeout != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidity does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidity) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidity.did":
		x.Did = ""
	case "dex.v1.MsgProvideLiquidity.connection_id":
		x.ConnectionId = ""
	case "dex.v1.MsgProvideLiquidity.pool_id":
		x.PoolId = ""
	case "dex.v1.MsgProvideLiquidity.assets":
		x.Assets = nil
	case "dex.v1.MsgProvideLiquidity.min_shares":
		x.MinShares = ""
	case "dex.v1.MsgProvideLiquidity.ucan_token":
		x.UcanToken = ""
	case "dex.v1.MsgProvideLiquidity.timeout":
		x.Timeout = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidity does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgProvideLiquidity) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgProvideLiquidity.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidity.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidity.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidity.assets":
		if len(x.Assets) == 0 {
			return protoreflect.ValueOfList(&_MsgProvideLiquidity_4_list{})
		}
		listValue := &_MsgProvideLiquidity_4_list{list: &x.Assets}
		return protoreflect.ValueOfList(listValue)
	case "dex.v1.MsgProvideLiquidity.min_shares":
		value := x.MinShares
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidity.ucan_token":
		value := x.UcanToken
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidity.timeout":
		value := x.Timeout
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidity does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidity) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidity.did":
		x.Did = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidity.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidity.pool_id":
		x.PoolId = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidity.assets":
		lv := value.List()
		clv := lv.(*_MsgProvideLiquidity_4_list)
		x.Assets = *clv.list
	case "dex.v1.MsgProvideLiquidity.min_shares":
		x.MinShares = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidity.ucan_token":
		x.UcanToken = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidity.timeout":
		x.Timeout = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidity does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidity) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidity.assets":
		if x.Assets == nil {
			x.Assets = []*v1beta1.Coin{}
		}
		value := &_MsgProvideLiquidity_4_list{list: &x.Assets}
		return protoreflect.ValueOfList(value)
	case "dex.v1.MsgProvideLiquidity.timeout":
		if x.Timeout == nil {
			x.Timeout = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timeout.ProtoReflect())
	case "dex.v1.MsgProvideLiquidity.did":
		panic(fmt.Errorf("field did of message dex.v1.MsgProvideLiquidity is not mutable"))
	case "dex.v1.MsgProvideLiquidity.connection_id":
		panic(fmt.Errorf("field connection_id of message dex.v1.MsgProvideLiquidity is not mutable"))
	case "dex.v1.MsgProvideLiquidity.pool_id":
		panic(fmt.Errorf("field pool_id of message dex.v1.MsgProvideLiquidity is not mutable"))
	case "dex.v1.MsgProvideLiquidity.min_shares":
		panic(fmt.Errorf("field min_shares of message dex.v1.MsgProvideLiquidity is not mutable"))
	case "dex.v1.MsgProvideLiquidity.ucan_token":
		panic(fmt.Errorf("field ucan_token of message dex.v1.MsgProvideLiquidity is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidity does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgProvideLiquidity) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidity.did":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidity.connection_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidity.pool_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidity.assets":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgProvideLiquidity_4_list{list: &list})
	case "dex.v1.MsgProvideLiquidity.min_shares":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidity.ucan_token":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidity.timeout":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidity does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgProvideLiquidity) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgProvideLiquidity", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgProvideLiquidity) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidity) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgProvideLiquidity) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgProvideLiquidity) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgProvideLiquidity)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PoolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Assets) > 0 {
			for _, e := range x.Assets {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.MinShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UcanToken)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timeout != nil {
			l = options.Size(x.Timeout)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgProvideLiquidity)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timeout != nil {
			encoded, err := options.Marshal(x.Timeout)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.UcanToken) > 0 {
			i -= len(x.UcanToken)
			copy(dAtA[i:], x.UcanToken)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UcanToken)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.MinShares) > 0 {
			i -= len(x.MinShares)
			copy(dAtA[i:], x.MinShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinShares)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Assets) > 0 {
			for iNdEx := len(x.Assets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Assets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.PoolId) > 0 {
			i -= len(x.PoolId)
			copy(dAtA[i:], x.PoolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgProvideLiquidity)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgProvideLiquidity: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgProvideLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Assets = append(x.Assets, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Assets[len(x.Assets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanToken", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UcanToken = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timeout == nil {
					x.Timeout = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timeout); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgProvideLiquidityResponse                 protoreflect.MessageDescriptor
	fd_MsgProvideLiquidityResponse_tx_hash         protoreflect.FieldDescriptor
	fd_MsgProvideLiquidityResponse_shares_received protoreflect.FieldDescriptor
	fd_MsgProvideLiquidityResponse_sequence        protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgProvideLiquidityResponse = File_dex_v1_tx_proto.Messages().ByName("MsgProvideLiquidityResponse")
	fd_MsgProvideLiquidityResponse_tx_hash = md_MsgProvideLiquidityResponse.Fields().ByName("tx_hash")
	fd_MsgProvideLiquidityResponse_shares_received = md_MsgProvideLiquidityResponse.Fields().ByName("shares_received")
	fd_MsgProvideLiquidityResponse_sequence = md_MsgProvideLiquidityResponse.Fields().ByName("sequence")
}

var _ protoreflect.Message = (*fastReflection_MsgProvideLiquidityResponse)(nil)

type fastReflection_MsgProvideLiquidityResponse MsgProvideLiquidityResponse

func (x *MsgProvideLiquidityResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgProvideLiquidityResponse)(x)
}

func (x *MsgProvideLiquidityResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgProvideLiquidityResponse_messageType fastReflection_MsgProvideLiquidityResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgProvideLiquidityResponse_messageType{}

type fastReflection_MsgProvideLiquidityResponse_messageType struct{}

func (x fastReflection_MsgProvideLiquidityResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgProvideLiquidityResponse)(nil)
}
func (x fastReflection_MsgProvideLiquidityResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgProvideLiquidityResponse)
}
func (x fastReflection_MsgProvideLiquidityResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgProvideLiquidityResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgProvideLiquidityResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgProvideLiquidityResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgProvideLiquidityResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgProvideLiquidityResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgProvideLiquidityResponse) New() protoreflect.Message {
	return new(fastReflection_MsgProvideLiquidityResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgProvideLiquidityResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgProvideLiquidityResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgProvideLiquidityResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_MsgProvideLiquidityResponse_tx_hash, value) {
			return
		}
	}
	if x.SharesReceived != "" {
		value := protoreflect.ValueOfString(x.SharesReceived)
		if !f(fd_MsgProvideLiquidityResponse_shares_received, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_MsgProvideLiquidityResponse_sequence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgProvideLiquidityResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidityResponse.tx_hash":
		return x.TxHash != ""
	case "dex.v1.MsgProvideLiquidityResponse.shares_received":
		return x.SharesReceived != ""
	case "dex.v1.MsgProvideLiquidityResponse.sequence":
		return x.Sequence != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidityResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidityResponse.tx_hash":
		x.TxHash = ""
	case "dex.v1.MsgProvideLiquidityResponse.shares_received":
		x.SharesReceived = ""
	case "dex.v1.MsgProvideLiquidityResponse.sequence":
		x.Sequence = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgProvideLiquidityResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgProvideLiquidityResponse.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidityResponse.shares_received":
		value := x.SharesReceived
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgProvideLiquidityResponse.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidityResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidityResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidityResponse.tx_hash":
		x.TxHash = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidityResponse.shares_received":
		x.SharesReceived = value.Interface().(string)
	case "dex.v1.MsgProvideLiquidityResponse.sequence":
		x.Sequence = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidityResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidityResponse.tx_hash":
		panic(fmt.Errorf("field tx_hash of message dex.v1.MsgProvideLiquidityResponse is not mutable"))
	case "dex.v1.MsgProvideLiquidityResponse.shares_received":
		panic(fmt.Errorf("field shares_received of message dex.v1.MsgProvideLiquidityResponse is not mutable"))
	case "dex.v1.MsgProvideLiquidityResponse.sequence":
		panic(fmt.Errorf("field sequence of message dex.v1.MsgProvideLiquidityResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgProvideLiquidityResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgProvideLiquidityResponse.tx_hash":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidityResponse.shares_received":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgProvideLiquidityResponse.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgProvideLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgProvideLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgProvideLiquidityResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgProvideLiquidityResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgProvideLiquidityResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgProvideLiquidityResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgProvideLiquidityResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgProvideLiquidityResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgProvideLiquidityResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharesReceived)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgProvideLiquidityResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x18
		}
		if len(x.SharesReceived) > 0 {
			i -= len(x.SharesReceived)
			copy(dAtA[i:], x.SharesReceived)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesReceived)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgProvideLiquidityResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgProvideLiquidityResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgProvideLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesReceived", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesReceived = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgRemoveLiquidity_5_list)(nil)

type _MsgRemoveLiquidity_5_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgRemoveLiquidity_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgRemoveLiquidity_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgRemoveLiquidity_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgRemoveLiquidity_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgRemoveLiquidity_5_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgRemoveLiquidity_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgRemoveLiquidity_5_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgRemoveLiquidity_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgRemoveLiquidity               protoreflect.MessageDescriptor
	fd_MsgRemoveLiquidity_did           protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_connection_id protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_pool_id       protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_shares        protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_min_amounts   protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_ucan_token    protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_timeout       protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgRemoveLiquidity = File_dex_v1_tx_proto.Messages().ByName("MsgRemoveLiquidity")
	fd_MsgRemoveLiquidity_did = md_MsgRemoveLiquidity.Fields().ByName("did")
	fd_MsgRemoveLiquidity_connection_id = md_MsgRemoveLiquidity.Fields().ByName("connection_id")
	fd_MsgRemoveLiquidity_pool_id = md_MsgRemoveLiquidity.Fields().ByName("pool_id")
	fd_MsgRemoveLiquidity_shares = md_MsgRemoveLiquidity.Fields().ByName("shares")
	fd_MsgRemoveLiquidity_min_amounts = md_MsgRemoveLiquidity.Fields().ByName("min_amounts")
	fd_MsgRemoveLiquidity_ucan_token = md_MsgRemoveLiquidity.Fields().ByName("ucan_token")
	fd_MsgRemoveLiquidity_timeout = md_MsgRemoveLiquidity.Fields().ByName("timeout")
}

var _ protoreflect.Message = (*fastReflection_MsgRemoveLiquidity)(nil)

type fastReflection_MsgRemoveLiquidity MsgRemoveLiquidity

func (x *MsgRemoveLiquidity) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidity)(x)
}

func (x *MsgRemoveLiquidity) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRemoveLiquidity_messageType fastReflection_MsgRemoveLiquidity_messageType
var _ protoreflect.MessageType = fastReflection_MsgRemoveLiquidity_messageType{}

type fastReflection_MsgRemoveLiquidity_messageType struct{}

func (x fastReflection_MsgRemoveLiquidity_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidity)(nil)
}
func (x fastReflection_MsgRemoveLiquidity_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidity)
}
func (x fastReflection_MsgRemoveLiquidity_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidity
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRemoveLiquidity) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidity
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRemoveLiquidity) Type() protoreflect.MessageType {
	return _fastReflection_MsgRemoveLiquidity_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRemoveLiquidity) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidity)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRemoveLiquidity) Interface() protoreflect.ProtoMessage {
	return (*MsgRemoveLiquidity)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRemoveLiquidity) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_MsgRemoveLiquidity_did, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_MsgRemoveLiquidity_connection_id, value) {
			return
		}
	}
	if x.PoolId != "" {
		value := protoreflect.ValueOfString(x.PoolId)
		if !f(fd_MsgRemoveLiquidity_pool_id, value) {
			return
		}
	}
	if x.Shares != "" {
		value := protoreflect.ValueOfString(x.Shares)
		if !f(fd_MsgRemoveLiquidity_shares, value) {
			return
		}
	}
	if len(x.MinAmounts) != 0 {
		value := protoreflect.ValueOfList(&_MsgRemoveLiquidity_5_list{list: &x.MinAmounts})
		if !f(fd_MsgRemoveLiquidity_min_amounts, value) {
			return
		}
	}
	if x.UcanToken != "" {
		value := protoreflect.ValueOfString(x.UcanToken)
		if !f(fd_MsgRemoveLiquidity_ucan_token, value) {
			return
		}
	}
	if x.Timeout != nil {
		value := protoreflect.ValueOfMessage(x.Timeout.ProtoReflect())
		if !f(fd_MsgRemoveLiquidity_timeout, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRemoveLiquidity) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidity.did":
		return x.Did != ""
	case "dex.v1.MsgRemoveLiquidity.connection_id":
		return x.ConnectionId != ""
	case "dex.v1.MsgRemoveLiquidity.pool_id":
		return x.PoolId != ""
	case "dex.v1.MsgRemoveLiquidity.shares":
		return x.Shares != ""
	case "dex.v1.MsgRemoveLiquidity.min_amounts":
		return len(x.MinAmounts) != 0
	case "dex.v1.MsgRemoveLiquidity.ucan_token":
		return x.UcanToken != ""
	case "dex.v1.MsgRemoveLiquidity.timeout":
		return x.Timeout != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidity.did":
		x.Did = ""
	case "dex.v1.MsgRemoveLiquidity.connection_id":
		x.ConnectionId = ""
	case "dex.v1.MsgRemoveLiquidity.pool_id":
		x.PoolId = ""
	case "dex.v1.MsgRemoveLiquidity.shares":
		x.Shares = ""
	case "dex.v1.MsgRemoveLiquidity.min_amounts":
		x.MinAmounts = nil
	case "dex.v1.MsgRemoveLiquidity.ucan_token":
		x.UcanToken = ""
	case "dex.v1.MsgRemoveLiquidity.timeout":
		x.Timeout = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRemoveLiquidity) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgRemoveLiquidity.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRemoveLiquidity.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRemoveLiquidity.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRemoveLiquidity.shares":
		value := x.Shares
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRemoveLiquidity.min_amounts":
		if len(x.MinAmounts) == 0 {
			return protoreflect.ValueOfList(&_MsgRemoveLiquidity_5_list{})
		}
		listValue := &_MsgRemoveLiquidity_5_list{list: &x.MinAmounts}
		return protoreflect.ValueOfList(listValue)
	case "dex.v1.MsgRemoveLiquidity.ucan_token":
		value := x.UcanToken
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRemoveLiquidity.timeout":
		value := x.Timeout
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidity does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidity.did":
		x.Did = value.Interface().(string)
	case "dex.v1.MsgRemoveLiquidity.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "dex.v1.MsgRemoveLiquidity.pool_id":
		x.PoolId = value.Interface().(string)
	case "dex.v1.MsgRemoveLiquidity.shares":
		x.Shares = value.Interface().(string)
	case "dex.v1.MsgRemoveLiquidity.min_amounts":
		lv := value.List()
		clv := lv.(*_MsgRemoveLiquidity_5_list)
		x.MinAmounts = *clv.list
	case "dex.v1.MsgRemoveLiquidity.ucan_token":
		x.UcanToken = value.Interface().(string)
	case "dex.v1.MsgRemoveLiquidity.timeout":
		x.Timeout = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidity.min_amounts":
		if x.MinAmounts == nil {
			x.MinAmounts = []*v1beta1.Coin{}
		}
		value := &_MsgRemoveLiquidity_5_list{list: &x.MinAmounts}
		return protoreflect.ValueOfList(value)
	case "dex.v1.MsgRemoveLiquidity.timeout":
		if x.Timeout == nil {
			x.Timeout = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timeout.ProtoReflect())
	case "dex.v1.MsgRemoveLiquidity.did":
		panic(fmt.Errorf("field did of message dex.v1.MsgRemoveLiquidity is not mutable"))
	case "dex.v1.MsgRemoveLiquidity.connection_id":
		panic(fmt.Errorf("field connection_id of message dex.v1.MsgRemoveLiquidity is not mutable"))
	case "dex.v1.MsgRemoveLiquidity.pool_id":
		panic(fmt.Errorf("field pool_id of message dex.v1.MsgRemoveLiquidity is not mutable"))
	case "dex.v1.MsgRemoveLiquidity.shares":
		panic(fmt.Errorf("field shares of message dex.v1.MsgRemoveLiquidity is not mutable"))
	case "dex.v1.MsgRemoveLiquidity.ucan_token":
		panic(fmt.Errorf("field ucan_token of message dex.v1.MsgRemoveLiquidity is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRemoveLiquidity) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidity.did":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRemoveLiquidity.connection_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRemoveLiquidity.pool_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRemoveLiquidity.shares":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRemoveLiquidity.min_amounts":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgRemoveLiquidity_5_list{list: &list})
	case "dex.v1.MsgRemoveLiquidity.ucan_token":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRemoveLiquidity.timeout":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRemoveLiquidity) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgRemoveLiquidity", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRemoveLiquidity) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRemoveLiquidity) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRemoveLiquidity) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRemoveLiquidity)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PoolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Shares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.MinAmounts) > 0 {
			for _, e := range x.MinAmounts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.UcanToken)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timeout != nil {
			l = options.Size(x.Timeout)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidity)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timeout != nil {
			encoded, err := options.Marshal(x.Timeout)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.UcanToken) > 0 {
			i -= len(x.UcanToken)
			copy(dAtA[i:], x.UcanToken)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UcanToken)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.MinAmounts) > 0 {
			for iNdEx := len(x.MinAmounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MinAmounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.Shares) > 0 {
			i -= len(x.Shares)
			copy(dAtA[i:], x.Shares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Shares)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PoolId) > 0 {
			i -= len(x.PoolId)
			copy(dAtA[i:], x.PoolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidity)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidity: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinAmounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinAmounts = append(x.MinAmounts, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinAmounts[len(x.MinAmounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanToken", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UcanToken = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timeout == nil {
					x.Timeout = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timeout); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgRemoveLiquidityResponse_2_list)(nil)

type _MsgRemoveLiquidityResponse_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgRemoveLiquidityResponse_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgRemoveLiquidityResponse_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgRemoveLiquidityResponse_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgRemoveLiquidityResponse_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgRemoveLiquidityResponse_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgRemoveLiquidityResponse_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgRemoveLiquidityResponse_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgRemoveLiquidityResponse_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgRemoveLiquidityResponse                 protoreflect.MessageDescriptor
	fd_MsgRemoveLiquidityResponse_tx_hash         protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidityResponse_assets_received protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidityResponse_sequence        protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgRemoveLiquidityResponse = File_dex_v1_tx_proto.Messages().ByName("MsgRemoveLiquidityResponse")
	fd_MsgRemoveLiquidityResponse_tx_hash = md_MsgRemoveLiquidityResponse.Fields().ByName("tx_hash")
	fd_MsgRemoveLiquidityResponse_assets_received = md_MsgRemoveLiquidityResponse.Fields().ByName("assets_received")
	fd_MsgRemoveLiquidityResponse_sequence = md_MsgRemoveLiquidityResponse.Fields().ByName("sequence")
}

var _ protoreflect.Message = (*fastReflection_MsgRemoveLiquidityResponse)(nil)

type fastReflection_MsgRemoveLiquidityResponse MsgRemoveLiquidityResponse

func (x *MsgRemoveLiquidityResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidityResponse)(x)
}

func (x *MsgRemoveLiquidityResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRemoveLiquidityResponse_messageType fastReflection_MsgRemoveLiquidityResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgRemoveLiquidityResponse_messageType{}

type fastReflection_MsgRemoveLiquidityResponse_messageType struct{}

func (x fastReflection_MsgRemoveLiquidityResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidityResponse)(nil)
}
func (x fastReflection_MsgRemoveLiquidityResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidityResponse)
}
func (x fastReflection_MsgRemoveLiquidityResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidityResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRemoveLiquidityResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidityResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRemoveLiquidityResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgRemoveLiquidityResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRemoveLiquidityResponse) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidityResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRemoveLiquidityResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgRemoveLiquidityResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRemoveLiquidityResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_MsgRemoveLiquidityResponse_tx_hash, value) {
			return
		}
	}
	if len(x.AssetsReceived) != 0 {
		value := protoreflect.ValueOfList(&_MsgRemoveLiquidityResponse_2_list{list: &x.AssetsReceived})
		if !f(fd_MsgRemoveLiquidityResponse_assets_received, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_MsgRemoveLiquidityResponse_sequence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRemoveLiquidityResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidityResponse.tx_hash":
		return x.TxHash != ""
	case "dex.v1.MsgRemoveLiquidityResponse.assets_received":
		return len(x.AssetsReceived) != 0
	case "dex.v1.MsgRemoveLiquidityResponse.sequence":
		return x.Sequence != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidityResponse.tx_hash":
		x.TxHash = ""
	case "dex.v1.MsgRemoveLiquidityResponse.assets_received":
		x.AssetsReceived = nil
	case "dex.v1.MsgRemoveLiquidityResponse.sequence":
		x.Sequence = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRemoveLiquidityResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgRemoveLiquidityResponse.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgRemoveLiquidityResponse.assets_received":
		if len(x.AssetsReceived) == 0 {
			return protoreflect.ValueOfList(&_MsgRemoveLiquidityResponse_2_list{})
		}
		listValue := &_MsgRemoveLiquidityResponse_2_list{list: &x.AssetsReceived}
		return protoreflect.ValueOfList(listValue)
	case "dex.v1.MsgRemoveLiquidityResponse.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidityResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidityResponse.tx_hash":
		x.TxHash = value.Interface().(string)
	case "dex.v1.MsgRemoveLiquidityResponse.assets_received":
		lv := value.List()
		clv := lv.(*_MsgRemoveLiquidityResponse_2_list)
		x.AssetsReceived = *clv.list
	case "dex.v1.MsgRemoveLiquidityResponse.sequence":
		x.Sequence = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidityResponse.assets_received":
		if x.AssetsReceived == nil {
			x.AssetsReceived = []*v1beta1.Coin{}
		}
		value := &_MsgRemoveLiquidityResponse_2_list{list: &x.AssetsReceived}
		return protoreflect.ValueOfList(value)
	case "dex.v1.MsgRemoveLiquidityResponse.tx_hash":
		panic(fmt.Errorf("field tx_hash of message dex.v1.MsgRemoveLiquidityResponse is not mutable"))
	case "dex.v1.MsgRemoveLiquidityResponse.sequence":
		panic(fmt.Errorf("field sequence of message dex.v1.MsgRemoveLiquidityResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRemoveLiquidityResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgRemoveLiquidityResponse.tx_hash":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgRemoveLiquidityResponse.assets_received":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgRemoveLiquidityResponse_2_list{list: &list})
	case "dex.v1.MsgRemoveLiquidityResponse.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRemoveLiquidityResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgRemoveLiquidityResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRemoveLiquidityResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRemoveLiquidityResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRemoveLiquidityResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRemoveLiquidityResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AssetsReceived) > 0 {
			for _, e := range x.AssetsReceived {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidityResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x18
		}
		if len(x.AssetsReceived) > 0 {
			for iNdEx := len(x.AssetsReceived) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AssetsReceived[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidityResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidityResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetsReceived", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AssetsReceived = append(x.AssetsReceived, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AssetsReceived[len(x.AssetsReceived)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgCreateLimitOrder               protoreflect.MessageDescriptor
	fd_MsgCreateLimitOrder_did           protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_connection_id protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_sell_denom    protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_buy_denom     protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_amount        protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_price         protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_expiration    protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrder_ucan_token    protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgCreateLimitOrder = File_dex_v1_tx_proto.Messages().ByName("MsgCreateLimitOrder")
	fd_MsgCreateLimitOrder_did = md_MsgCreateLimitOrder.Fields().ByName("did")
	fd_MsgCreateLimitOrder_connection_id = md_MsgCreateLimitOrder.Fields().ByName("connection_id")
	fd_MsgCreateLimitOrder_sell_denom = md_MsgCreateLimitOrder.Fields().ByName("sell_denom")
	fd_MsgCreateLimitOrder_buy_denom = md_MsgCreateLimitOrder.Fields().ByName("buy_denom")
	fd_MsgCreateLimitOrder_amount = md_MsgCreateLimitOrder.Fields().ByName("amount")
	fd_MsgCreateLimitOrder_price = md_MsgCreateLimitOrder.Fields().ByName("price")
	fd_MsgCreateLimitOrder_expiration = md_MsgCreateLimitOrder.Fields().ByName("expiration")
	fd_MsgCreateLimitOrder_ucan_token = md_MsgCreateLimitOrder.Fields().ByName("ucan_token")
}

var _ protoreflect.Message = (*fastReflection_MsgCreateLimitOrder)(nil)

type fastReflection_MsgCreateLimitOrder MsgCreateLimitOrder

func (x *MsgCreateLimitOrder) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgCreateLimitOrder)(x)
}

func (x *MsgCreateLimitOrder) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgCreateLimitOrder_messageType fastReflection_MsgCreateLimitOrder_messageType
var _ protoreflect.MessageType = fastReflection_MsgCreateLimitOrder_messageType{}

type fastReflection_MsgCreateLimitOrder_messageType struct{}

func (x fastReflection_MsgCreateLimitOrder_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgCreateLimitOrder)(nil)
}
func (x fastReflection_MsgCreateLimitOrder_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgCreateLimitOrder)
}
func (x fastReflection_MsgCreateLimitOrder_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreateLimitOrder
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgCreateLimitOrder) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreateLimitOrder
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgCreateLimitOrder) Type() protoreflect.MessageType {
	return _fastReflection_MsgCreateLimitOrder_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgCreateLimitOrder) New() protoreflect.Message {
	return new(fastReflection_MsgCreateLimitOrder)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgCreateLimitOrder) Interface() protoreflect.ProtoMessage {
	return (*MsgCreateLimitOrder)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgCreateLimitOrder) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_MsgCreateLimitOrder_did, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_MsgCreateLimitOrder_connection_id, value) {
			return
		}
	}
	if x.SellDenom != "" {
		value := protoreflect.ValueOfString(x.SellDenom)
		if !f(fd_MsgCreateLimitOrder_sell_denom, value) {
			return
		}
	}
	if x.BuyDenom != "" {
		value := protoreflect.ValueOfString(x.BuyDenom)
		if !f(fd_MsgCreateLimitOrder_buy_denom, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_MsgCreateLimitOrder_amount, value) {
			return
		}
	}
	if x.Price != "" {
		value := protoreflect.ValueOfString(x.Price)
		if !f(fd_MsgCreateLimitOrder_price, value) {
			return
		}
	}
	if x.Expiration != nil {
		value := protoreflect.ValueOfMessage(x.Expiration.ProtoReflect())
		if !f(fd_MsgCreateLimitOrder_expiration, value) {
			return
		}
	}
	if x.UcanToken != "" {
		value := protoreflect.ValueOfString(x.UcanToken)
		if !f(fd_MsgCreateLimitOrder_ucan_token, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgCreateLimitOrder) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrder.did":
		return x.Did != ""
	case "dex.v1.MsgCreateLimitOrder.connection_id":
		return x.ConnectionId != ""
	case "dex.v1.MsgCreateLimitOrder.sell_denom":
		return x.SellDenom != ""
	case "dex.v1.MsgCreateLimitOrder.buy_denom":
		return x.BuyDenom != ""
	case "dex.v1.MsgCreateLimitOrder.amount":
		return x.Amount != ""
	case "dex.v1.MsgCreateLimitOrder.price":
		return x.Price != ""
	case "dex.v1.MsgCreateLimitOrder.expiration":
		return x.Expiration != nil
	case "dex.v1.MsgCreateLimitOrder.ucan_token":
		return x.UcanToken != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrder does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrder) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrder.did":
		x.Did = ""
	case "dex.v1.MsgCreateLimitOrder.connection_id":
		x.ConnectionId = ""
	case "dex.v1.MsgCreateLimitOrder.sell_denom":
		x.SellDenom = ""
	case "dex.v1.MsgCreateLimitOrder.buy_denom":
		x.BuyDenom = ""
	case "dex.v1.MsgCreateLimitOrder.amount":
		x.Amount = ""
	case "dex.v1.MsgCreateLimitOrder.price":
		x.Price = ""
	case "dex.v1.MsgCreateLimitOrder.expiration":
		x.Expiration = nil
	case "dex.v1.MsgCreateLimitOrder.ucan_token":
		x.UcanToken = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrder does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgCreateLimitOrder) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgCreateLimitOrder.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrder.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrder.sell_denom":
		value := x.SellDenom
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrder.buy_denom":
		value := x.BuyDenom
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrder.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrder.price":
		value := x.Price
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrder.expiration":
		value := x.Expiration
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "dex.v1.MsgCreateLimitOrder.ucan_token":
		value := x.UcanToken
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrder does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrder) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrder.did":
		x.Did = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrder.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrder.sell_denom":
		x.SellDenom = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrder.buy_denom":
		x.BuyDenom = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrder.amount":
		x.Amount = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrder.price":
		x.Price = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrder.expiration":
		x.Expiration = value.Message().Interface().(*timestamppb.Timestamp)
	case "dex.v1.MsgCreateLimitOrder.ucan_token":
		x.UcanToken = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrder does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrder) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrder.expiration":
		if x.Expiration == nil {
			x.Expiration = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Expiration.ProtoReflect())
	case "dex.v1.MsgCreateLimitOrder.did":
		panic(fmt.Errorf("field did of message dex.v1.MsgCreateLimitOrder is not mutable"))
	case "dex.v1.MsgCreateLimitOrder.connection_id":
		panic(fmt.Errorf("field connection_id of message dex.v1.MsgCreateLimitOrder is not mutable"))
	case "dex.v1.MsgCreateLimitOrder.sell_denom":
		panic(fmt.Errorf("field sell_denom of message dex.v1.MsgCreateLimitOrder is not mutable"))
	case "dex.v1.MsgCreateLimitOrder.buy_denom":
		panic(fmt.Errorf("field buy_denom of message dex.v1.MsgCreateLimitOrder is not mutable"))
	case "dex.v1.MsgCreateLimitOrder.amount":
		panic(fmt.Errorf("field amount of message dex.v1.MsgCreateLimitOrder is not mutable"))
	case "dex.v1.MsgCreateLimitOrder.price":
		panic(fmt.Errorf("field price of message dex.v1.MsgCreateLimitOrder is not mutable"))
	case "dex.v1.MsgCreateLimitOrder.ucan_token":
		panic(fmt.Errorf("field ucan_token of message dex.v1.MsgCreateLimitOrder is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrder does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgCreateLimitOrder) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrder.did":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrder.connection_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrder.sell_denom":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrder.buy_denom":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrder.amount":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrder.price":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrder.expiration":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "dex.v1.MsgCreateLimitOrder.ucan_token":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrder does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgCreateLimitOrder) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgCreateLimitOrder", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgCreateLimitOrder) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrder) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgCreateLimitOrder) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgCreateLimitOrder) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgCreateLimitOrder)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SellDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BuyDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Price)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Expiration != nil {
			l = options.Size(x.Expiration)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UcanToken)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreateLimitOrder)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.UcanToken) > 0 {
			i -= len(x.UcanToken)
			copy(dAtA[i:], x.UcanToken)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UcanToken)))
			i--
			dAtA[i] = 0x42
		}
		if x.Expiration != nil {
			encoded, err := options.Marshal(x.Expiration)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Price) > 0 {
			i -= len(x.Price)
			copy(dAtA[i:], x.Price)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Price)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.BuyDenom) > 0 {
			i -= len(x.BuyDenom)
			copy(dAtA[i:], x.BuyDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BuyDenom)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.SellDenom) > 0 {
			i -= len(x.SellDenom)
			copy(dAtA[i:], x.SellDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SellDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreateLimitOrder)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreateLimitOrder: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreateLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SellDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SellDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BuyDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BuyDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Price = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Expiration == nil {
					x.Expiration = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Expiration); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanToken", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UcanToken = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgCreateLimitOrderResponse          protoreflect.MessageDescriptor
	fd_MsgCreateLimitOrderResponse_order_id protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrderResponse_tx_hash  protoreflect.FieldDescriptor
	fd_MsgCreateLimitOrderResponse_sequence protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgCreateLimitOrderResponse = File_dex_v1_tx_proto.Messages().ByName("MsgCreateLimitOrderResponse")
	fd_MsgCreateLimitOrderResponse_order_id = md_MsgCreateLimitOrderResponse.Fields().ByName("order_id")
	fd_MsgCreateLimitOrderResponse_tx_hash = md_MsgCreateLimitOrderResponse.Fields().ByName("tx_hash")
	fd_MsgCreateLimitOrderResponse_sequence = md_MsgCreateLimitOrderResponse.Fields().ByName("sequence")
}

var _ protoreflect.Message = (*fastReflection_MsgCreateLimitOrderResponse)(nil)

type fastReflection_MsgCreateLimitOrderResponse MsgCreateLimitOrderResponse

func (x *MsgCreateLimitOrderResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgCreateLimitOrderResponse)(x)
}

func (x *MsgCreateLimitOrderResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgCreateLimitOrderResponse_messageType fastReflection_MsgCreateLimitOrderResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgCreateLimitOrderResponse_messageType{}

type fastReflection_MsgCreateLimitOrderResponse_messageType struct{}

func (x fastReflection_MsgCreateLimitOrderResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgCreateLimitOrderResponse)(nil)
}
func (x fastReflection_MsgCreateLimitOrderResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgCreateLimitOrderResponse)
}
func (x fastReflection_MsgCreateLimitOrderResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreateLimitOrderResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgCreateLimitOrderResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreateLimitOrderResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgCreateLimitOrderResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgCreateLimitOrderResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgCreateLimitOrderResponse) New() protoreflect.Message {
	return new(fastReflection_MsgCreateLimitOrderResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgCreateLimitOrderResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgCreateLimitOrderResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgCreateLimitOrderResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OrderId != "" {
		value := protoreflect.ValueOfString(x.OrderId)
		if !f(fd_MsgCreateLimitOrderResponse_order_id, value) {
			return
		}
	}
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_MsgCreateLimitOrderResponse_tx_hash, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_MsgCreateLimitOrderResponse_sequence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgCreateLimitOrderResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrderResponse.order_id":
		return x.OrderId != ""
	case "dex.v1.MsgCreateLimitOrderResponse.tx_hash":
		return x.TxHash != ""
	case "dex.v1.MsgCreateLimitOrderResponse.sequence":
		return x.Sequence != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrderResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrderResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrderResponse.order_id":
		x.OrderId = ""
	case "dex.v1.MsgCreateLimitOrderResponse.tx_hash":
		x.TxHash = ""
	case "dex.v1.MsgCreateLimitOrderResponse.sequence":
		x.Sequence = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrderResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgCreateLimitOrderResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgCreateLimitOrderResponse.order_id":
		value := x.OrderId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrderResponse.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCreateLimitOrderResponse.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrderResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrderResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrderResponse.order_id":
		x.OrderId = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrderResponse.tx_hash":
		x.TxHash = value.Interface().(string)
	case "dex.v1.MsgCreateLimitOrderResponse.sequence":
		x.Sequence = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrderResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrderResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrderResponse.order_id":
		panic(fmt.Errorf("field order_id of message dex.v1.MsgCreateLimitOrderResponse is not mutable"))
	case "dex.v1.MsgCreateLimitOrderResponse.tx_hash":
		panic(fmt.Errorf("field tx_hash of message dex.v1.MsgCreateLimitOrderResponse is not mutable"))
	case "dex.v1.MsgCreateLimitOrderResponse.sequence":
		panic(fmt.Errorf("field sequence of message dex.v1.MsgCreateLimitOrderResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrderResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgCreateLimitOrderResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCreateLimitOrderResponse.order_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrderResponse.tx_hash":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCreateLimitOrderResponse.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCreateLimitOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCreateLimitOrderResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgCreateLimitOrderResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgCreateLimitOrderResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgCreateLimitOrderResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreateLimitOrderResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgCreateLimitOrderResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgCreateLimitOrderResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgCreateLimitOrderResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OrderId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreateLimitOrderResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x18
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OrderId) > 0 {
			i -= len(x.OrderId)
			copy(dAtA[i:], x.OrderId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreateLimitOrderResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreateLimitOrderResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreateLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgCancelOrder               protoreflect.MessageDescriptor
	fd_MsgCancelOrder_did           protoreflect.FieldDescriptor
	fd_MsgCancelOrder_connection_id protoreflect.FieldDescriptor
	fd_MsgCancelOrder_order_id      protoreflect.FieldDescriptor
	fd_MsgCancelOrder_ucan_token    protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgCancelOrder = File_dex_v1_tx_proto.Messages().ByName("MsgCancelOrder")
	fd_MsgCancelOrder_did = md_MsgCancelOrder.Fields().ByName("did")
	fd_MsgCancelOrder_connection_id = md_MsgCancelOrder.Fields().ByName("connection_id")
	fd_MsgCancelOrder_order_id = md_MsgCancelOrder.Fields().ByName("order_id")
	fd_MsgCancelOrder_ucan_token = md_MsgCancelOrder.Fields().ByName("ucan_token")
}

var _ protoreflect.Message = (*fastReflection_MsgCancelOrder)(nil)

type fastReflection_MsgCancelOrder MsgCancelOrder

func (x *MsgCancelOrder) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgCancelOrder)(x)
}

func (x *MsgCancelOrder) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgCancelOrder_messageType fastReflection_MsgCancelOrder_messageType
var _ protoreflect.MessageType = fastReflection_MsgCancelOrder_messageType{}

type fastReflection_MsgCancelOrder_messageType struct{}

func (x fastReflection_MsgCancelOrder_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgCancelOrder)(nil)
}
func (x fastReflection_MsgCancelOrder_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgCancelOrder)
}
func (x fastReflection_MsgCancelOrder_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCancelOrder
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgCancelOrder) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCancelOrder
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgCancelOrder) Type() protoreflect.MessageType {
	return _fastReflection_MsgCancelOrder_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgCancelOrder) New() protoreflect.Message {
	return new(fastReflection_MsgCancelOrder)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgCancelOrder) Interface() protoreflect.ProtoMessage {
	return (*MsgCancelOrder)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgCancelOrder) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_MsgCancelOrder_did, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_MsgCancelOrder_connection_id, value) {
			return
		}
	}
	if x.OrderId != "" {
		value := protoreflect.ValueOfString(x.OrderId)
		if !f(fd_MsgCancelOrder_order_id, value) {
			return
		}
	}
	if x.UcanToken != "" {
		value := protoreflect.ValueOfString(x.UcanToken)
		if !f(fd_MsgCancelOrder_ucan_token, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgCancelOrder) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrder.did":
		return x.Did != ""
	case "dex.v1.MsgCancelOrder.connection_id":
		return x.ConnectionId != ""
	case "dex.v1.MsgCancelOrder.order_id":
		return x.OrderId != ""
	case "dex.v1.MsgCancelOrder.ucan_token":
		return x.UcanToken != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrder does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrder) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrder.did":
		x.Did = ""
	case "dex.v1.MsgCancelOrder.connection_id":
		x.ConnectionId = ""
	case "dex.v1.MsgCancelOrder.order_id":
		x.OrderId = ""
	case "dex.v1.MsgCancelOrder.ucan_token":
		x.UcanToken = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrder does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgCancelOrder) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgCancelOrder.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCancelOrder.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCancelOrder.order_id":
		value := x.OrderId
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCancelOrder.ucan_token":
		value := x.UcanToken
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrder does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrder) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrder.did":
		x.Did = value.Interface().(string)
	case "dex.v1.MsgCancelOrder.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "dex.v1.MsgCancelOrder.order_id":
		x.OrderId = value.Interface().(string)
	case "dex.v1.MsgCancelOrder.ucan_token":
		x.UcanToken = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrder does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrder) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrder.did":
		panic(fmt.Errorf("field did of message dex.v1.MsgCancelOrder is not mutable"))
	case "dex.v1.MsgCancelOrder.connection_id":
		panic(fmt.Errorf("field connection_id of message dex.v1.MsgCancelOrder is not mutable"))
	case "dex.v1.MsgCancelOrder.order_id":
		panic(fmt.Errorf("field order_id of message dex.v1.MsgCancelOrder is not mutable"))
	case "dex.v1.MsgCancelOrder.ucan_token":
		panic(fmt.Errorf("field ucan_token of message dex.v1.MsgCancelOrder is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrder does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgCancelOrder) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrder.did":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCancelOrder.connection_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCancelOrder.order_id":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCancelOrder.ucan_token":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrder"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrder does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgCancelOrder) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgCancelOrder", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgCancelOrder) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrder) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgCancelOrder) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgCancelOrder) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgCancelOrder)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OrderId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UcanToken)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgCancelOrder)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.UcanToken) > 0 {
			i -= len(x.UcanToken)
			copy(dAtA[i:], x.UcanToken)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UcanToken)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.OrderId) > 0 {
			i -= len(x.OrderId)
			copy(dAtA[i:], x.OrderId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgCancelOrder)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCancelOrder: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanToken", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UcanToken = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgCancelOrderResponse          protoreflect.MessageDescriptor
	fd_MsgCancelOrderResponse_tx_hash  protoreflect.FieldDescriptor
	fd_MsgCancelOrderResponse_sequence protoreflect.FieldDescriptor
)

func init() {
	file_dex_v1_tx_proto_init()
	md_MsgCancelOrderResponse = File_dex_v1_tx_proto.Messages().ByName("MsgCancelOrderResponse")
	fd_MsgCancelOrderResponse_tx_hash = md_MsgCancelOrderResponse.Fields().ByName("tx_hash")
	fd_MsgCancelOrderResponse_sequence = md_MsgCancelOrderResponse.Fields().ByName("sequence")
}

var _ protoreflect.Message = (*fastReflection_MsgCancelOrderResponse)(nil)

type fastReflection_MsgCancelOrderResponse MsgCancelOrderResponse

func (x *MsgCancelOrderResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgCancelOrderResponse)(x)
}

func (x *MsgCancelOrderResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_dex_v1_tx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgCancelOrderResponse_messageType fastReflection_MsgCancelOrderResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgCancelOrderResponse_messageType{}

type fastReflection_MsgCancelOrderResponse_messageType struct{}

func (x fastReflection_MsgCancelOrderResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgCancelOrderResponse)(nil)
}
func (x fastReflection_MsgCancelOrderResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgCancelOrderResponse)
}
func (x fastReflection_MsgCancelOrderResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCancelOrderResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgCancelOrderResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCancelOrderResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgCancelOrderResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgCancelOrderResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgCancelOrderResponse) New() protoreflect.Message {
	return new(fastReflection_MsgCancelOrderResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgCancelOrderResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgCancelOrderResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgCancelOrderResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_MsgCancelOrderResponse_tx_hash, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_MsgCancelOrderResponse_sequence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgCancelOrderResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrderResponse.tx_hash":
		return x.TxHash != ""
	case "dex.v1.MsgCancelOrderResponse.sequence":
		return x.Sequence != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrderResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrderResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrderResponse.tx_hash":
		x.TxHash = ""
	case "dex.v1.MsgCancelOrderResponse.sequence":
		x.Sequence = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrderResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgCancelOrderResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dex.v1.MsgCancelOrderResponse.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "dex.v1.MsgCancelOrderResponse.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrderResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrderResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrderResponse.tx_hash":
		x.TxHash = value.Interface().(string)
	case "dex.v1.MsgCancelOrderResponse.sequence":
		x.Sequence = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrderResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrderResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrderResponse.tx_hash":
		panic(fmt.Errorf("field tx_hash of message dex.v1.MsgCancelOrderResponse is not mutable"))
	case "dex.v1.MsgCancelOrderResponse.sequence":
		panic(fmt.Errorf("field sequence of message dex.v1.MsgCancelOrderResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrderResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgCancelOrderResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dex.v1.MsgCancelOrderResponse.tx_hash":
		return protoreflect.ValueOfString("")
	case "dex.v1.MsgCancelOrderResponse.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dex.v1.MsgCancelOrderResponse"))
		}
		panic(fmt.Errorf("message dex.v1.MsgCancelOrderResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgCancelOrderResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dex.v1.MsgCancelOrderResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgCancelOrderResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCancelOrderResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgCancelOrderResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgCancelOrderResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgCancelOrderResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgCancelOrderResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x10
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgCancelOrderResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCancelOrderResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCancelOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: dex/v1/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MsgRegisterDEXAccount registers a new ICA account for DEX operations
type MsgRegisterDEXAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID controller requesting the account
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to target chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Requested features for this account
	Features []string `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// Optional metadata
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MsgRegisterDEXAccount) Reset() {
	*x = MsgRegisterDEXAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRegisterDEXAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRegisterDEXAccount) ProtoMessage() {}

// Deprecated: Use MsgRegisterDEXAccount.ProtoReflect.Descriptor instead.
func (*MsgRegisterDEXAccount) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgRegisterDEXAccount) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MsgRegisterDEXAccount) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MsgRegisterDEXAccount) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *MsgRegisterDEXAccount) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// MsgRegisterDEXAccountResponse defines the response
type MsgRegisterDEXAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated port ID for the account
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// Account address on remote chain (once available)
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (x *MsgRegisterDEXAccountResponse) Reset() {
	*x = MsgRegisterDEXAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRegisterDEXAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRegisterDEXAccountResponse) ProtoMessage() {}

// Deprecated: Use MsgRegisterDEXAccountResponse.ProtoReflect.Descriptor instead.
func (*MsgRegisterDEXAccountResponse) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{1}
}

func (x *MsgRegisterDEXAccountResponse) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgRegisterDEXAccountResponse) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

// MsgExecuteSwap executes a token swap on a remote chain
type MsgExecuteSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID initiating the swap
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to DEX chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Token to swap from
	SourceDenom string `protobuf:"bytes,3,opt,name=source_denom,json=sourceDenom,proto3" json:"source_denom,omitempty"`
	// Token to swap to
	TargetDenom string `protobuf:"bytes,4,opt,name=target_denom,json=targetDenom,proto3" json:"target_denom,omitempty"`
	// Amount to swap
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Minimum amount out (slippage protection)
	MinAmountOut string `protobuf:"bytes,6,opt,name=min_amount_out,json=minAmountOut,proto3" json:"min_amount_out,omitempty"`
	// Optional specific route
	Route string `protobuf:"bytes,7,opt,name=route,proto3" json:"route,omitempty"`
	// UCAN authorization token
	UcanToken string `protobuf:"bytes,8,opt,name=ucan_token,json=ucanToken,proto3" json:"ucan_token,omitempty"`
	// Timeout for the swap
	Timeout *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *MsgExecuteSwap) Reset() {
	*x = MsgExecuteSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExecuteSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExecuteSwap) ProtoMessage() {}

// Deprecated: Use MsgExecuteSwap.ProtoReflect.Descriptor instead.
func (*MsgExecuteSwap) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgExecuteSwap) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MsgExecuteSwap) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MsgExecuteSwap) GetSourceDenom() string {
	if x != nil {
		return x.SourceDenom
	}
	return ""
}

func (x *MsgExecuteSwap) GetTargetDenom() string {
	if x != nil {
		return x.TargetDenom
	}
	return ""
}

func (x *MsgExecuteSwap) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MsgExecuteSwap) GetMinAmountOut() string {
	if x != nil {
		return x.MinAmountOut
	}
	return ""
}

func (x *MsgExecuteSwap) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *MsgExecuteSwap) GetUcanToken() string {
	if x != nil {
		return x.UcanToken
	}
	return ""
}

func (x *MsgExecuteSwap) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// MsgExecuteSwapResponse defines the response
type MsgExecuteSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID on remote chain
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Actual amount received
	AmountReceived string `protobuf:"bytes,2,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	// IBC packet sequence
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *MsgExecuteSwapResponse) Reset() {
	*x = MsgExecuteSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExecuteSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExecuteSwapResponse) ProtoMessage() {}

// Deprecated: Use MsgExecuteSwapResponse.ProtoReflect.Descriptor instead.
func (*MsgExecuteSwapResponse) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{3}
}

func (x *MsgExecuteSwapResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MsgExecuteSwapResponse) GetAmountReceived() string {
	if x != nil {
		return x.AmountReceived
	}
	return ""
}

func (x *MsgExecuteSwapResponse) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// MsgProvideLiquidity adds liquidity to a pool
type MsgProvideLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID providing liquidity
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to DEX chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Pool ID to add liquidity to
	PoolId string `protobuf:"bytes,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Assets to provide
	Assets []*v1beta1.Coin `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
	// Minimum shares to receive (slippage protection)
	MinShares string `protobuf:"bytes,5,opt,name=min_shares,json=minShares,proto3" json:"min_shares,omitempty"`
	// UCAN authorization token
	UcanToken string `protobuf:"bytes,6,opt,name=ucan_token,json=ucanToken,proto3" json:"ucan_token,omitempty"`
	// Timeout for the operation
	Timeout *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *MsgProvideLiquidity) Reset() {
	*x = MsgProvideLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgProvideLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgProvideLiquidity) ProtoMessage() {}

// Deprecated: Use MsgProvideLiquidity.ProtoReflect.Descriptor instead.
func (*MsgProvideLiquidity) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgProvideLiquidity) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MsgProvideLiquidity) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MsgProvideLiquidity) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *MsgProvideLiquidity) GetAssets() []*v1beta1.Coin {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *MsgProvideLiquidity) GetMinShares() string {
	if x != nil {
		return x.MinShares
	}
	return ""
}

func (x *MsgProvideLiquidity) GetUcanToken() string {
	if x != nil {
		return x.UcanToken
	}
	return ""
}

func (x *MsgProvideLiquidity) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// MsgProvideLiquidityResponse defines the response
type MsgProvideLiquidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID on remote chain
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// LP tokens received
	SharesReceived string `protobuf:"bytes,2,opt,name=shares_received,json=sharesReceived,proto3" json:"shares_received,omitempty"`
	// IBC packet sequence
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *MsgProvideLiquidityResponse) Reset() {
	*x = MsgProvideLiquidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgProvideLiquidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgProvideLiquidityResponse) ProtoMessage() {}

// Deprecated: Use MsgProvideLiquidityResponse.ProtoReflect.Descriptor instead.
func (*MsgProvideLiquidityResponse) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{5}
}

func (x *MsgProvideLiquidityResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MsgProvideLiquidityResponse) GetSharesReceived() string {
	if x != nil {
		return x.SharesReceived
	}
	return ""
}

func (x *MsgProvideLiquidityResponse) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// MsgRemoveLiquidity removes liquidity from a pool
type MsgRemoveLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID removing liquidity
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to DEX chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Pool ID to remove liquidity from
	PoolId string `protobuf:"bytes,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Amount of shares to remove
	Shares string `protobuf:"bytes,4,opt,name=shares,proto3" json:"shares,omitempty"`
	// Minimum assets to receive
	MinAmounts []*v1beta1.Coin `protobuf:"bytes,5,rep,name=min_amounts,json=minAmounts,proto3" json:"min_amounts,omitempty"`
	// UCAN authorization token
	UcanToken string `protobuf:"bytes,6,opt,name=ucan_token,json=ucanToken,proto3" json:"ucan_token,omitempty"`
	// Timeout for the operation
	Timeout *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *MsgRemoveLiquidity) Reset() {
	*x = MsgRemoveLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRemoveLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRemoveLiquidity) ProtoMessage() {}

// Deprecated: Use MsgRemoveLiquidity.ProtoReflect.Descriptor instead.
func (*MsgRemoveLiquidity) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{6}
}

func (x *MsgRemoveLiquidity) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MsgRemoveLiquidity) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MsgRemoveLiquidity) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *MsgRemoveLiquidity) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *MsgRemoveLiquidity) GetMinAmounts() []*v1beta1.Coin {
	if x != nil {
		return x.MinAmounts
	}
	return nil
}

func (x *MsgRemoveLiquidity) GetUcanToken() string {
	if x != nil {
		return x.UcanToken
	}
	return ""
}

func (x *MsgRemoveLiquidity) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// MsgRemoveLiquidityResponse defines the response
type MsgRemoveLiquidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID on remote chain
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Assets received
	AssetsReceived []*v1beta1.Coin `protobuf:"bytes,2,rep,name=assets_received,json=assetsReceived,proto3" json:"assets_received,omitempty"`
	// IBC packet sequence
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *MsgRemoveLiquidityResponse) Reset() {
	*x = MsgRemoveLiquidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRemoveLiquidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRemoveLiquidityResponse) ProtoMessage() {}

// Deprecated: Use MsgRemoveLiquidityResponse.ProtoReflect.Descriptor instead.
func (*MsgRemoveLiquidityResponse) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{7}
}

func (x *MsgRemoveLiquidityResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MsgRemoveLiquidityResponse) GetAssetsReceived() []*v1beta1.Coin {
	if x != nil {
		return x.AssetsReceived
	}
	return nil
}

func (x *MsgRemoveLiquidityResponse) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// MsgCreateLimitOrder creates a limit order
type MsgCreateLimitOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID creating the order
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to DEX chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Token to sell
	SellDenom string `protobuf:"bytes,3,opt,name=sell_denom,json=sellDenom,proto3" json:"sell_denom,omitempty"`
	// Token to buy
	BuyDenom string `protobuf:"bytes,4,opt,name=buy_denom,json=buyDenom,proto3" json:"buy_denom,omitempty"`
	// Amount to sell
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Price per unit
	Price string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// Order expiration
	Expiration *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// UCAN authorization token
	UcanToken string `protobuf:"bytes,8,opt,name=ucan_token,json=ucanToken,proto3" json:"ucan_token,omitempty"`
}

func (x *MsgCreateLimitOrder) Reset() {
	*x = MsgCreateLimitOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreateLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreateLimitOrder) ProtoMessage() {}

// Deprecated: Use MsgCreateLimitOrder.ProtoReflect.Descriptor instead.
func (*MsgCreateLimitOrder) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{8}
}

func (x *MsgCreateLimitOrder) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MsgCreateLimitOrder) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MsgCreateLimitOrder) GetSellDenom() string {
	if x != nil {
		return x.SellDenom
	}
	return ""
}

func (x *MsgCreateLimitOrder) GetBuyDenom() string {
	if x != nil {
		return x.BuyDenom
	}
	return ""
}

func (x *MsgCreateLimitOrder) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MsgCreateLimitOrder) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *MsgCreateLimitOrder) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *MsgCreateLimitOrder) GetUcanToken() string {
	if x != nil {
		return x.UcanToken
	}
	return ""
}

// MsgCreateLimitOrderResponse defines the response
type MsgCreateLimitOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order ID on remote chain
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Transaction ID
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// IBC packet sequence
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *MsgCreateLimitOrderResponse) Reset() {
	*x = MsgCreateLimitOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreateLimitOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreateLimitOrderResponse) ProtoMessage() {}

// Deprecated: Use MsgCreateLimitOrderResponse.ProtoReflect.Descriptor instead.
func (*MsgCreateLimitOrderResponse) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{9}
}

func (x *MsgCreateLimitOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *MsgCreateLimitOrderResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MsgCreateLimitOrderResponse) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// MsgCancelOrder cancels an existing order
type MsgCancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID canceling the order
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// IBC connection to DEX chain
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Order ID to cancel
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// UCAN authorization token
	UcanToken string `protobuf:"bytes,4,opt,name=ucan_token,json=ucanToken,proto3" json:"ucan_token,omitempty"`
}

func (x *MsgCancelOrder) Reset() {
	*x = MsgCancelOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCancelOrder) ProtoMessage() {}

// Deprecated: Use MsgCancelOrder.ProtoReflect.Descriptor instead.
func (*MsgCancelOrder) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{10}
}

func (x *MsgCancelOrder) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MsgCancelOrder) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MsgCancelOrder) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *MsgCancelOrder) GetUcanToken() string {
	if x != nil {
		return x.UcanToken
	}
	return ""
}

// MsgCancelOrderResponse defines the response
type MsgCancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// IBC packet sequence
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *MsgCancelOrderResponse) Reset() {
	*x = MsgCancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_v1_tx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCancelOrderResponse) ProtoMessage() {}

// Deprecated: Use MsgCancelOrderResponse.ProtoReflect.Descriptor instead.
func (*MsgCancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_dex_v1_tx_proto_rawDescGZIP(), []int{11}
}

func (x *MsgCancelOrderResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MsgCancelOrderResponse) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

var File_dex_v1_tx_proto protoreflect.FileDescriptor

var file_dex_v1_tx_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x45, 0x58, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x0c, 0x88,
	0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x03, 0x64, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x1d, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x45, 0x58, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x04,
	0x88, 0xa0, 0x1f, 0x00, 0x22, 0xa8, 0x03, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x03, 0x64, 0x69, 0x64, 0x22,
	0x7c, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x83, 0x03,
	0x0a, 0x13, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x63, 0x61, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x03,
	0x64, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x84, 0x03, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8,
	0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x03, 0x64, 0x69, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x74, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00,
	0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x89,
	0x03, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x79, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x0c, 0x88, 0xa0,
	0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x03, 0x64, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x1b, 0x4d, 0x73,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22,
	0x8f, 0x01, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x63, 0x61, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x03, 0x64, 0x69,
	0x64, 0x22, 0x53, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x32, 0xf5, 0x03, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x5a,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x45, 0x58, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x45, 0x58, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x45, 0x58, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x16, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x1a, 0x1e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x23, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x05, 0x80, 0xe7, 0xb0, 0x2a, 0x01, 0x42, 0x78,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x07, 0x54, 0x78,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6e, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x65, 0x78, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x44, 0x65, 0x78, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x06, 0x44, 0x65, 0x78, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x44, 0x65, 0x78, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x07, 0x44, 0x65, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dex_v1_tx_proto_rawDescOnce sync.Once
	file_dex_v1_tx_proto_rawDescData = file_dex_v1_tx_proto_rawDesc
)

func file_dex_v1_tx_proto_rawDescGZIP() []byte {
	file_dex_v1_tx_proto_rawDescOnce.Do(func() {
		file_dex_v1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_dex_v1_tx_proto_rawDescData)
	})
	return file_dex_v1_tx_proto_rawDescData
}

var file_dex_v1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_dex_v1_tx_proto_goTypes = []interface{}{
	(*MsgRegisterDEXAccount)(nil),         // 0: dex.v1.MsgRegisterDEXAccount
	(*MsgRegisterDEXAccountResponse)(nil), // 1: dex.v1.MsgRegisterDEXAccountResponse
	(*MsgExecuteSwap)(nil),                // 2: dex.v1.MsgExecuteSwap
	(*MsgExecuteSwapResponse)(nil),        // 3: dex.v1.MsgExecuteSwapResponse
	(*MsgProvideLiquidity)(nil),           // 4: dex.v1.MsgProvideLiquidity
	(*MsgProvideLiquidityResponse)(nil),   // 5: dex.v1.MsgProvideLiquidityResponse
	(*MsgRemoveLiquidity)(nil),            // 6: dex.v1.MsgRemoveLiquidity
	(*MsgRemoveLiquidityResponse)(nil),    // 7: dex.v1.MsgRemoveLiquidityResponse
	(*MsgCreateLimitOrder)(nil),           // 8: dex.v1.MsgCreateLimitOrder
	(*MsgCreateLimitOrderResponse)(nil),   // 9: dex.v1.MsgCreateLimitOrderResponse
	(*MsgCancelOrder)(nil),                // 10: dex.v1.MsgCancelOrder
	(*MsgCancelOrderResponse)(nil),        // 11: dex.v1.MsgCancelOrderResponse
	(*timestamppb.Timestamp)(nil),         // 12: google.protobuf.Timestamp
	(*v1beta1.Coin)(nil),                  // 13: cosmos.base.v1beta1.Coin
}
var file_dex_v1_tx_proto_depIdxs = []int32{
	12, // 0: dex.v1.MsgExecuteSwap.timeout:type_name -> google.protobuf.Timestamp
	13, // 1: dex.v1.MsgProvideLiquidity.assets:type_name -> cosmos.base.v1beta1.Coin
	12, // 2: dex.v1.MsgProvideLiquidity.timeout:type_name -> google.protobuf.Timestamp
	13, // 3: dex.v1.MsgRemoveLiquidity.min_amounts:type_name -> cosmos.base.v1beta1.Coin
	12, // 4: dex.v1.MsgRemoveLiquidity.timeout:type_name -> google.protobuf.Timestamp
	13, // 5: dex.v1.MsgRemoveLiquidityResponse.assets_received:type_name -> cosmos.base.v1beta1.Coin
	12, // 6: dex.v1.MsgCreateLimitOrder.expiration:type_name -> google.protobuf.Timestamp
	0,  // 7: dex.v1.Msg.RegisterDEXAccount:input_type -> dex.v1.MsgRegisterDEXAccount
	2,  // 8: dex.v1.Msg.ExecuteSwap:input_type -> dex.v1.MsgExecuteSwap
	4,  // 9: dex.v1.Msg.ProvideLiquidity:input_type -> dex.v1.MsgProvideLiquidity
	6,  // 10: dex.v1.Msg.RemoveLiquidity:input_type -> dex.v1.MsgRemoveLiquidity
	8,  // 11: dex.v1.Msg.CreateLimitOrder:input_type -> dex.v1.MsgCreateLimitOrder
	10, // 12: dex.v1.Msg.CancelOrder:input_type -> dex.v1.MsgCancelOrder
	1,  // 13: dex.v1.Msg.RegisterDEXAccount:output_type -> dex.v1.MsgRegisterDEXAccountResponse
	3,  // 14: dex.v1.Msg.ExecuteSwap:output_type -> dex.v1.MsgExecuteSwapResponse
	5,  // 15: dex.v1.Msg.ProvideLiquidity:output_type -> dex.v1.MsgProvideLiquidityResponse
	7,  // 16: dex.v1.Msg.RemoveLiquidity:output_type -> dex.v1.MsgRemoveLiquidityResponse
	9,  // 17: dex.v1.Msg.CreateLimitOrder:output_type -> dex.v1.MsgCreateLimitOrderResponse
	11, // 18: dex.v1.Msg.CancelOrder:output_type -> dex.v1.MsgCancelOrderResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_dex_v1_tx_proto_init() }
func file_dex_v1_tx_proto_init() {
	if File_dex_v1_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dex_v1_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRegisterDEXAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRegisterDEXAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExecuteSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExecuteSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgProvideLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgProvideLiquidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRemoveLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRemoveLiquidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreateLimitOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreateLimitOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCancelOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_v1_tx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dex_v1_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dex_v1_tx_proto_goTypes,
		DependencyIndexes: file_dex_v1_tx_proto_depIdxs,
		MessageInfos:      file_dex_v1_tx_proto_msgTypes,
	}.Build()
	File_dex_v1_tx_proto = out.File
	file_dex_v1_tx_proto_rawDesc = nil
	file_dex_v1_tx_proto_goTypes = nil
	file_dex_v1_tx_proto_depIdxs = nil
}
