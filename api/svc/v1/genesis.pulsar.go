// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package svcv1

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var _ protoreflect.List = (*_GenesisState_2_list)(nil)

type _GenesisState_2_list struct {
	list *[]*ServiceCapability
}

func (x *_GenesisState_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ServiceCapability)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ServiceCapability)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_2_list) AppendMutable() protoreflect.Value {
	v := new(ServiceCapability)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_2_list) NewElement() protoreflect.Value {
	v := new(ServiceCapability)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState              protoreflect.MessageDescriptor
	fd_GenesisState_params       protoreflect.FieldDescriptor
	fd_GenesisState_capabilities protoreflect.FieldDescriptor
)

func init() {
	file_svc_v1_genesis_proto_init()
	md_GenesisState = File_svc_v1_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_capabilities = md_GenesisState.Fields().ByName("capabilities")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_svc_v1_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if len(x.Capabilities) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_2_list{list: &x.Capabilities})
		if !f(fd_GenesisState_capabilities, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "svc.v1.GenesisState.params":
		return x.Params != nil
	case "svc.v1.GenesisState.capabilities":
		return len(x.Capabilities) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.GenesisState"))
		}
		panic(fmt.Errorf("message svc.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "svc.v1.GenesisState.params":
		x.Params = nil
	case "svc.v1.GenesisState.capabilities":
		x.Capabilities = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.GenesisState"))
		}
		panic(fmt.Errorf("message svc.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "svc.v1.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "svc.v1.GenesisState.capabilities":
		if len(x.Capabilities) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_2_list{})
		}
		listValue := &_GenesisState_2_list{list: &x.Capabilities}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.GenesisState"))
		}
		panic(fmt.Errorf("message svc.v1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "svc.v1.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "svc.v1.GenesisState.capabilities":
		lv := value.List()
		clv := lv.(*_GenesisState_2_list)
		x.Capabilities = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.GenesisState"))
		}
		panic(fmt.Errorf("message svc.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "svc.v1.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "svc.v1.GenesisState.capabilities":
		if x.Capabilities == nil {
			x.Capabilities = []*ServiceCapability{}
		}
		value := &_GenesisState_2_list{list: &x.Capabilities}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.GenesisState"))
		}
		panic(fmt.Errorf("message svc.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "svc.v1.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "svc.v1.GenesisState.capabilities":
		list := []*ServiceCapability{}
		return protoreflect.ValueOfList(&_GenesisState_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.GenesisState"))
		}
		panic(fmt.Errorf("message svc.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in svc.v1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Capabilities) > 0 {
			for _, e := range x.Capabilities {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Capabilities) > 0 {
			for iNdEx := len(x.Capabilities) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Capabilities[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Capabilities = append(x.Capabilities, &ServiceCapability{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Capabilities[len(x.Capabilities)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Params_13_list)(nil)

type _Params_13_list struct {
	list *[]string
}

func (x *_Params_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_13_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field SupportedSignatureAlgorithms as it is not of Message kind"))
}

func (x *_Params_13_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_13_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_13_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                                 protoreflect.MessageDescriptor
	fd_Params_max_services_per_account        protoreflect.FieldDescriptor
	fd_Params_max_domains_per_service         protoreflect.FieldDescriptor
	fd_Params_max_endpoints_per_service       protoreflect.FieldDescriptor
	fd_Params_domain_verification_timeout     protoreflect.FieldDescriptor
	fd_Params_service_health_check_interval   protoreflect.FieldDescriptor
	fd_Params_capability_default_expiration   protoreflect.FieldDescriptor
	fd_Params_service_registration_fee        protoreflect.FieldDescriptor
	fd_Params_domain_verification_fee         protoreflect.FieldDescriptor
	fd_Params_min_service_stake               protoreflect.FieldDescriptor
	fd_Params_max_delegation_chain_depth      protoreflect.FieldDescriptor
	fd_Params_ucan_max_lifetime               protoreflect.FieldDescriptor
	fd_Params_ucan_min_lifetime               protoreflect.FieldDescriptor
	fd_Params_supported_signature_algorithms  protoreflect.FieldDescriptor
	fd_Params_require_domain_ownership_proof  protoreflect.FieldDescriptor
	fd_Params_require_https                   protoreflect.FieldDescriptor
	fd_Params_allow_localhost                 protoreflect.FieldDescriptor
	fd_Params_max_service_description_length  protoreflect.FieldDescriptor
	fd_Params_max_registrations_per_block     protoreflect.FieldDescriptor
	fd_Params_max_updates_per_block           protoreflect.FieldDescriptor
	fd_Params_max_capability_grants_per_block protoreflect.FieldDescriptor
)

func init() {
	file_svc_v1_genesis_proto_init()
	md_Params = File_svc_v1_genesis_proto.Messages().ByName("Params")
	fd_Params_max_services_per_account = md_Params.Fields().ByName("max_services_per_account")
	fd_Params_max_domains_per_service = md_Params.Fields().ByName("max_domains_per_service")
	fd_Params_max_endpoints_per_service = md_Params.Fields().ByName("max_endpoints_per_service")
	fd_Params_domain_verification_timeout = md_Params.Fields().ByName("domain_verification_timeout")
	fd_Params_service_health_check_interval = md_Params.Fields().ByName("service_health_check_interval")
	fd_Params_capability_default_expiration = md_Params.Fields().ByName("capability_default_expiration")
	fd_Params_service_registration_fee = md_Params.Fields().ByName("service_registration_fee")
	fd_Params_domain_verification_fee = md_Params.Fields().ByName("domain_verification_fee")
	fd_Params_min_service_stake = md_Params.Fields().ByName("min_service_stake")
	fd_Params_max_delegation_chain_depth = md_Params.Fields().ByName("max_delegation_chain_depth")
	fd_Params_ucan_max_lifetime = md_Params.Fields().ByName("ucan_max_lifetime")
	fd_Params_ucan_min_lifetime = md_Params.Fields().ByName("ucan_min_lifetime")
	fd_Params_supported_signature_algorithms = md_Params.Fields().ByName("supported_signature_algorithms")
	fd_Params_require_domain_ownership_proof = md_Params.Fields().ByName("require_domain_ownership_proof")
	fd_Params_require_https = md_Params.Fields().ByName("require_https")
	fd_Params_allow_localhost = md_Params.Fields().ByName("allow_localhost")
	fd_Params_max_service_description_length = md_Params.Fields().ByName("max_service_description_length")
	fd_Params_max_registrations_per_block = md_Params.Fields().ByName("max_registrations_per_block")
	fd_Params_max_updates_per_block = md_Params.Fields().ByName("max_updates_per_block")
	fd_Params_max_capability_grants_per_block = md_Params.Fields().ByName("max_capability_grants_per_block")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_svc_v1_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MaxServicesPerAccount != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxServicesPerAccount)
		if !f(fd_Params_max_services_per_account, value) {
			return
		}
	}
	if x.MaxDomainsPerService != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxDomainsPerService)
		if !f(fd_Params_max_domains_per_service, value) {
			return
		}
	}
	if x.MaxEndpointsPerService != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxEndpointsPerService)
		if !f(fd_Params_max_endpoints_per_service, value) {
			return
		}
	}
	if x.DomainVerificationTimeout != int64(0) {
		value := protoreflect.ValueOfInt64(x.DomainVerificationTimeout)
		if !f(fd_Params_domain_verification_timeout, value) {
			return
		}
	}
	if x.ServiceHealthCheckInterval != int64(0) {
		value := protoreflect.ValueOfInt64(x.ServiceHealthCheckInterval)
		if !f(fd_Params_service_health_check_interval, value) {
			return
		}
	}
	if x.CapabilityDefaultExpiration != int64(0) {
		value := protoreflect.ValueOfInt64(x.CapabilityDefaultExpiration)
		if !f(fd_Params_capability_default_expiration, value) {
			return
		}
	}
	if x.ServiceRegistrationFee != nil {
		value := protoreflect.ValueOfMessage(x.ServiceRegistrationFee.ProtoReflect())
		if !f(fd_Params_service_registration_fee, value) {
			return
		}
	}
	if x.DomainVerificationFee != nil {
		value := protoreflect.ValueOfMessage(x.DomainVerificationFee.ProtoReflect())
		if !f(fd_Params_domain_verification_fee, value) {
			return
		}
	}
	if x.MinServiceStake != nil {
		value := protoreflect.ValueOfMessage(x.MinServiceStake.ProtoReflect())
		if !f(fd_Params_min_service_stake, value) {
			return
		}
	}
	if x.MaxDelegationChainDepth != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxDelegationChainDepth)
		if !f(fd_Params_max_delegation_chain_depth, value) {
			return
		}
	}
	if x.UcanMaxLifetime != int64(0) {
		value := protoreflect.ValueOfInt64(x.UcanMaxLifetime)
		if !f(fd_Params_ucan_max_lifetime, value) {
			return
		}
	}
	if x.UcanMinLifetime != int64(0) {
		value := protoreflect.ValueOfInt64(x.UcanMinLifetime)
		if !f(fd_Params_ucan_min_lifetime, value) {
			return
		}
	}
	if len(x.SupportedSignatureAlgorithms) != 0 {
		value := protoreflect.ValueOfList(&_Params_13_list{list: &x.SupportedSignatureAlgorithms})
		if !f(fd_Params_supported_signature_algorithms, value) {
			return
		}
	}
	if x.RequireDomainOwnershipProof != false {
		value := protoreflect.ValueOfBool(x.RequireDomainOwnershipProof)
		if !f(fd_Params_require_domain_ownership_proof, value) {
			return
		}
	}
	if x.RequireHttps != false {
		value := protoreflect.ValueOfBool(x.RequireHttps)
		if !f(fd_Params_require_https, value) {
			return
		}
	}
	if x.AllowLocalhost != false {
		value := protoreflect.ValueOfBool(x.AllowLocalhost)
		if !f(fd_Params_allow_localhost, value) {
			return
		}
	}
	if x.MaxServiceDescriptionLength != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxServiceDescriptionLength)
		if !f(fd_Params_max_service_description_length, value) {
			return
		}
	}
	if x.MaxRegistrationsPerBlock != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxRegistrationsPerBlock)
		if !f(fd_Params_max_registrations_per_block, value) {
			return
		}
	}
	if x.MaxUpdatesPerBlock != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxUpdatesPerBlock)
		if !f(fd_Params_max_updates_per_block, value) {
			return
		}
	}
	if x.MaxCapabilityGrantsPerBlock != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxCapabilityGrantsPerBlock)
		if !f(fd_Params_max_capability_grants_per_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "svc.v1.Params.max_services_per_account":
		return x.MaxServicesPerAccount != uint32(0)
	case "svc.v1.Params.max_domains_per_service":
		return x.MaxDomainsPerService != uint32(0)
	case "svc.v1.Params.max_endpoints_per_service":
		return x.MaxEndpointsPerService != uint32(0)
	case "svc.v1.Params.domain_verification_timeout":
		return x.DomainVerificationTimeout != int64(0)
	case "svc.v1.Params.service_health_check_interval":
		return x.ServiceHealthCheckInterval != int64(0)
	case "svc.v1.Params.capability_default_expiration":
		return x.CapabilityDefaultExpiration != int64(0)
	case "svc.v1.Params.service_registration_fee":
		return x.ServiceRegistrationFee != nil
	case "svc.v1.Params.domain_verification_fee":
		return x.DomainVerificationFee != nil
	case "svc.v1.Params.min_service_stake":
		return x.MinServiceStake != nil
	case "svc.v1.Params.max_delegation_chain_depth":
		return x.MaxDelegationChainDepth != uint32(0)
	case "svc.v1.Params.ucan_max_lifetime":
		return x.UcanMaxLifetime != int64(0)
	case "svc.v1.Params.ucan_min_lifetime":
		return x.UcanMinLifetime != int64(0)
	case "svc.v1.Params.supported_signature_algorithms":
		return len(x.SupportedSignatureAlgorithms) != 0
	case "svc.v1.Params.require_domain_ownership_proof":
		return x.RequireDomainOwnershipProof != false
	case "svc.v1.Params.require_https":
		return x.RequireHttps != false
	case "svc.v1.Params.allow_localhost":
		return x.AllowLocalhost != false
	case "svc.v1.Params.max_service_description_length":
		return x.MaxServiceDescriptionLength != uint32(0)
	case "svc.v1.Params.max_registrations_per_block":
		return x.MaxRegistrationsPerBlock != uint32(0)
	case "svc.v1.Params.max_updates_per_block":
		return x.MaxUpdatesPerBlock != uint32(0)
	case "svc.v1.Params.max_capability_grants_per_block":
		return x.MaxCapabilityGrantsPerBlock != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.Params"))
		}
		panic(fmt.Errorf("message svc.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "svc.v1.Params.max_services_per_account":
		x.MaxServicesPerAccount = uint32(0)
	case "svc.v1.Params.max_domains_per_service":
		x.MaxDomainsPerService = uint32(0)
	case "svc.v1.Params.max_endpoints_per_service":
		x.MaxEndpointsPerService = uint32(0)
	case "svc.v1.Params.domain_verification_timeout":
		x.DomainVerificationTimeout = int64(0)
	case "svc.v1.Params.service_health_check_interval":
		x.ServiceHealthCheckInterval = int64(0)
	case "svc.v1.Params.capability_default_expiration":
		x.CapabilityDefaultExpiration = int64(0)
	case "svc.v1.Params.service_registration_fee":
		x.ServiceRegistrationFee = nil
	case "svc.v1.Params.domain_verification_fee":
		x.DomainVerificationFee = nil
	case "svc.v1.Params.min_service_stake":
		x.MinServiceStake = nil
	case "svc.v1.Params.max_delegation_chain_depth":
		x.MaxDelegationChainDepth = uint32(0)
	case "svc.v1.Params.ucan_max_lifetime":
		x.UcanMaxLifetime = int64(0)
	case "svc.v1.Params.ucan_min_lifetime":
		x.UcanMinLifetime = int64(0)
	case "svc.v1.Params.supported_signature_algorithms":
		x.SupportedSignatureAlgorithms = nil
	case "svc.v1.Params.require_domain_ownership_proof":
		x.RequireDomainOwnershipProof = false
	case "svc.v1.Params.require_https":
		x.RequireHttps = false
	case "svc.v1.Params.allow_localhost":
		x.AllowLocalhost = false
	case "svc.v1.Params.max_service_description_length":
		x.MaxServiceDescriptionLength = uint32(0)
	case "svc.v1.Params.max_registrations_per_block":
		x.MaxRegistrationsPerBlock = uint32(0)
	case "svc.v1.Params.max_updates_per_block":
		x.MaxUpdatesPerBlock = uint32(0)
	case "svc.v1.Params.max_capability_grants_per_block":
		x.MaxCapabilityGrantsPerBlock = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.Params"))
		}
		panic(fmt.Errorf("message svc.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "svc.v1.Params.max_services_per_account":
		value := x.MaxServicesPerAccount
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.max_domains_per_service":
		value := x.MaxDomainsPerService
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.max_endpoints_per_service":
		value := x.MaxEndpointsPerService
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.domain_verification_timeout":
		value := x.DomainVerificationTimeout
		return protoreflect.ValueOfInt64(value)
	case "svc.v1.Params.service_health_check_interval":
		value := x.ServiceHealthCheckInterval
		return protoreflect.ValueOfInt64(value)
	case "svc.v1.Params.capability_default_expiration":
		value := x.CapabilityDefaultExpiration
		return protoreflect.ValueOfInt64(value)
	case "svc.v1.Params.service_registration_fee":
		value := x.ServiceRegistrationFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "svc.v1.Params.domain_verification_fee":
		value := x.DomainVerificationFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "svc.v1.Params.min_service_stake":
		value := x.MinServiceStake
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "svc.v1.Params.max_delegation_chain_depth":
		value := x.MaxDelegationChainDepth
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.ucan_max_lifetime":
		value := x.UcanMaxLifetime
		return protoreflect.ValueOfInt64(value)
	case "svc.v1.Params.ucan_min_lifetime":
		value := x.UcanMinLifetime
		return protoreflect.ValueOfInt64(value)
	case "svc.v1.Params.supported_signature_algorithms":
		if len(x.SupportedSignatureAlgorithms) == 0 {
			return protoreflect.ValueOfList(&_Params_13_list{})
		}
		listValue := &_Params_13_list{list: &x.SupportedSignatureAlgorithms}
		return protoreflect.ValueOfList(listValue)
	case "svc.v1.Params.require_domain_ownership_proof":
		value := x.RequireDomainOwnershipProof
		return protoreflect.ValueOfBool(value)
	case "svc.v1.Params.require_https":
		value := x.RequireHttps
		return protoreflect.ValueOfBool(value)
	case "svc.v1.Params.allow_localhost":
		value := x.AllowLocalhost
		return protoreflect.ValueOfBool(value)
	case "svc.v1.Params.max_service_description_length":
		value := x.MaxServiceDescriptionLength
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.max_registrations_per_block":
		value := x.MaxRegistrationsPerBlock
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.max_updates_per_block":
		value := x.MaxUpdatesPerBlock
		return protoreflect.ValueOfUint32(value)
	case "svc.v1.Params.max_capability_grants_per_block":
		value := x.MaxCapabilityGrantsPerBlock
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.Params"))
		}
		panic(fmt.Errorf("message svc.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "svc.v1.Params.max_services_per_account":
		x.MaxServicesPerAccount = uint32(value.Uint())
	case "svc.v1.Params.max_domains_per_service":
		x.MaxDomainsPerService = uint32(value.Uint())
	case "svc.v1.Params.max_endpoints_per_service":
		x.MaxEndpointsPerService = uint32(value.Uint())
	case "svc.v1.Params.domain_verification_timeout":
		x.DomainVerificationTimeout = value.Int()
	case "svc.v1.Params.service_health_check_interval":
		x.ServiceHealthCheckInterval = value.Int()
	case "svc.v1.Params.capability_default_expiration":
		x.CapabilityDefaultExpiration = value.Int()
	case "svc.v1.Params.service_registration_fee":
		x.ServiceRegistrationFee = value.Message().Interface().(*v1beta1.Coin)
	case "svc.v1.Params.domain_verification_fee":
		x.DomainVerificationFee = value.Message().Interface().(*v1beta1.Coin)
	case "svc.v1.Params.min_service_stake":
		x.MinServiceStake = value.Message().Interface().(*v1beta1.Coin)
	case "svc.v1.Params.max_delegation_chain_depth":
		x.MaxDelegationChainDepth = uint32(value.Uint())
	case "svc.v1.Params.ucan_max_lifetime":
		x.UcanMaxLifetime = value.Int()
	case "svc.v1.Params.ucan_min_lifetime":
		x.UcanMinLifetime = value.Int()
	case "svc.v1.Params.supported_signature_algorithms":
		lv := value.List()
		clv := lv.(*_Params_13_list)
		x.SupportedSignatureAlgorithms = *clv.list
	case "svc.v1.Params.require_domain_ownership_proof":
		x.RequireDomainOwnershipProof = value.Bool()
	case "svc.v1.Params.require_https":
		x.RequireHttps = value.Bool()
	case "svc.v1.Params.allow_localhost":
		x.AllowLocalhost = value.Bool()
	case "svc.v1.Params.max_service_description_length":
		x.MaxServiceDescriptionLength = uint32(value.Uint())
	case "svc.v1.Params.max_registrations_per_block":
		x.MaxRegistrationsPerBlock = uint32(value.Uint())
	case "svc.v1.Params.max_updates_per_block":
		x.MaxUpdatesPerBlock = uint32(value.Uint())
	case "svc.v1.Params.max_capability_grants_per_block":
		x.MaxCapabilityGrantsPerBlock = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.Params"))
		}
		panic(fmt.Errorf("message svc.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "svc.v1.Params.service_registration_fee":
		if x.ServiceRegistrationFee == nil {
			x.ServiceRegistrationFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ServiceRegistrationFee.ProtoReflect())
	case "svc.v1.Params.domain_verification_fee":
		if x.DomainVerificationFee == nil {
			x.DomainVerificationFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.DomainVerificationFee.ProtoReflect())
	case "svc.v1.Params.min_service_stake":
		if x.MinServiceStake == nil {
			x.MinServiceStake = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.MinServiceStake.ProtoReflect())
	case "svc.v1.Params.supported_signature_algorithms":
		if x.SupportedSignatureAlgorithms == nil {
			x.SupportedSignatureAlgorithms = []string{}
		}
		value := &_Params_13_list{list: &x.SupportedSignatureAlgorithms}
		return protoreflect.ValueOfList(value)
	case "svc.v1.Params.max_services_per_account":
		panic(fmt.Errorf("field max_services_per_account of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_domains_per_service":
		panic(fmt.Errorf("field max_domains_per_service of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_endpoints_per_service":
		panic(fmt.Errorf("field max_endpoints_per_service of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.domain_verification_timeout":
		panic(fmt.Errorf("field domain_verification_timeout of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.service_health_check_interval":
		panic(fmt.Errorf("field service_health_check_interval of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.capability_default_expiration":
		panic(fmt.Errorf("field capability_default_expiration of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_delegation_chain_depth":
		panic(fmt.Errorf("field max_delegation_chain_depth of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.ucan_max_lifetime":
		panic(fmt.Errorf("field ucan_max_lifetime of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.ucan_min_lifetime":
		panic(fmt.Errorf("field ucan_min_lifetime of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.require_domain_ownership_proof":
		panic(fmt.Errorf("field require_domain_ownership_proof of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.require_https":
		panic(fmt.Errorf("field require_https of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.allow_localhost":
		panic(fmt.Errorf("field allow_localhost of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_service_description_length":
		panic(fmt.Errorf("field max_service_description_length of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_registrations_per_block":
		panic(fmt.Errorf("field max_registrations_per_block of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_updates_per_block":
		panic(fmt.Errorf("field max_updates_per_block of message svc.v1.Params is not mutable"))
	case "svc.v1.Params.max_capability_grants_per_block":
		panic(fmt.Errorf("field max_capability_grants_per_block of message svc.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.Params"))
		}
		panic(fmt.Errorf("message svc.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "svc.v1.Params.max_services_per_account":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.max_domains_per_service":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.max_endpoints_per_service":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.domain_verification_timeout":
		return protoreflect.ValueOfInt64(int64(0))
	case "svc.v1.Params.service_health_check_interval":
		return protoreflect.ValueOfInt64(int64(0))
	case "svc.v1.Params.capability_default_expiration":
		return protoreflect.ValueOfInt64(int64(0))
	case "svc.v1.Params.service_registration_fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "svc.v1.Params.domain_verification_fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "svc.v1.Params.min_service_stake":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "svc.v1.Params.max_delegation_chain_depth":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.ucan_max_lifetime":
		return protoreflect.ValueOfInt64(int64(0))
	case "svc.v1.Params.ucan_min_lifetime":
		return protoreflect.ValueOfInt64(int64(0))
	case "svc.v1.Params.supported_signature_algorithms":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_13_list{list: &list})
	case "svc.v1.Params.require_domain_ownership_proof":
		return protoreflect.ValueOfBool(false)
	case "svc.v1.Params.require_https":
		return protoreflect.ValueOfBool(false)
	case "svc.v1.Params.allow_localhost":
		return protoreflect.ValueOfBool(false)
	case "svc.v1.Params.max_service_description_length":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.max_registrations_per_block":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.max_updates_per_block":
		return protoreflect.ValueOfUint32(uint32(0))
	case "svc.v1.Params.max_capability_grants_per_block":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: svc.v1.Params"))
		}
		panic(fmt.Errorf("message svc.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in svc.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MaxServicesPerAccount != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxServicesPerAccount))
		}
		if x.MaxDomainsPerService != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxDomainsPerService))
		}
		if x.MaxEndpointsPerService != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxEndpointsPerService))
		}
		if x.DomainVerificationTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.DomainVerificationTimeout))
		}
		if x.ServiceHealthCheckInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.ServiceHealthCheckInterval))
		}
		if x.CapabilityDefaultExpiration != 0 {
			n += 1 + runtime.Sov(uint64(x.CapabilityDefaultExpiration))
		}
		if x.ServiceRegistrationFee != nil {
			l = options.Size(x.ServiceRegistrationFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DomainVerificationFee != nil {
			l = options.Size(x.DomainVerificationFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinServiceStake != nil {
			l = options.Size(x.MinServiceStake)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxDelegationChainDepth != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxDelegationChainDepth))
		}
		if x.UcanMaxLifetime != 0 {
			n += 1 + runtime.Sov(uint64(x.UcanMaxLifetime))
		}
		if x.UcanMinLifetime != 0 {
			n += 1 + runtime.Sov(uint64(x.UcanMinLifetime))
		}
		if len(x.SupportedSignatureAlgorithms) > 0 {
			for _, s := range x.SupportedSignatureAlgorithms {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.RequireDomainOwnershipProof {
			n += 2
		}
		if x.RequireHttps {
			n += 2
		}
		if x.AllowLocalhost {
			n += 3
		}
		if x.MaxServiceDescriptionLength != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxServiceDescriptionLength))
		}
		if x.MaxRegistrationsPerBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxRegistrationsPerBlock))
		}
		if x.MaxUpdatesPerBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxUpdatesPerBlock))
		}
		if x.MaxCapabilityGrantsPerBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxCapabilityGrantsPerBlock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxCapabilityGrantsPerBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxCapabilityGrantsPerBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.MaxUpdatesPerBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxUpdatesPerBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.MaxRegistrationsPerBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxRegistrationsPerBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.MaxServiceDescriptionLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxServiceDescriptionLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.AllowLocalhost {
			i--
			if x.AllowLocalhost {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.RequireHttps {
			i--
			if x.RequireHttps {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x78
		}
		if x.RequireDomainOwnershipProof {
			i--
			if x.RequireDomainOwnershipProof {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x70
		}
		if len(x.SupportedSignatureAlgorithms) > 0 {
			for iNdEx := len(x.SupportedSignatureAlgorithms) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SupportedSignatureAlgorithms[iNdEx])
				copy(dAtA[i:], x.SupportedSignatureAlgorithms[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SupportedSignatureAlgorithms[iNdEx])))
				i--
				dAtA[i] = 0x6a
			}
		}
		if x.UcanMinLifetime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UcanMinLifetime))
			i--
			dAtA[i] = 0x60
		}
		if x.UcanMaxLifetime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UcanMaxLifetime))
			i--
			dAtA[i] = 0x58
		}
		if x.MaxDelegationChainDepth != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxDelegationChainDepth))
			i--
			dAtA[i] = 0x50
		}
		if x.MinServiceStake != nil {
			encoded, err := options.Marshal(x.MinServiceStake)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.DomainVerificationFee != nil {
			encoded, err := options.Marshal(x.DomainVerificationFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.ServiceRegistrationFee != nil {
			encoded, err := options.Marshal(x.ServiceRegistrationFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.CapabilityDefaultExpiration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CapabilityDefaultExpiration))
			i--
			dAtA[i] = 0x30
		}
		if x.ServiceHealthCheckInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ServiceHealthCheckInterval))
			i--
			dAtA[i] = 0x28
		}
		if x.DomainVerificationTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DomainVerificationTimeout))
			i--
			dAtA[i] = 0x20
		}
		if x.MaxEndpointsPerService != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxEndpointsPerService))
			i--
			dAtA[i] = 0x18
		}
		if x.MaxDomainsPerService != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxDomainsPerService))
			i--
			dAtA[i] = 0x10
		}
		if x.MaxServicesPerAccount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxServicesPerAccount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxServicesPerAccount", wireType)
				}
				x.MaxServicesPerAccount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxServicesPerAccount |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxDomainsPerService", wireType)
				}
				x.MaxDomainsPerService = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxDomainsPerService |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxEndpointsPerService", wireType)
				}
				x.MaxEndpointsPerService = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxEndpointsPerService |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DomainVerificationTimeout", wireType)
				}
				x.DomainVerificationTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DomainVerificationTimeout |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ServiceHealthCheckInterval", wireType)
				}
				x.ServiceHealthCheckInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ServiceHealthCheckInterval |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CapabilityDefaultExpiration", wireType)
				}
				x.CapabilityDefaultExpiration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CapabilityDefaultExpiration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ServiceRegistrationFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ServiceRegistrationFee == nil {
					x.ServiceRegistrationFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ServiceRegistrationFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DomainVerificationFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DomainVerificationFee == nil {
					x.DomainVerificationFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DomainVerificationFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinServiceStake", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MinServiceStake == nil {
					x.MinServiceStake = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinServiceStake); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxDelegationChainDepth", wireType)
				}
				x.MaxDelegationChainDepth = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxDelegationChainDepth |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanMaxLifetime", wireType)
				}
				x.UcanMaxLifetime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UcanMaxLifetime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UcanMinLifetime", wireType)
				}
				x.UcanMinLifetime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UcanMinLifetime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SupportedSignatureAlgorithms", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SupportedSignatureAlgorithms = append(x.SupportedSignatureAlgorithms, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequireDomainOwnershipProof", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.RequireDomainOwnershipProof = bool(v != 0)
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequireHttps", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.RequireHttps = bool(v != 0)
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AllowLocalhost", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.AllowLocalhost = bool(v != 0)
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxServiceDescriptionLength", wireType)
				}
				x.MaxServiceDescriptionLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxServiceDescriptionLength |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRegistrationsPerBlock", wireType)
				}
				x.MaxRegistrationsPerBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxRegistrationsPerBlock |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxUpdatesPerBlock", wireType)
				}
				x.MaxUpdatesPerBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxUpdatesPerBlock |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxCapabilityGrantsPerBlock", wireType)
				}
				x.MaxCapabilityGrantsPerBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxCapabilityGrantsPerBlock |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: svc/v1/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the module genesis state
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Params defines all the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Service capabilities stored in the module
	Capabilities []*ServiceCapability `protobuf:"bytes,2,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_v1_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_svc_v1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetCapabilities() []*ServiceCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Params defines the set of module parameters.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service Limits
	// Maximum number of services that can be registered per account
	MaxServicesPerAccount uint32 `protobuf:"varint,1,opt,name=max_services_per_account,json=maxServicesPerAccount,proto3" json:"max_services_per_account,omitempty"`
	// Maximum number of domains that can be bound to a single service
	MaxDomainsPerService uint32 `protobuf:"varint,2,opt,name=max_domains_per_service,json=maxDomainsPerService,proto3" json:"max_domains_per_service,omitempty"`
	// Maximum number of endpoints that can be registered per service
	MaxEndpointsPerService uint32 `protobuf:"varint,3,opt,name=max_endpoints_per_service,json=maxEndpointsPerService,proto3" json:"max_endpoints_per_service,omitempty"`
	// Timeouts and Intervals (in seconds)
	// Time allowed for domain ownership verification before expiry
	DomainVerificationTimeout int64 `protobuf:"varint,4,opt,name=domain_verification_timeout,json=domainVerificationTimeout,proto3" json:"domain_verification_timeout,omitempty"`
	// Interval between service health checks
	ServiceHealthCheckInterval int64 `protobuf:"varint,5,opt,name=service_health_check_interval,json=serviceHealthCheckInterval,proto3" json:"service_health_check_interval,omitempty"`
	// Default expiration time for capabilities if not specified
	CapabilityDefaultExpiration int64 `protobuf:"varint,6,opt,name=capability_default_expiration,json=capabilityDefaultExpiration,proto3" json:"capability_default_expiration,omitempty"`
	// Economic Parameters
	// Fee required to register a new service
	ServiceRegistrationFee *v1beta1.Coin `protobuf:"bytes,7,opt,name=service_registration_fee,json=serviceRegistrationFee,proto3" json:"service_registration_fee,omitempty"`
	// Fee required to verify domain ownership
	DomainVerificationFee *v1beta1.Coin `protobuf:"bytes,8,opt,name=domain_verification_fee,json=domainVerificationFee,proto3" json:"domain_verification_fee,omitempty"`
	// Minimum stake required to keep a service active
	MinServiceStake *v1beta1.Coin `protobuf:"bytes,9,opt,name=min_service_stake,json=minServiceStake,proto3" json:"min_service_stake,omitempty"`
	// UCAN and Capability Settings
	// Maximum depth of delegation chains for capabilities
	MaxDelegationChainDepth uint32 `protobuf:"varint,10,opt,name=max_delegation_chain_depth,json=maxDelegationChainDepth,proto3" json:"max_delegation_chain_depth,omitempty"`
	// Maximum lifetime for UCAN tokens (in seconds)
	UcanMaxLifetime int64 `protobuf:"varint,11,opt,name=ucan_max_lifetime,json=ucanMaxLifetime,proto3" json:"ucan_max_lifetime,omitempty"`
	// Minimum lifetime for UCAN tokens (in seconds)
	UcanMinLifetime int64 `protobuf:"varint,12,opt,name=ucan_min_lifetime,json=ucanMinLifetime,proto3" json:"ucan_min_lifetime,omitempty"`
	// List of supported signature algorithms for UCAN
	SupportedSignatureAlgorithms []string `protobuf:"bytes,13,rep,name=supported_signature_algorithms,json=supportedSignatureAlgorithms,proto3" json:"supported_signature_algorithms,omitempty"`
	// Validation Rules
	// Whether to require cryptographic proof of domain ownership
	RequireDomainOwnershipProof bool `protobuf:"varint,14,opt,name=require_domain_ownership_proof,json=requireDomainOwnershipProof,proto3" json:"require_domain_ownership_proof,omitempty"`
	// Whether to require HTTPS for service endpoints
	RequireHttps bool `protobuf:"varint,15,opt,name=require_https,json=requireHttps,proto3" json:"require_https,omitempty"`
	// Whether to allow localhost domains for development
	AllowLocalhost bool `protobuf:"varint,16,opt,name=allow_localhost,json=allowLocalhost,proto3" json:"allow_localhost,omitempty"`
	// Maximum length for service description text
	MaxServiceDescriptionLength uint32 `protobuf:"varint,17,opt,name=max_service_description_length,json=maxServiceDescriptionLength,proto3" json:"max_service_description_length,omitempty"`
	// Rate Limiting
	// Maximum number of service registrations allowed per block
	MaxRegistrationsPerBlock uint32 `protobuf:"varint,18,opt,name=max_registrations_per_block,json=maxRegistrationsPerBlock,proto3" json:"max_registrations_per_block,omitempty"`
	// Maximum number of service updates allowed per block
	MaxUpdatesPerBlock uint32 `protobuf:"varint,19,opt,name=max_updates_per_block,json=maxUpdatesPerBlock,proto3" json:"max_updates_per_block,omitempty"`
	// Maximum number of capability grants allowed per block
	MaxCapabilityGrantsPerBlock uint32 `protobuf:"varint,20,opt,name=max_capability_grants_per_block,json=maxCapabilityGrantsPerBlock,proto3" json:"max_capability_grants_per_block,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_v1_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_svc_v1_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *Params) GetMaxServicesPerAccount() uint32 {
	if x != nil {
		return x.MaxServicesPerAccount
	}
	return 0
}

func (x *Params) GetMaxDomainsPerService() uint32 {
	if x != nil {
		return x.MaxDomainsPerService
	}
	return 0
}

func (x *Params) GetMaxEndpointsPerService() uint32 {
	if x != nil {
		return x.MaxEndpointsPerService
	}
	return 0
}

func (x *Params) GetDomainVerificationTimeout() int64 {
	if x != nil {
		return x.DomainVerificationTimeout
	}
	return 0
}

func (x *Params) GetServiceHealthCheckInterval() int64 {
	if x != nil {
		return x.ServiceHealthCheckInterval
	}
	return 0
}

func (x *Params) GetCapabilityDefaultExpiration() int64 {
	if x != nil {
		return x.CapabilityDefaultExpiration
	}
	return 0
}

func (x *Params) GetServiceRegistrationFee() *v1beta1.Coin {
	if x != nil {
		return x.ServiceRegistrationFee
	}
	return nil
}

func (x *Params) GetDomainVerificationFee() *v1beta1.Coin {
	if x != nil {
		return x.DomainVerificationFee
	}
	return nil
}

func (x *Params) GetMinServiceStake() *v1beta1.Coin {
	if x != nil {
		return x.MinServiceStake
	}
	return nil
}

func (x *Params) GetMaxDelegationChainDepth() uint32 {
	if x != nil {
		return x.MaxDelegationChainDepth
	}
	return 0
}

func (x *Params) GetUcanMaxLifetime() int64 {
	if x != nil {
		return x.UcanMaxLifetime
	}
	return 0
}

func (x *Params) GetUcanMinLifetime() int64 {
	if x != nil {
		return x.UcanMinLifetime
	}
	return 0
}

func (x *Params) GetSupportedSignatureAlgorithms() []string {
	if x != nil {
		return x.SupportedSignatureAlgorithms
	}
	return nil
}

func (x *Params) GetRequireDomainOwnershipProof() bool {
	if x != nil {
		return x.RequireDomainOwnershipProof
	}
	return false
}

func (x *Params) GetRequireHttps() bool {
	if x != nil {
		return x.RequireHttps
	}
	return false
}

func (x *Params) GetAllowLocalhost() bool {
	if x != nil {
		return x.AllowLocalhost
	}
	return false
}

func (x *Params) GetMaxServiceDescriptionLength() uint32 {
	if x != nil {
		return x.MaxServiceDescriptionLength
	}
	return 0
}

func (x *Params) GetMaxRegistrationsPerBlock() uint32 {
	if x != nil {
		return x.MaxRegistrationsPerBlock
	}
	return 0
}

func (x *Params) GetMaxUpdatesPerBlock() uint32 {
	if x != nil {
		return x.MaxUpdatesPerBlock
	}
	return 0
}

func (x *Params) GetMaxCapabilityGrantsPerBlock() uint32 {
	if x != nil {
		return x.MaxCapabilityGrantsPerBlock
	}
	return 0
}

var File_svc_v1_genesis_proto protoreflect.FileDescriptor

var file_svc_v1_genesis_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x11,
	0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xff, 0x09, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x63,
	0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x1e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x44, 0x0a,
	0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x3a, 0x17, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x8a, 0xe7, 0xb0,
	0x2a, 0x0a, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x7d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x6f, 0x6e, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x76, 0x63, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x53, 0x76, 0x63,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x53,
	0x76, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x07, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_svc_v1_genesis_proto_rawDescOnce sync.Once
	file_svc_v1_genesis_proto_rawDescData = file_svc_v1_genesis_proto_rawDesc
)

func file_svc_v1_genesis_proto_rawDescGZIP() []byte {
	file_svc_v1_genesis_proto_rawDescOnce.Do(func() {
		file_svc_v1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_v1_genesis_proto_rawDescData)
	})
	return file_svc_v1_genesis_proto_rawDescData
}

var file_svc_v1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_svc_v1_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),      // 0: svc.v1.GenesisState
	(*Params)(nil),            // 1: svc.v1.Params
	(*ServiceCapability)(nil), // 2: svc.v1.ServiceCapability
	(*v1beta1.Coin)(nil),      // 3: cosmos.base.v1beta1.Coin
}
var file_svc_v1_genesis_proto_depIdxs = []int32{
	1, // 0: svc.v1.GenesisState.params:type_name -> svc.v1.Params
	2, // 1: svc.v1.GenesisState.capabilities:type_name -> svc.v1.ServiceCapability
	3, // 2: svc.v1.Params.service_registration_fee:type_name -> cosmos.base.v1beta1.Coin
	3, // 3: svc.v1.Params.domain_verification_fee:type_name -> cosmos.base.v1beta1.Coin
	3, // 4: svc.v1.Params.min_service_stake:type_name -> cosmos.base.v1beta1.Coin
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_svc_v1_genesis_proto_init() }
func file_svc_v1_genesis_proto_init() {
	if File_svc_v1_genesis_proto != nil {
		return
	}
	file_svc_v1_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svc_v1_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_v1_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_v1_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_svc_v1_genesis_proto_goTypes,
		DependencyIndexes: file_svc_v1_genesis_proto_depIdxs,
		MessageInfos:      file_svc_v1_genesis_proto_msgTypes,
	}.Build()
	File_svc_v1_genesis_proto = out.File
	file_svc_v1_genesis_proto_rawDesc = nil
	file_svc_v1_genesis_proto_goTypes = nil
	file_svc_v1_genesis_proto_depIdxs = nil
}
