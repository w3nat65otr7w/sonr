// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/query.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { ConcentratedPoolUserPositionRecord, OsmoEquivalentMultiplierRecord, SuperfluidAsset, SuperfluidAssetType, SuperfluidDelegationRecord } from "./superfluid_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { SyntheticLock } from "../lockup/lock_pb.js";
import { DelegationResponse } from "../../cosmos/staking/v1beta1/staking_pb.js";

/**
 * @generated from message osmosis.superfluid.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: osmosis.superfluid.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AssetTypeRequest
 */
export class AssetTypeRequest extends Message<AssetTypeRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<AssetTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AssetTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetTypeRequest {
    return new AssetTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetTypeRequest {
    return new AssetTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetTypeRequest {
    return new AssetTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssetTypeRequest | PlainMessage<AssetTypeRequest> | undefined, b: AssetTypeRequest | PlainMessage<AssetTypeRequest> | undefined): boolean {
    return proto3.util.equals(AssetTypeRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AssetTypeResponse
 */
export class AssetTypeResponse extends Message<AssetTypeResponse> {
  /**
   * @generated from field: osmosis.superfluid.SuperfluidAssetType asset_type = 1;
   */
  assetType = SuperfluidAssetType.SuperfluidAssetTypeNative;

  constructor(data?: PartialMessage<AssetTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AssetTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_type", kind: "enum", T: proto3.getEnumType(SuperfluidAssetType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetTypeResponse {
    return new AssetTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetTypeResponse {
    return new AssetTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetTypeResponse {
    return new AssetTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssetTypeResponse | PlainMessage<AssetTypeResponse> | undefined, b: AssetTypeResponse | PlainMessage<AssetTypeResponse> | undefined): boolean {
    return proto3.util.equals(AssetTypeResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AllAssetsRequest
 */
export class AllAssetsRequest extends Message<AllAssetsRequest> {
  constructor(data?: PartialMessage<AllAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AllAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllAssetsRequest {
    return new AllAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllAssetsRequest {
    return new AllAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllAssetsRequest {
    return new AllAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllAssetsRequest | PlainMessage<AllAssetsRequest> | undefined, b: AllAssetsRequest | PlainMessage<AllAssetsRequest> | undefined): boolean {
    return proto3.util.equals(AllAssetsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AllAssetsResponse
 */
export class AllAssetsResponse extends Message<AllAssetsResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidAsset assets = 1;
   */
  assets: SuperfluidAsset[] = [];

  constructor(data?: PartialMessage<AllAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AllAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: SuperfluidAsset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllAssetsResponse {
    return new AllAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllAssetsResponse {
    return new AllAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllAssetsResponse {
    return new AllAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllAssetsResponse | PlainMessage<AllAssetsResponse> | undefined, b: AllAssetsResponse | PlainMessage<AllAssetsResponse> | undefined): boolean {
    return proto3.util.equals(AllAssetsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AssetMultiplierRequest
 */
export class AssetMultiplierRequest extends Message<AssetMultiplierRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<AssetMultiplierRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AssetMultiplierRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetMultiplierRequest {
    return new AssetMultiplierRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetMultiplierRequest {
    return new AssetMultiplierRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetMultiplierRequest {
    return new AssetMultiplierRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssetMultiplierRequest | PlainMessage<AssetMultiplierRequest> | undefined, b: AssetMultiplierRequest | PlainMessage<AssetMultiplierRequest> | undefined): boolean {
    return proto3.util.equals(AssetMultiplierRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AssetMultiplierResponse
 */
export class AssetMultiplierResponse extends Message<AssetMultiplierResponse> {
  /**
   * @generated from field: osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multiplier = 1;
   */
  osmoEquivalentMultiplier?: OsmoEquivalentMultiplierRecord;

  constructor(data?: PartialMessage<AssetMultiplierResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AssetMultiplierResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "osmo_equivalent_multiplier", kind: "message", T: OsmoEquivalentMultiplierRecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetMultiplierResponse {
    return new AssetMultiplierResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetMultiplierResponse {
    return new AssetMultiplierResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetMultiplierResponse {
    return new AssetMultiplierResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssetMultiplierResponse | PlainMessage<AssetMultiplierResponse> | undefined, b: AssetMultiplierResponse | PlainMessage<AssetMultiplierResponse> | undefined): boolean {
    return proto3.util.equals(AssetMultiplierResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidIntermediaryAccountInfo
 */
export class SuperfluidIntermediaryAccountInfo extends Message<SuperfluidIntermediaryAccountInfo> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string val_addr = 2;
   */
  valAddr = "";

  /**
   * @generated from field: uint64 gauge_id = 3;
   */
  gaugeId = protoInt64.zero;

  /**
   * @generated from field: string address = 4;
   */
  address = "";

  constructor(data?: PartialMessage<SuperfluidIntermediaryAccountInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidIntermediaryAccountInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidIntermediaryAccountInfo {
    return new SuperfluidIntermediaryAccountInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidIntermediaryAccountInfo {
    return new SuperfluidIntermediaryAccountInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidIntermediaryAccountInfo {
    return new SuperfluidIntermediaryAccountInfo().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidIntermediaryAccountInfo | PlainMessage<SuperfluidIntermediaryAccountInfo> | undefined, b: SuperfluidIntermediaryAccountInfo | PlainMessage<SuperfluidIntermediaryAccountInfo> | undefined): boolean {
    return proto3.util.equals(SuperfluidIntermediaryAccountInfo, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AllIntermediaryAccountsRequest
 */
export class AllIntermediaryAccountsRequest extends Message<AllIntermediaryAccountsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<AllIntermediaryAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AllIntermediaryAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllIntermediaryAccountsRequest {
    return new AllIntermediaryAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllIntermediaryAccountsRequest {
    return new AllIntermediaryAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllIntermediaryAccountsRequest {
    return new AllIntermediaryAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllIntermediaryAccountsRequest | PlainMessage<AllIntermediaryAccountsRequest> | undefined, b: AllIntermediaryAccountsRequest | PlainMessage<AllIntermediaryAccountsRequest> | undefined): boolean {
    return proto3.util.equals(AllIntermediaryAccountsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.AllIntermediaryAccountsResponse
 */
export class AllIntermediaryAccountsResponse extends Message<AllIntermediaryAccountsResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidIntermediaryAccountInfo accounts = 1;
   */
  accounts: SuperfluidIntermediaryAccountInfo[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<AllIntermediaryAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.AllIntermediaryAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: SuperfluidIntermediaryAccountInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllIntermediaryAccountsResponse {
    return new AllIntermediaryAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllIntermediaryAccountsResponse {
    return new AllIntermediaryAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllIntermediaryAccountsResponse {
    return new AllIntermediaryAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllIntermediaryAccountsResponse | PlainMessage<AllIntermediaryAccountsResponse> | undefined, b: AllIntermediaryAccountsResponse | PlainMessage<AllIntermediaryAccountsResponse> | undefined): boolean {
    return proto3.util.equals(AllIntermediaryAccountsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.ConnectedIntermediaryAccountRequest
 */
export class ConnectedIntermediaryAccountRequest extends Message<ConnectedIntermediaryAccountRequest> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<ConnectedIntermediaryAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.ConnectedIntermediaryAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectedIntermediaryAccountRequest {
    return new ConnectedIntermediaryAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectedIntermediaryAccountRequest {
    return new ConnectedIntermediaryAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectedIntermediaryAccountRequest {
    return new ConnectedIntermediaryAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectedIntermediaryAccountRequest | PlainMessage<ConnectedIntermediaryAccountRequest> | undefined, b: ConnectedIntermediaryAccountRequest | PlainMessage<ConnectedIntermediaryAccountRequest> | undefined): boolean {
    return proto3.util.equals(ConnectedIntermediaryAccountRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.ConnectedIntermediaryAccountResponse
 */
export class ConnectedIntermediaryAccountResponse extends Message<ConnectedIntermediaryAccountResponse> {
  /**
   * @generated from field: osmosis.superfluid.SuperfluidIntermediaryAccountInfo account = 1;
   */
  account?: SuperfluidIntermediaryAccountInfo;

  constructor(data?: PartialMessage<ConnectedIntermediaryAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.ConnectedIntermediaryAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: SuperfluidIntermediaryAccountInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectedIntermediaryAccountResponse {
    return new ConnectedIntermediaryAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectedIntermediaryAccountResponse {
    return new ConnectedIntermediaryAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectedIntermediaryAccountResponse {
    return new ConnectedIntermediaryAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectedIntermediaryAccountResponse | PlainMessage<ConnectedIntermediaryAccountResponse> | undefined, b: ConnectedIntermediaryAccountResponse | PlainMessage<ConnectedIntermediaryAccountResponse> | undefined): boolean {
    return proto3.util.equals(ConnectedIntermediaryAccountResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByValidatorForDenomRequest
 */
export class QueryTotalDelegationByValidatorForDenomRequest extends Message<QueryTotalDelegationByValidatorForDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTotalDelegationByValidatorForDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryTotalDelegationByValidatorForDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalDelegationByValidatorForDenomRequest {
    return new QueryTotalDelegationByValidatorForDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalDelegationByValidatorForDenomRequest {
    return new QueryTotalDelegationByValidatorForDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalDelegationByValidatorForDenomRequest {
    return new QueryTotalDelegationByValidatorForDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalDelegationByValidatorForDenomRequest | PlainMessage<QueryTotalDelegationByValidatorForDenomRequest> | undefined, b: QueryTotalDelegationByValidatorForDenomRequest | PlainMessage<QueryTotalDelegationByValidatorForDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalDelegationByValidatorForDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByValidatorForDenomResponse
 */
export class QueryTotalDelegationByValidatorForDenomResponse extends Message<QueryTotalDelegationByValidatorForDenomResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.Delegations assets = 1;
   */
  assets: Delegations[] = [];

  constructor(data?: PartialMessage<QueryTotalDelegationByValidatorForDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryTotalDelegationByValidatorForDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: Delegations, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalDelegationByValidatorForDenomResponse {
    return new QueryTotalDelegationByValidatorForDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalDelegationByValidatorForDenomResponse {
    return new QueryTotalDelegationByValidatorForDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalDelegationByValidatorForDenomResponse {
    return new QueryTotalDelegationByValidatorForDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalDelegationByValidatorForDenomResponse | PlainMessage<QueryTotalDelegationByValidatorForDenomResponse> | undefined, b: QueryTotalDelegationByValidatorForDenomResponse | PlainMessage<QueryTotalDelegationByValidatorForDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalDelegationByValidatorForDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.Delegations
 */
export class Delegations extends Message<Delegations> {
  /**
   * @generated from field: string val_addr = 1;
   */
  valAddr = "";

  /**
   * @generated from field: string amount_sfsd = 2;
   */
  amountSfsd = "";

  /**
   * @generated from field: string osmo_equivalent = 3;
   */
  osmoEquivalent = "";

  constructor(data?: PartialMessage<Delegations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.Delegations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount_sfsd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "osmo_equivalent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delegations {
    return new Delegations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delegations {
    return new Delegations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delegations {
    return new Delegations().fromJsonString(jsonString, options);
  }

  static equals(a: Delegations | PlainMessage<Delegations> | undefined, b: Delegations | PlainMessage<Delegations> | undefined): boolean {
    return proto3.util.equals(Delegations, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.TotalSuperfluidDelegationsRequest
 */
export class TotalSuperfluidDelegationsRequest extends Message<TotalSuperfluidDelegationsRequest> {
  constructor(data?: PartialMessage<TotalSuperfluidDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.TotalSuperfluidDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalSuperfluidDelegationsRequest {
    return new TotalSuperfluidDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalSuperfluidDelegationsRequest {
    return new TotalSuperfluidDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalSuperfluidDelegationsRequest {
    return new TotalSuperfluidDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TotalSuperfluidDelegationsRequest | PlainMessage<TotalSuperfluidDelegationsRequest> | undefined, b: TotalSuperfluidDelegationsRequest | PlainMessage<TotalSuperfluidDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(TotalSuperfluidDelegationsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.TotalSuperfluidDelegationsResponse
 */
export class TotalSuperfluidDelegationsResponse extends Message<TotalSuperfluidDelegationsResponse> {
  /**
   * @generated from field: string total_delegations = 1;
   */
  totalDelegations = "";

  constructor(data?: PartialMessage<TotalSuperfluidDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.TotalSuperfluidDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_delegations", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalSuperfluidDelegationsResponse {
    return new TotalSuperfluidDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalSuperfluidDelegationsResponse {
    return new TotalSuperfluidDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalSuperfluidDelegationsResponse {
    return new TotalSuperfluidDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TotalSuperfluidDelegationsResponse | PlainMessage<TotalSuperfluidDelegationsResponse> | undefined, b: TotalSuperfluidDelegationsResponse | PlainMessage<TotalSuperfluidDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(TotalSuperfluidDelegationsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationAmountRequest
 */
export class SuperfluidDelegationAmountRequest extends Message<SuperfluidDelegationAmountRequest> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<SuperfluidDelegationAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationAmountRequest {
    return new SuperfluidDelegationAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationAmountRequest {
    return new SuperfluidDelegationAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationAmountRequest {
    return new SuperfluidDelegationAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationAmountRequest | PlainMessage<SuperfluidDelegationAmountRequest> | undefined, b: SuperfluidDelegationAmountRequest | PlainMessage<SuperfluidDelegationAmountRequest> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationAmountRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationAmountResponse
 */
export class SuperfluidDelegationAmountResponse extends Message<SuperfluidDelegationAmountResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<SuperfluidDelegationAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationAmountResponse {
    return new SuperfluidDelegationAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationAmountResponse {
    return new SuperfluidDelegationAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationAmountResponse {
    return new SuperfluidDelegationAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationAmountResponse | PlainMessage<SuperfluidDelegationAmountResponse> | undefined, b: SuperfluidDelegationAmountResponse | PlainMessage<SuperfluidDelegationAmountResponse> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationAmountResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest
 */
export class SuperfluidDelegationsByDelegatorRequest extends Message<SuperfluidDelegationsByDelegatorRequest> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<SuperfluidDelegationsByDelegatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationsByDelegatorRequest {
    return new SuperfluidDelegationsByDelegatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByDelegatorRequest {
    return new SuperfluidDelegationsByDelegatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByDelegatorRequest {
    return new SuperfluidDelegationsByDelegatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationsByDelegatorRequest | PlainMessage<SuperfluidDelegationsByDelegatorRequest> | undefined, b: SuperfluidDelegationsByDelegatorRequest | PlainMessage<SuperfluidDelegationsByDelegatorRequest> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationsByDelegatorRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse
 */
export class SuperfluidDelegationsByDelegatorResponse extends Message<SuperfluidDelegationsByDelegatorResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
   */
  superfluidDelegationRecords: SuperfluidDelegationRecord[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 2;
   */
  totalDelegatedCoins: Coin[] = [];

  /**
   * @generated from field: cosmos.base.v1beta1.Coin total_equivalent_staked_amount = 3;
   */
  totalEquivalentStakedAmount?: Coin;

  constructor(data?: PartialMessage<SuperfluidDelegationsByDelegatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
    { no: 2, name: "total_delegated_coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "total_equivalent_staked_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationsByDelegatorResponse {
    return new SuperfluidDelegationsByDelegatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByDelegatorResponse {
    return new SuperfluidDelegationsByDelegatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByDelegatorResponse {
    return new SuperfluidDelegationsByDelegatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationsByDelegatorResponse | PlainMessage<SuperfluidDelegationsByDelegatorResponse> | undefined, b: SuperfluidDelegationsByDelegatorResponse | PlainMessage<SuperfluidDelegationsByDelegatorResponse> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationsByDelegatorResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest
 */
export class SuperfluidUndelegationsByDelegatorRequest extends Message<SuperfluidUndelegationsByDelegatorRequest> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<SuperfluidUndelegationsByDelegatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidUndelegationsByDelegatorRequest {
    return new SuperfluidUndelegationsByDelegatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidUndelegationsByDelegatorRequest {
    return new SuperfluidUndelegationsByDelegatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidUndelegationsByDelegatorRequest {
    return new SuperfluidUndelegationsByDelegatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidUndelegationsByDelegatorRequest | PlainMessage<SuperfluidUndelegationsByDelegatorRequest> | undefined, b: SuperfluidUndelegationsByDelegatorRequest | PlainMessage<SuperfluidUndelegationsByDelegatorRequest> | undefined): boolean {
    return proto3.util.equals(SuperfluidUndelegationsByDelegatorRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse
 */
export class SuperfluidUndelegationsByDelegatorResponse extends Message<SuperfluidUndelegationsByDelegatorResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
   */
  superfluidDelegationRecords: SuperfluidDelegationRecord[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_undelegated_coins = 2;
   */
  totalUndelegatedCoins: Coin[] = [];

  /**
   * @generated from field: repeated osmosis.lockup.SyntheticLock synthetic_locks = 3;
   */
  syntheticLocks: SyntheticLock[] = [];

  constructor(data?: PartialMessage<SuperfluidUndelegationsByDelegatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
    { no: 2, name: "total_undelegated_coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "synthetic_locks", kind: "message", T: SyntheticLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidUndelegationsByDelegatorResponse {
    return new SuperfluidUndelegationsByDelegatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidUndelegationsByDelegatorResponse {
    return new SuperfluidUndelegationsByDelegatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidUndelegationsByDelegatorResponse {
    return new SuperfluidUndelegationsByDelegatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidUndelegationsByDelegatorResponse | PlainMessage<SuperfluidUndelegationsByDelegatorResponse> | undefined, b: SuperfluidUndelegationsByDelegatorResponse | PlainMessage<SuperfluidUndelegationsByDelegatorResponse> | undefined): boolean {
    return proto3.util.equals(SuperfluidUndelegationsByDelegatorResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest
 */
export class SuperfluidDelegationsByValidatorDenomRequest extends Message<SuperfluidDelegationsByValidatorDenomRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<SuperfluidDelegationsByValidatorDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationsByValidatorDenomRequest {
    return new SuperfluidDelegationsByValidatorDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByValidatorDenomRequest {
    return new SuperfluidDelegationsByValidatorDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByValidatorDenomRequest {
    return new SuperfluidDelegationsByValidatorDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationsByValidatorDenomRequest | PlainMessage<SuperfluidDelegationsByValidatorDenomRequest> | undefined, b: SuperfluidDelegationsByValidatorDenomRequest | PlainMessage<SuperfluidDelegationsByValidatorDenomRequest> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationsByValidatorDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse
 */
export class SuperfluidDelegationsByValidatorDenomResponse extends Message<SuperfluidDelegationsByValidatorDenomResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
   */
  superfluidDelegationRecords: SuperfluidDelegationRecord[] = [];

  constructor(data?: PartialMessage<SuperfluidDelegationsByValidatorDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationsByValidatorDenomResponse {
    return new SuperfluidDelegationsByValidatorDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByValidatorDenomResponse {
    return new SuperfluidDelegationsByValidatorDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationsByValidatorDenomResponse {
    return new SuperfluidDelegationsByValidatorDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationsByValidatorDenomResponse | PlainMessage<SuperfluidDelegationsByValidatorDenomResponse> | undefined, b: SuperfluidDelegationsByValidatorDenomResponse | PlainMessage<SuperfluidDelegationsByValidatorDenomResponse> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationsByValidatorDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest
 */
export class EstimateSuperfluidDelegatedAmountByValidatorDenomRequest extends Message<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {
    return new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {
    return new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {
    return new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest | PlainMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest> | undefined, b: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest | PlainMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse
 */
export class EstimateSuperfluidDelegatedAmountByValidatorDenomResponse extends Message<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 1;
   */
  totalDelegatedCoins: Coin[] = [];

  constructor(data?: PartialMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_delegated_coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
    return new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
    return new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
    return new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse | PlainMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> | undefined, b: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse | PlainMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> | undefined): boolean {
    return proto3.util.equals(EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByDelegatorRequest
 */
export class QueryTotalDelegationByDelegatorRequest extends Message<QueryTotalDelegationByDelegatorRequest> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryTotalDelegationByDelegatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryTotalDelegationByDelegatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalDelegationByDelegatorRequest {
    return new QueryTotalDelegationByDelegatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalDelegationByDelegatorRequest {
    return new QueryTotalDelegationByDelegatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalDelegationByDelegatorRequest {
    return new QueryTotalDelegationByDelegatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalDelegationByDelegatorRequest | PlainMessage<QueryTotalDelegationByDelegatorRequest> | undefined, b: QueryTotalDelegationByDelegatorRequest | PlainMessage<QueryTotalDelegationByDelegatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalDelegationByDelegatorRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByDelegatorResponse
 */
export class QueryTotalDelegationByDelegatorResponse extends Message<QueryTotalDelegationByDelegatorResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
   */
  superfluidDelegationRecords: SuperfluidDelegationRecord[] = [];

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_response = 2;
   */
  delegationResponse: DelegationResponse[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 3;
   */
  totalDelegatedCoins: Coin[] = [];

  /**
   * @generated from field: cosmos.base.v1beta1.Coin total_equivalent_staked_amount = 4;
   */
  totalEquivalentStakedAmount?: Coin;

  constructor(data?: PartialMessage<QueryTotalDelegationByDelegatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryTotalDelegationByDelegatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
    { no: 2, name: "delegation_response", kind: "message", T: DelegationResponse, repeated: true },
    { no: 3, name: "total_delegated_coins", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "total_equivalent_staked_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalDelegationByDelegatorResponse {
    return new QueryTotalDelegationByDelegatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalDelegationByDelegatorResponse {
    return new QueryTotalDelegationByDelegatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalDelegationByDelegatorResponse {
    return new QueryTotalDelegationByDelegatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalDelegationByDelegatorResponse | PlainMessage<QueryTotalDelegationByDelegatorResponse> | undefined, b: QueryTotalDelegationByDelegatorResponse | PlainMessage<QueryTotalDelegationByDelegatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalDelegationByDelegatorResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryUnpoolWhitelistRequest
 */
export class QueryUnpoolWhitelistRequest extends Message<QueryUnpoolWhitelistRequest> {
  constructor(data?: PartialMessage<QueryUnpoolWhitelistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryUnpoolWhitelistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnpoolWhitelistRequest {
    return new QueryUnpoolWhitelistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnpoolWhitelistRequest {
    return new QueryUnpoolWhitelistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnpoolWhitelistRequest {
    return new QueryUnpoolWhitelistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnpoolWhitelistRequest | PlainMessage<QueryUnpoolWhitelistRequest> | undefined, b: QueryUnpoolWhitelistRequest | PlainMessage<QueryUnpoolWhitelistRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnpoolWhitelistRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryUnpoolWhitelistResponse
 */
export class QueryUnpoolWhitelistResponse extends Message<QueryUnpoolWhitelistResponse> {
  /**
   * @generated from field: repeated uint64 pool_ids = 1;
   */
  poolIds: bigint[] = [];

  constructor(data?: PartialMessage<QueryUnpoolWhitelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryUnpoolWhitelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnpoolWhitelistResponse {
    return new QueryUnpoolWhitelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnpoolWhitelistResponse {
    return new QueryUnpoolWhitelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnpoolWhitelistResponse {
    return new QueryUnpoolWhitelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnpoolWhitelistResponse | PlainMessage<QueryUnpoolWhitelistResponse> | undefined, b: QueryUnpoolWhitelistResponse | PlainMessage<QueryUnpoolWhitelistResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnpoolWhitelistResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedRequest
 */
export class UserConcentratedSuperfluidPositionsDelegatedRequest extends Message<UserConcentratedSuperfluidPositionsDelegatedRequest> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<UserConcentratedSuperfluidPositionsDelegatedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserConcentratedSuperfluidPositionsDelegatedRequest {
    return new UserConcentratedSuperfluidPositionsDelegatedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsDelegatedRequest {
    return new UserConcentratedSuperfluidPositionsDelegatedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsDelegatedRequest {
    return new UserConcentratedSuperfluidPositionsDelegatedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserConcentratedSuperfluidPositionsDelegatedRequest | PlainMessage<UserConcentratedSuperfluidPositionsDelegatedRequest> | undefined, b: UserConcentratedSuperfluidPositionsDelegatedRequest | PlainMessage<UserConcentratedSuperfluidPositionsDelegatedRequest> | undefined): boolean {
    return proto3.util.equals(UserConcentratedSuperfluidPositionsDelegatedRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedResponse
 */
export class UserConcentratedSuperfluidPositionsDelegatedResponse extends Message<UserConcentratedSuperfluidPositionsDelegatedResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.ConcentratedPoolUserPositionRecord cl_pool_user_position_records = 1;
   */
  clPoolUserPositionRecords: ConcentratedPoolUserPositionRecord[] = [];

  constructor(data?: PartialMessage<UserConcentratedSuperfluidPositionsDelegatedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cl_pool_user_position_records", kind: "message", T: ConcentratedPoolUserPositionRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserConcentratedSuperfluidPositionsDelegatedResponse {
    return new UserConcentratedSuperfluidPositionsDelegatedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsDelegatedResponse {
    return new UserConcentratedSuperfluidPositionsDelegatedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsDelegatedResponse {
    return new UserConcentratedSuperfluidPositionsDelegatedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserConcentratedSuperfluidPositionsDelegatedResponse | PlainMessage<UserConcentratedSuperfluidPositionsDelegatedResponse> | undefined, b: UserConcentratedSuperfluidPositionsDelegatedResponse | PlainMessage<UserConcentratedSuperfluidPositionsDelegatedResponse> | undefined): boolean {
    return proto3.util.equals(UserConcentratedSuperfluidPositionsDelegatedResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingRequest
 */
export class UserConcentratedSuperfluidPositionsUndelegatingRequest extends Message<UserConcentratedSuperfluidPositionsUndelegatingRequest> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<UserConcentratedSuperfluidPositionsUndelegatingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserConcentratedSuperfluidPositionsUndelegatingRequest {
    return new UserConcentratedSuperfluidPositionsUndelegatingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsUndelegatingRequest {
    return new UserConcentratedSuperfluidPositionsUndelegatingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsUndelegatingRequest {
    return new UserConcentratedSuperfluidPositionsUndelegatingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserConcentratedSuperfluidPositionsUndelegatingRequest | PlainMessage<UserConcentratedSuperfluidPositionsUndelegatingRequest> | undefined, b: UserConcentratedSuperfluidPositionsUndelegatingRequest | PlainMessage<UserConcentratedSuperfluidPositionsUndelegatingRequest> | undefined): boolean {
    return proto3.util.equals(UserConcentratedSuperfluidPositionsUndelegatingRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingResponse
 */
export class UserConcentratedSuperfluidPositionsUndelegatingResponse extends Message<UserConcentratedSuperfluidPositionsUndelegatingResponse> {
  /**
   * @generated from field: repeated osmosis.superfluid.ConcentratedPoolUserPositionRecord cl_pool_user_position_records = 1;
   */
  clPoolUserPositionRecords: ConcentratedPoolUserPositionRecord[] = [];

  constructor(data?: PartialMessage<UserConcentratedSuperfluidPositionsUndelegatingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cl_pool_user_position_records", kind: "message", T: ConcentratedPoolUserPositionRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserConcentratedSuperfluidPositionsUndelegatingResponse {
    return new UserConcentratedSuperfluidPositionsUndelegatingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsUndelegatingResponse {
    return new UserConcentratedSuperfluidPositionsUndelegatingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserConcentratedSuperfluidPositionsUndelegatingResponse {
    return new UserConcentratedSuperfluidPositionsUndelegatingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserConcentratedSuperfluidPositionsUndelegatingResponse | PlainMessage<UserConcentratedSuperfluidPositionsUndelegatingResponse> | undefined, b: UserConcentratedSuperfluidPositionsUndelegatingResponse | PlainMessage<UserConcentratedSuperfluidPositionsUndelegatingResponse> | undefined): boolean {
    return proto3.util.equals(UserConcentratedSuperfluidPositionsUndelegatingResponse, a, b);
  }
}

/**
 * THIS QUERY IS TEMPORARY
 *
 * @generated from message osmosis.superfluid.QueryRestSupplyRequest
 */
export class QueryRestSupplyRequest extends Message<QueryRestSupplyRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryRestSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryRestSupplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRestSupplyRequest {
    return new QueryRestSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRestSupplyRequest {
    return new QueryRestSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRestSupplyRequest {
    return new QueryRestSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRestSupplyRequest | PlainMessage<QueryRestSupplyRequest> | undefined, b: QueryRestSupplyRequest | PlainMessage<QueryRestSupplyRequest> | undefined): boolean {
    return proto3.util.equals(QueryRestSupplyRequest, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.QueryRestSupplyResponse
 */
export class QueryRestSupplyResponse extends Message<QueryRestSupplyResponse> {
  /**
   * amount is the supply of the coin.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<QueryRestSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.QueryRestSupplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRestSupplyResponse {
    return new QueryRestSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRestSupplyResponse {
    return new QueryRestSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRestSupplyResponse {
    return new QueryRestSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRestSupplyResponse | PlainMessage<QueryRestSupplyResponse> | undefined, b: QueryRestSupplyResponse | PlainMessage<QueryRestSupplyResponse> | undefined): boolean {
    return proto3.util.equals(QueryRestSupplyResponse, a, b);
  }
}

