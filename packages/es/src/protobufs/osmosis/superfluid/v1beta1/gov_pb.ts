// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/v1beta1/gov.proto (package osmosis.superfluid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SuperfluidAsset } from "../superfluid_pb.js";

/**
 * SetSuperfluidAssetsProposal is a gov Content type to update the superfluid
 * assets
 *
 * @generated from message osmosis.superfluid.v1beta1.SetSuperfluidAssetsProposal
 */
export class SetSuperfluidAssetsProposal extends Message<SetSuperfluidAssetsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.superfluid.SuperfluidAsset assets = 3;
   */
  assets: SuperfluidAsset[] = [];

  constructor(data?: PartialMessage<SetSuperfluidAssetsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.v1beta1.SetSuperfluidAssetsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "assets", kind: "message", T: SuperfluidAsset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSuperfluidAssetsProposal {
    return new SetSuperfluidAssetsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSuperfluidAssetsProposal {
    return new SetSuperfluidAssetsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSuperfluidAssetsProposal {
    return new SetSuperfluidAssetsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: SetSuperfluidAssetsProposal | PlainMessage<SetSuperfluidAssetsProposal> | undefined, b: SetSuperfluidAssetsProposal | PlainMessage<SetSuperfluidAssetsProposal> | undefined): boolean {
    return proto3.util.equals(SetSuperfluidAssetsProposal, a, b);
  }
}

/**
 * RemoveSuperfluidAssetsProposal is a gov Content type to remove the superfluid
 * assets by denom
 *
 * @generated from message osmosis.superfluid.v1beta1.RemoveSuperfluidAssetsProposal
 */
export class RemoveSuperfluidAssetsProposal extends Message<RemoveSuperfluidAssetsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated string superfluid_asset_denoms = 3;
   */
  superfluidAssetDenoms: string[] = [];

  constructor(data?: PartialMessage<RemoveSuperfluidAssetsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.v1beta1.RemoveSuperfluidAssetsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "superfluid_asset_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveSuperfluidAssetsProposal {
    return new RemoveSuperfluidAssetsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveSuperfluidAssetsProposal {
    return new RemoveSuperfluidAssetsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveSuperfluidAssetsProposal {
    return new RemoveSuperfluidAssetsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveSuperfluidAssetsProposal | PlainMessage<RemoveSuperfluidAssetsProposal> | undefined, b: RemoveSuperfluidAssetsProposal | PlainMessage<RemoveSuperfluidAssetsProposal> | undefined): boolean {
    return proto3.util.equals(RemoveSuperfluidAssetsProposal, a, b);
  }
}

/**
 * UpdateUnpoolWhiteListProposal is a gov Content type to update the
 * allowed list of pool ids.
 *
 * @generated from message osmosis.superfluid.v1beta1.UpdateUnpoolWhiteListProposal
 */
export class UpdateUnpoolWhiteListProposal extends Message<UpdateUnpoolWhiteListProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated uint64 ids = 3;
   */
  ids: bigint[] = [];

  /**
   * @generated from field: bool is_overwrite = 4;
   */
  isOverwrite = false;

  constructor(data?: PartialMessage<UpdateUnpoolWhiteListProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.v1beta1.UpdateUnpoolWhiteListProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 4, name: "is_overwrite", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUnpoolWhiteListProposal {
    return new UpdateUnpoolWhiteListProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUnpoolWhiteListProposal {
    return new UpdateUnpoolWhiteListProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUnpoolWhiteListProposal {
    return new UpdateUnpoolWhiteListProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUnpoolWhiteListProposal | PlainMessage<UpdateUnpoolWhiteListProposal> | undefined, b: UpdateUnpoolWhiteListProposal | PlainMessage<UpdateUnpoolWhiteListProposal> | undefined): boolean {
    return proto3.util.equals(UpdateUnpoolWhiteListProposal, a, b);
  }
}

