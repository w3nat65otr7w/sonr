// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/genesis.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { LockIdIntermediaryAccountConnection, OsmoEquivalentMultiplierRecord, SuperfluidAsset, SuperfluidIntermediaryAccount } from "./superfluid_pb.js";

/**
 * GenesisState defines the module's genesis state.
 *
 * @generated from message osmosis.superfluid.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: osmosis.superfluid.Params params = 1;
   */
  params?: Params;

  /**
   * superfluid_assets defines the registered superfluid assets that have been
   * registered via governance.
   *
   * @generated from field: repeated osmosis.superfluid.SuperfluidAsset superfluid_assets = 2;
   */
  superfluidAssets: SuperfluidAsset[] = [];

  /**
   * osmo_equivalent_multipliers is the records of osmo equivalent amount of
   * each superfluid registered pool, updated every epoch.
   *
   * @generated from field: repeated osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multipliers = 3;
   */
  osmoEquivalentMultipliers: OsmoEquivalentMultiplierRecord[] = [];

  /**
   * intermediary_accounts is a secondary account for superfluid staking that
   * plays an intermediary role between validators and the delegators.
   *
   * @generated from field: repeated osmosis.superfluid.SuperfluidIntermediaryAccount intermediary_accounts = 4;
   */
  intermediaryAccounts: SuperfluidIntermediaryAccount[] = [];

  /**
   * @generated from field: repeated osmosis.superfluid.LockIdIntermediaryAccountConnection intemediary_account_connections = 5;
   */
  intemediaryAccountConnections: LockIdIntermediaryAccountConnection[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "superfluid_assets", kind: "message", T: SuperfluidAsset, repeated: true },
    { no: 3, name: "osmo_equivalent_multipliers", kind: "message", T: OsmoEquivalentMultiplierRecord, repeated: true },
    { no: 4, name: "intermediary_accounts", kind: "message", T: SuperfluidIntermediaryAccount, repeated: true },
    { no: 5, name: "intemediary_account_connections", kind: "message", T: LockIdIntermediaryAccountConnection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

