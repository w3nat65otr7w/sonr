// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file osmosis/lockup/query.proto (package osmosis.lockup, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AccountLockedCoinsRequest, AccountLockedCoinsResponse, AccountLockedDurationRequest, AccountLockedDurationResponse, AccountLockedLongerDurationDenomRequest, AccountLockedLongerDurationDenomResponse, AccountLockedLongerDurationNotUnlockingOnlyRequest, AccountLockedLongerDurationNotUnlockingOnlyResponse, AccountLockedLongerDurationRequest, AccountLockedLongerDurationResponse, AccountLockedPastTimeDenomRequest, AccountLockedPastTimeDenomResponse, AccountLockedPastTimeNotUnlockingOnlyRequest, AccountLockedPastTimeNotUnlockingOnlyResponse, AccountLockedPastTimeRequest, AccountLockedPastTimeResponse, AccountUnlockableCoinsRequest, AccountUnlockableCoinsResponse, AccountUnlockedBeforeTimeRequest, AccountUnlockedBeforeTimeResponse, AccountUnlockingCoinsRequest, AccountUnlockingCoinsResponse, LockedDenomRequest, LockedDenomResponse, LockedRequest, LockedResponse, LockRewardReceiverRequest, LockRewardReceiverResponse, ModuleBalanceRequest, ModuleBalanceResponse, ModuleLockedAmountRequest, ModuleLockedAmountResponse, NextLockIDRequest, NextLockIDResponse, QueryParamsRequest, QueryParamsResponse, SyntheticLockupByLockupIDRequest, SyntheticLockupByLockupIDResponse, SyntheticLockupsByLockupIDRequest, SyntheticLockupsByLockupIDResponse } from "./query_pb.js";

const TYPE_NAME = "osmosis.lockup.Query";

/**
 * Return full balance of the module
 *
 * @generated from rpc osmosis.lockup.Query.ModuleBalance
 */
export const QueryModuleBalanceService = {
  typeName: TYPE_NAME,
  method: "ModuleBalance",
  Request: ModuleBalanceRequest,
  Response: ModuleBalanceResponse,
} as const;

/**
 * Return locked balance of the module
 *
 * @generated from rpc osmosis.lockup.Query.ModuleLockedAmount
 */
export const QueryModuleLockedAmountService = {
  typeName: TYPE_NAME,
  method: "ModuleLockedAmount",
  Request: ModuleLockedAmountRequest,
  Response: ModuleLockedAmountResponse,
} as const;

/**
 * Returns unlockable coins which are not withdrawn yet
 *
 * @generated from rpc osmosis.lockup.Query.AccountUnlockableCoins
 */
export const QueryAccountUnlockableCoinsService = {
  typeName: TYPE_NAME,
  method: "AccountUnlockableCoins",
  Request: AccountUnlockableCoinsRequest,
  Response: AccountUnlockableCoinsResponse,
} as const;

/**
 * Returns unlocking coins
 *
 * @generated from rpc osmosis.lockup.Query.AccountUnlockingCoins
 */
export const QueryAccountUnlockingCoinsService = {
  typeName: TYPE_NAME,
  method: "AccountUnlockingCoins",
  Request: AccountUnlockingCoinsRequest,
  Response: AccountUnlockingCoinsResponse,
} as const;

/**
 * Return a locked coins that can't be withdrawn
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedCoins
 */
export const QueryAccountLockedCoinsService = {
  typeName: TYPE_NAME,
  method: "AccountLockedCoins",
  Request: AccountLockedCoinsRequest,
  Response: AccountLockedCoinsResponse,
} as const;

/**
 * Returns locked records of an account with unlock time beyond timestamp
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedPastTime
 */
export const QueryAccountLockedPastTimeService = {
  typeName: TYPE_NAME,
  method: "AccountLockedPastTime",
  Request: AccountLockedPastTimeRequest,
  Response: AccountLockedPastTimeResponse,
} as const;

/**
 * Returns locked records of an account with unlock time beyond timestamp
 * excluding tokens started unlocking
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedPastTimeNotUnlockingOnly
 */
export const QueryAccountLockedPastTimeNotUnlockingOnlyService = {
  typeName: TYPE_NAME,
  method: "AccountLockedPastTimeNotUnlockingOnly",
  Request: AccountLockedPastTimeNotUnlockingOnlyRequest,
  Response: AccountLockedPastTimeNotUnlockingOnlyResponse,
} as const;

/**
 * Returns unlocked records with unlock time before timestamp
 *
 * @generated from rpc osmosis.lockup.Query.AccountUnlockedBeforeTime
 */
export const QueryAccountUnlockedBeforeTimeService = {
  typeName: TYPE_NAME,
  method: "AccountUnlockedBeforeTime",
  Request: AccountUnlockedBeforeTimeRequest,
  Response: AccountUnlockedBeforeTimeResponse,
} as const;

/**
 * Returns lock records by address, timestamp, denom
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedPastTimeDenom
 */
export const QueryAccountLockedPastTimeDenomService = {
  typeName: TYPE_NAME,
  method: "AccountLockedPastTimeDenom",
  Request: AccountLockedPastTimeDenomRequest,
  Response: AccountLockedPastTimeDenomResponse,
} as const;

/**
 * Returns total locked per denom with longer past given time
 *
 * @generated from rpc osmosis.lockup.Query.LockedDenom
 */
export const QueryLockedDenomService = {
  typeName: TYPE_NAME,
  method: "LockedDenom",
  Request: LockedDenomRequest,
  Response: LockedDenomResponse,
} as const;

/**
 * Returns lock record by id
 *
 * @generated from rpc osmosis.lockup.Query.LockedByID
 */
export const QueryLockedByIDService = {
  typeName: TYPE_NAME,
  method: "LockedByID",
  Request: LockedRequest,
  Response: LockedResponse,
} as const;

/**
 * Returns lock record by id
 *
 * @generated from rpc osmosis.lockup.Query.LockRewardReceiver
 */
export const QueryLockRewardReceiverService = {
  typeName: TYPE_NAME,
  method: "LockRewardReceiver",
  Request: LockRewardReceiverRequest,
  Response: LockRewardReceiverResponse,
} as const;

/**
 * Returns next lock ID
 *
 * @generated from rpc osmosis.lockup.Query.NextLockID
 */
export const QueryNextLockIDService = {
  typeName: TYPE_NAME,
  method: "NextLockID",
  Request: NextLockIDRequest,
  Response: NextLockIDResponse,
} as const;

/**
 * Returns synthetic lockup by native lockup id
 * Deprecated: use SyntheticLockupByLockupID instead
 *
 * @generated from rpc osmosis.lockup.Query.SyntheticLockupsByLockupID
 * @deprecated
 */
export const QuerySyntheticLockupsByLockupIDService = {
  typeName: TYPE_NAME,
  method: "SyntheticLockupsByLockupID",
  Request: SyntheticLockupsByLockupIDRequest,
  Response: SyntheticLockupsByLockupIDResponse,
} as const;

/**
 * Returns synthetic lockup by native lockup id
 *
 * @generated from rpc osmosis.lockup.Query.SyntheticLockupByLockupID
 */
export const QuerySyntheticLockupByLockupIDService = {
  typeName: TYPE_NAME,
  method: "SyntheticLockupByLockupID",
  Request: SyntheticLockupByLockupIDRequest,
  Response: SyntheticLockupByLockupIDResponse,
} as const;

/**
 * Returns account locked records with longer duration
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedLongerDuration
 */
export const QueryAccountLockedLongerDurationService = {
  typeName: TYPE_NAME,
  method: "AccountLockedLongerDuration",
  Request: AccountLockedLongerDurationRequest,
  Response: AccountLockedLongerDurationResponse,
} as const;

/**
 * Returns account locked records with a specific duration
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedDuration
 */
export const QueryAccountLockedDurationService = {
  typeName: TYPE_NAME,
  method: "AccountLockedDuration",
  Request: AccountLockedDurationRequest,
  Response: AccountLockedDurationResponse,
} as const;

/**
 * Returns account locked records with longer duration excluding tokens
 * started unlocking
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedLongerDurationNotUnlockingOnly
 */
export const QueryAccountLockedLongerDurationNotUnlockingOnlyService = {
  typeName: TYPE_NAME,
  method: "AccountLockedLongerDurationNotUnlockingOnly",
  Request: AccountLockedLongerDurationNotUnlockingOnlyRequest,
  Response: AccountLockedLongerDurationNotUnlockingOnlyResponse,
} as const;

/**
 * Returns account's locked records for a denom with longer duration
 *
 * @generated from rpc osmosis.lockup.Query.AccountLockedLongerDurationDenom
 */
export const QueryAccountLockedLongerDurationDenomService = {
  typeName: TYPE_NAME,
  method: "AccountLockedLongerDurationDenom",
  Request: AccountLockedLongerDurationDenomRequest,
  Response: AccountLockedLongerDurationDenomResponse,
} as const;

/**
 * Params returns lockup params.
 *
 * @generated from rpc osmosis.lockup.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

