// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/lockup/query.proto (package osmosis.lockup, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { PeriodLock, SyntheticLock } from "./lock_pb.js";
import { Params } from "./params_pb.js";

/**
 * @generated from message osmosis.lockup.ModuleBalanceRequest
 */
export class ModuleBalanceRequest extends Message<ModuleBalanceRequest> {
  constructor(data?: PartialMessage<ModuleBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.ModuleBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleBalanceRequest {
    return new ModuleBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleBalanceRequest {
    return new ModuleBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleBalanceRequest {
    return new ModuleBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleBalanceRequest | PlainMessage<ModuleBalanceRequest> | undefined, b: ModuleBalanceRequest | PlainMessage<ModuleBalanceRequest> | undefined): boolean {
    return proto3.util.equals(ModuleBalanceRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.ModuleBalanceResponse
 */
export class ModuleBalanceResponse extends Message<ModuleBalanceResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<ModuleBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.ModuleBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleBalanceResponse {
    return new ModuleBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleBalanceResponse {
    return new ModuleBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleBalanceResponse {
    return new ModuleBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleBalanceResponse | PlainMessage<ModuleBalanceResponse> | undefined, b: ModuleBalanceResponse | PlainMessage<ModuleBalanceResponse> | undefined): boolean {
    return proto3.util.equals(ModuleBalanceResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.ModuleLockedAmountRequest
 */
export class ModuleLockedAmountRequest extends Message<ModuleLockedAmountRequest> {
  constructor(data?: PartialMessage<ModuleLockedAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.ModuleLockedAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleLockedAmountRequest {
    return new ModuleLockedAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleLockedAmountRequest {
    return new ModuleLockedAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleLockedAmountRequest {
    return new ModuleLockedAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleLockedAmountRequest | PlainMessage<ModuleLockedAmountRequest> | undefined, b: ModuleLockedAmountRequest | PlainMessage<ModuleLockedAmountRequest> | undefined): boolean {
    return proto3.util.equals(ModuleLockedAmountRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.ModuleLockedAmountResponse
 */
export class ModuleLockedAmountResponse extends Message<ModuleLockedAmountResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<ModuleLockedAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.ModuleLockedAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleLockedAmountResponse {
    return new ModuleLockedAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleLockedAmountResponse {
    return new ModuleLockedAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleLockedAmountResponse {
    return new ModuleLockedAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleLockedAmountResponse | PlainMessage<ModuleLockedAmountResponse> | undefined, b: ModuleLockedAmountResponse | PlainMessage<ModuleLockedAmountResponse> | undefined): boolean {
    return proto3.util.equals(ModuleLockedAmountResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountUnlockableCoinsRequest
 */
export class AccountUnlockableCoinsRequest extends Message<AccountUnlockableCoinsRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  constructor(data?: PartialMessage<AccountUnlockableCoinsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountUnlockableCoinsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUnlockableCoinsRequest {
    return new AccountUnlockableCoinsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUnlockableCoinsRequest {
    return new AccountUnlockableCoinsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUnlockableCoinsRequest {
    return new AccountUnlockableCoinsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUnlockableCoinsRequest | PlainMessage<AccountUnlockableCoinsRequest> | undefined, b: AccountUnlockableCoinsRequest | PlainMessage<AccountUnlockableCoinsRequest> | undefined): boolean {
    return proto3.util.equals(AccountUnlockableCoinsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountUnlockableCoinsResponse
 */
export class AccountUnlockableCoinsResponse extends Message<AccountUnlockableCoinsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<AccountUnlockableCoinsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountUnlockableCoinsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUnlockableCoinsResponse {
    return new AccountUnlockableCoinsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUnlockableCoinsResponse {
    return new AccountUnlockableCoinsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUnlockableCoinsResponse {
    return new AccountUnlockableCoinsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUnlockableCoinsResponse | PlainMessage<AccountUnlockableCoinsResponse> | undefined, b: AccountUnlockableCoinsResponse | PlainMessage<AccountUnlockableCoinsResponse> | undefined): boolean {
    return proto3.util.equals(AccountUnlockableCoinsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountUnlockingCoinsRequest
 */
export class AccountUnlockingCoinsRequest extends Message<AccountUnlockingCoinsRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  constructor(data?: PartialMessage<AccountUnlockingCoinsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountUnlockingCoinsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUnlockingCoinsRequest {
    return new AccountUnlockingCoinsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUnlockingCoinsRequest {
    return new AccountUnlockingCoinsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUnlockingCoinsRequest {
    return new AccountUnlockingCoinsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUnlockingCoinsRequest | PlainMessage<AccountUnlockingCoinsRequest> | undefined, b: AccountUnlockingCoinsRequest | PlainMessage<AccountUnlockingCoinsRequest> | undefined): boolean {
    return proto3.util.equals(AccountUnlockingCoinsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountUnlockingCoinsResponse
 */
export class AccountUnlockingCoinsResponse extends Message<AccountUnlockingCoinsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<AccountUnlockingCoinsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountUnlockingCoinsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUnlockingCoinsResponse {
    return new AccountUnlockingCoinsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUnlockingCoinsResponse {
    return new AccountUnlockingCoinsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUnlockingCoinsResponse {
    return new AccountUnlockingCoinsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUnlockingCoinsResponse | PlainMessage<AccountUnlockingCoinsResponse> | undefined, b: AccountUnlockingCoinsResponse | PlainMessage<AccountUnlockingCoinsResponse> | undefined): boolean {
    return proto3.util.equals(AccountUnlockingCoinsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedCoinsRequest
 */
export class AccountLockedCoinsRequest extends Message<AccountLockedCoinsRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  constructor(data?: PartialMessage<AccountLockedCoinsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedCoinsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedCoinsRequest {
    return new AccountLockedCoinsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedCoinsRequest {
    return new AccountLockedCoinsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedCoinsRequest {
    return new AccountLockedCoinsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedCoinsRequest | PlainMessage<AccountLockedCoinsRequest> | undefined, b: AccountLockedCoinsRequest | PlainMessage<AccountLockedCoinsRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedCoinsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedCoinsResponse
 */
export class AccountLockedCoinsResponse extends Message<AccountLockedCoinsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<AccountLockedCoinsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedCoinsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedCoinsResponse {
    return new AccountLockedCoinsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedCoinsResponse {
    return new AccountLockedCoinsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedCoinsResponse {
    return new AccountLockedCoinsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedCoinsResponse | PlainMessage<AccountLockedCoinsResponse> | undefined, b: AccountLockedCoinsResponse | PlainMessage<AccountLockedCoinsResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedCoinsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedPastTimeRequest
 */
export class AccountLockedPastTimeRequest extends Message<AccountLockedPastTimeRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<AccountLockedPastTimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedPastTimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedPastTimeRequest {
    return new AccountLockedPastTimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedPastTimeRequest {
    return new AccountLockedPastTimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedPastTimeRequest {
    return new AccountLockedPastTimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedPastTimeRequest | PlainMessage<AccountLockedPastTimeRequest> | undefined, b: AccountLockedPastTimeRequest | PlainMessage<AccountLockedPastTimeRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedPastTimeRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedPastTimeResponse
 */
export class AccountLockedPastTimeResponse extends Message<AccountLockedPastTimeResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedPastTimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedPastTimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedPastTimeResponse {
    return new AccountLockedPastTimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedPastTimeResponse {
    return new AccountLockedPastTimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedPastTimeResponse {
    return new AccountLockedPastTimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedPastTimeResponse | PlainMessage<AccountLockedPastTimeResponse> | undefined, b: AccountLockedPastTimeResponse | PlainMessage<AccountLockedPastTimeResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedPastTimeResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyRequest
 */
export class AccountLockedPastTimeNotUnlockingOnlyRequest extends Message<AccountLockedPastTimeNotUnlockingOnlyRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<AccountLockedPastTimeNotUnlockingOnlyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedPastTimeNotUnlockingOnlyRequest {
    return new AccountLockedPastTimeNotUnlockingOnlyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedPastTimeNotUnlockingOnlyRequest {
    return new AccountLockedPastTimeNotUnlockingOnlyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedPastTimeNotUnlockingOnlyRequest {
    return new AccountLockedPastTimeNotUnlockingOnlyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedPastTimeNotUnlockingOnlyRequest | PlainMessage<AccountLockedPastTimeNotUnlockingOnlyRequest> | undefined, b: AccountLockedPastTimeNotUnlockingOnlyRequest | PlainMessage<AccountLockedPastTimeNotUnlockingOnlyRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedPastTimeNotUnlockingOnlyRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyResponse
 */
export class AccountLockedPastTimeNotUnlockingOnlyResponse extends Message<AccountLockedPastTimeNotUnlockingOnlyResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedPastTimeNotUnlockingOnlyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedPastTimeNotUnlockingOnlyResponse {
    return new AccountLockedPastTimeNotUnlockingOnlyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedPastTimeNotUnlockingOnlyResponse {
    return new AccountLockedPastTimeNotUnlockingOnlyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedPastTimeNotUnlockingOnlyResponse {
    return new AccountLockedPastTimeNotUnlockingOnlyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedPastTimeNotUnlockingOnlyResponse | PlainMessage<AccountLockedPastTimeNotUnlockingOnlyResponse> | undefined, b: AccountLockedPastTimeNotUnlockingOnlyResponse | PlainMessage<AccountLockedPastTimeNotUnlockingOnlyResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedPastTimeNotUnlockingOnlyResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountUnlockedBeforeTimeRequest
 */
export class AccountUnlockedBeforeTimeRequest extends Message<AccountUnlockedBeforeTimeRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<AccountUnlockedBeforeTimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountUnlockedBeforeTimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUnlockedBeforeTimeRequest {
    return new AccountUnlockedBeforeTimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUnlockedBeforeTimeRequest {
    return new AccountUnlockedBeforeTimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUnlockedBeforeTimeRequest {
    return new AccountUnlockedBeforeTimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUnlockedBeforeTimeRequest | PlainMessage<AccountUnlockedBeforeTimeRequest> | undefined, b: AccountUnlockedBeforeTimeRequest | PlainMessage<AccountUnlockedBeforeTimeRequest> | undefined): boolean {
    return proto3.util.equals(AccountUnlockedBeforeTimeRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountUnlockedBeforeTimeResponse
 */
export class AccountUnlockedBeforeTimeResponse extends Message<AccountUnlockedBeforeTimeResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountUnlockedBeforeTimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountUnlockedBeforeTimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUnlockedBeforeTimeResponse {
    return new AccountUnlockedBeforeTimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUnlockedBeforeTimeResponse {
    return new AccountUnlockedBeforeTimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUnlockedBeforeTimeResponse {
    return new AccountUnlockedBeforeTimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUnlockedBeforeTimeResponse | PlainMessage<AccountUnlockedBeforeTimeResponse> | undefined, b: AccountUnlockedBeforeTimeResponse | PlainMessage<AccountUnlockedBeforeTimeResponse> | undefined): boolean {
    return proto3.util.equals(AccountUnlockedBeforeTimeResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedPastTimeDenomRequest
 */
export class AccountLockedPastTimeDenomRequest extends Message<AccountLockedPastTimeDenomRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<AccountLockedPastTimeDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedPastTimeDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedPastTimeDenomRequest {
    return new AccountLockedPastTimeDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedPastTimeDenomRequest {
    return new AccountLockedPastTimeDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedPastTimeDenomRequest {
    return new AccountLockedPastTimeDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedPastTimeDenomRequest | PlainMessage<AccountLockedPastTimeDenomRequest> | undefined, b: AccountLockedPastTimeDenomRequest | PlainMessage<AccountLockedPastTimeDenomRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedPastTimeDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedPastTimeDenomResponse
 */
export class AccountLockedPastTimeDenomResponse extends Message<AccountLockedPastTimeDenomResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedPastTimeDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedPastTimeDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedPastTimeDenomResponse {
    return new AccountLockedPastTimeDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedPastTimeDenomResponse {
    return new AccountLockedPastTimeDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedPastTimeDenomResponse {
    return new AccountLockedPastTimeDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedPastTimeDenomResponse | PlainMessage<AccountLockedPastTimeDenomResponse> | undefined, b: AccountLockedPastTimeDenomResponse | PlainMessage<AccountLockedPastTimeDenomResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedPastTimeDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.LockedDenomRequest
 */
export class LockedDenomRequest extends Message<LockedDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<LockedDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.LockedDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockedDenomRequest {
    return new LockedDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockedDenomRequest {
    return new LockedDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockedDenomRequest {
    return new LockedDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockedDenomRequest | PlainMessage<LockedDenomRequest> | undefined, b: LockedDenomRequest | PlainMessage<LockedDenomRequest> | undefined): boolean {
    return proto3.util.equals(LockedDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.LockedDenomResponse
 */
export class LockedDenomResponse extends Message<LockedDenomResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<LockedDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.LockedDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockedDenomResponse {
    return new LockedDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockedDenomResponse {
    return new LockedDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockedDenomResponse {
    return new LockedDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LockedDenomResponse | PlainMessage<LockedDenomResponse> | undefined, b: LockedDenomResponse | PlainMessage<LockedDenomResponse> | undefined): boolean {
    return proto3.util.equals(LockedDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.LockedRequest
 */
export class LockedRequest extends Message<LockedRequest> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<LockedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.LockedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockedRequest {
    return new LockedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockedRequest {
    return new LockedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockedRequest {
    return new LockedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockedRequest | PlainMessage<LockedRequest> | undefined, b: LockedRequest | PlainMessage<LockedRequest> | undefined): boolean {
    return proto3.util.equals(LockedRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.LockedResponse
 */
export class LockedResponse extends Message<LockedResponse> {
  /**
   * @generated from field: osmosis.lockup.PeriodLock lock = 1;
   */
  lock?: PeriodLock;

  constructor(data?: PartialMessage<LockedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.LockedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock", kind: "message", T: PeriodLock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockedResponse {
    return new LockedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockedResponse {
    return new LockedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockedResponse {
    return new LockedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LockedResponse | PlainMessage<LockedResponse> | undefined, b: LockedResponse | PlainMessage<LockedResponse> | undefined): boolean {
    return proto3.util.equals(LockedResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.LockRewardReceiverRequest
 */
export class LockRewardReceiverRequest extends Message<LockRewardReceiverRequest> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<LockRewardReceiverRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.LockRewardReceiverRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockRewardReceiverRequest {
    return new LockRewardReceiverRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockRewardReceiverRequest {
    return new LockRewardReceiverRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockRewardReceiverRequest {
    return new LockRewardReceiverRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockRewardReceiverRequest | PlainMessage<LockRewardReceiverRequest> | undefined, b: LockRewardReceiverRequest | PlainMessage<LockRewardReceiverRequest> | undefined): boolean {
    return proto3.util.equals(LockRewardReceiverRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.LockRewardReceiverResponse
 */
export class LockRewardReceiverResponse extends Message<LockRewardReceiverResponse> {
  /**
   * @generated from field: string reward_receiver = 1;
   */
  rewardReceiver = "";

  constructor(data?: PartialMessage<LockRewardReceiverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.LockRewardReceiverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockRewardReceiverResponse {
    return new LockRewardReceiverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockRewardReceiverResponse {
    return new LockRewardReceiverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockRewardReceiverResponse {
    return new LockRewardReceiverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LockRewardReceiverResponse | PlainMessage<LockRewardReceiverResponse> | undefined, b: LockRewardReceiverResponse | PlainMessage<LockRewardReceiverResponse> | undefined): boolean {
    return proto3.util.equals(LockRewardReceiverResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.NextLockIDRequest
 */
export class NextLockIDRequest extends Message<NextLockIDRequest> {
  constructor(data?: PartialMessage<NextLockIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.NextLockIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NextLockIDRequest {
    return new NextLockIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NextLockIDRequest {
    return new NextLockIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NextLockIDRequest {
    return new NextLockIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NextLockIDRequest | PlainMessage<NextLockIDRequest> | undefined, b: NextLockIDRequest | PlainMessage<NextLockIDRequest> | undefined): boolean {
    return proto3.util.equals(NextLockIDRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.NextLockIDResponse
 */
export class NextLockIDResponse extends Message<NextLockIDResponse> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<NextLockIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.NextLockIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NextLockIDResponse {
    return new NextLockIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NextLockIDResponse {
    return new NextLockIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NextLockIDResponse {
    return new NextLockIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NextLockIDResponse | PlainMessage<NextLockIDResponse> | undefined, b: NextLockIDResponse | PlainMessage<NextLockIDResponse> | undefined): boolean {
    return proto3.util.equals(NextLockIDResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.SyntheticLockupsByLockupIDRequest
 * @deprecated
 */
export class SyntheticLockupsByLockupIDRequest extends Message<SyntheticLockupsByLockupIDRequest> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<SyntheticLockupsByLockupIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.SyntheticLockupsByLockupIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyntheticLockupsByLockupIDRequest {
    return new SyntheticLockupsByLockupIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyntheticLockupsByLockupIDRequest {
    return new SyntheticLockupsByLockupIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyntheticLockupsByLockupIDRequest {
    return new SyntheticLockupsByLockupIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyntheticLockupsByLockupIDRequest | PlainMessage<SyntheticLockupsByLockupIDRequest> | undefined, b: SyntheticLockupsByLockupIDRequest | PlainMessage<SyntheticLockupsByLockupIDRequest> | undefined): boolean {
    return proto3.util.equals(SyntheticLockupsByLockupIDRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.SyntheticLockupsByLockupIDResponse
 * @deprecated
 */
export class SyntheticLockupsByLockupIDResponse extends Message<SyntheticLockupsByLockupIDResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.SyntheticLock synthetic_locks = 1;
   */
  syntheticLocks: SyntheticLock[] = [];

  constructor(data?: PartialMessage<SyntheticLockupsByLockupIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.SyntheticLockupsByLockupIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "synthetic_locks", kind: "message", T: SyntheticLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyntheticLockupsByLockupIDResponse {
    return new SyntheticLockupsByLockupIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyntheticLockupsByLockupIDResponse {
    return new SyntheticLockupsByLockupIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyntheticLockupsByLockupIDResponse {
    return new SyntheticLockupsByLockupIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyntheticLockupsByLockupIDResponse | PlainMessage<SyntheticLockupsByLockupIDResponse> | undefined, b: SyntheticLockupsByLockupIDResponse | PlainMessage<SyntheticLockupsByLockupIDResponse> | undefined): boolean {
    return proto3.util.equals(SyntheticLockupsByLockupIDResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.SyntheticLockupByLockupIDRequest
 */
export class SyntheticLockupByLockupIDRequest extends Message<SyntheticLockupByLockupIDRequest> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<SyntheticLockupByLockupIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.SyntheticLockupByLockupIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyntheticLockupByLockupIDRequest {
    return new SyntheticLockupByLockupIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyntheticLockupByLockupIDRequest {
    return new SyntheticLockupByLockupIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyntheticLockupByLockupIDRequest {
    return new SyntheticLockupByLockupIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyntheticLockupByLockupIDRequest | PlainMessage<SyntheticLockupByLockupIDRequest> | undefined, b: SyntheticLockupByLockupIDRequest | PlainMessage<SyntheticLockupByLockupIDRequest> | undefined): boolean {
    return proto3.util.equals(SyntheticLockupByLockupIDRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.SyntheticLockupByLockupIDResponse
 */
export class SyntheticLockupByLockupIDResponse extends Message<SyntheticLockupByLockupIDResponse> {
  /**
   * @generated from field: osmosis.lockup.SyntheticLock synthetic_lock = 1;
   */
  syntheticLock?: SyntheticLock;

  constructor(data?: PartialMessage<SyntheticLockupByLockupIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.SyntheticLockupByLockupIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "synthetic_lock", kind: "message", T: SyntheticLock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyntheticLockupByLockupIDResponse {
    return new SyntheticLockupByLockupIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyntheticLockupByLockupIDResponse {
    return new SyntheticLockupByLockupIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyntheticLockupByLockupIDResponse {
    return new SyntheticLockupByLockupIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyntheticLockupByLockupIDResponse | PlainMessage<SyntheticLockupByLockupIDResponse> | undefined, b: SyntheticLockupByLockupIDResponse | PlainMessage<SyntheticLockupByLockupIDResponse> | undefined): boolean {
    return proto3.util.equals(SyntheticLockupByLockupIDResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedLongerDurationRequest
 */
export class AccountLockedLongerDurationRequest extends Message<AccountLockedLongerDurationRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<AccountLockedLongerDurationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedLongerDurationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedLongerDurationRequest {
    return new AccountLockedLongerDurationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationRequest {
    return new AccountLockedLongerDurationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationRequest {
    return new AccountLockedLongerDurationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedLongerDurationRequest | PlainMessage<AccountLockedLongerDurationRequest> | undefined, b: AccountLockedLongerDurationRequest | PlainMessage<AccountLockedLongerDurationRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedLongerDurationRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedLongerDurationResponse
 */
export class AccountLockedLongerDurationResponse extends Message<AccountLockedLongerDurationResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedLongerDurationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedLongerDurationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedLongerDurationResponse {
    return new AccountLockedLongerDurationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationResponse {
    return new AccountLockedLongerDurationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationResponse {
    return new AccountLockedLongerDurationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedLongerDurationResponse | PlainMessage<AccountLockedLongerDurationResponse> | undefined, b: AccountLockedLongerDurationResponse | PlainMessage<AccountLockedLongerDurationResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedLongerDurationResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedDurationRequest
 */
export class AccountLockedDurationRequest extends Message<AccountLockedDurationRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<AccountLockedDurationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedDurationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedDurationRequest {
    return new AccountLockedDurationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedDurationRequest {
    return new AccountLockedDurationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedDurationRequest {
    return new AccountLockedDurationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedDurationRequest | PlainMessage<AccountLockedDurationRequest> | undefined, b: AccountLockedDurationRequest | PlainMessage<AccountLockedDurationRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedDurationRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedDurationResponse
 */
export class AccountLockedDurationResponse extends Message<AccountLockedDurationResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedDurationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedDurationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedDurationResponse {
    return new AccountLockedDurationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedDurationResponse {
    return new AccountLockedDurationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedDurationResponse {
    return new AccountLockedDurationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedDurationResponse | PlainMessage<AccountLockedDurationResponse> | undefined, b: AccountLockedDurationResponse | PlainMessage<AccountLockedDurationResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedDurationResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyRequest
 */
export class AccountLockedLongerDurationNotUnlockingOnlyRequest extends Message<AccountLockedLongerDurationNotUnlockingOnlyRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<AccountLockedLongerDurationNotUnlockingOnlyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedLongerDurationNotUnlockingOnlyRequest {
    return new AccountLockedLongerDurationNotUnlockingOnlyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationNotUnlockingOnlyRequest {
    return new AccountLockedLongerDurationNotUnlockingOnlyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationNotUnlockingOnlyRequest {
    return new AccountLockedLongerDurationNotUnlockingOnlyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedLongerDurationNotUnlockingOnlyRequest | PlainMessage<AccountLockedLongerDurationNotUnlockingOnlyRequest> | undefined, b: AccountLockedLongerDurationNotUnlockingOnlyRequest | PlainMessage<AccountLockedLongerDurationNotUnlockingOnlyRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedLongerDurationNotUnlockingOnlyRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyResponse
 */
export class AccountLockedLongerDurationNotUnlockingOnlyResponse extends Message<AccountLockedLongerDurationNotUnlockingOnlyResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedLongerDurationNotUnlockingOnlyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedLongerDurationNotUnlockingOnlyResponse {
    return new AccountLockedLongerDurationNotUnlockingOnlyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationNotUnlockingOnlyResponse {
    return new AccountLockedLongerDurationNotUnlockingOnlyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationNotUnlockingOnlyResponse {
    return new AccountLockedLongerDurationNotUnlockingOnlyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedLongerDurationNotUnlockingOnlyResponse | PlainMessage<AccountLockedLongerDurationNotUnlockingOnlyResponse> | undefined, b: AccountLockedLongerDurationNotUnlockingOnlyResponse | PlainMessage<AccountLockedLongerDurationNotUnlockingOnlyResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedLongerDurationNotUnlockingOnlyResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedLongerDurationDenomRequest
 */
export class AccountLockedLongerDurationDenomRequest extends Message<AccountLockedLongerDurationDenomRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<AccountLockedLongerDurationDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedLongerDurationDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedLongerDurationDenomRequest {
    return new AccountLockedLongerDurationDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationDenomRequest {
    return new AccountLockedLongerDurationDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationDenomRequest {
    return new AccountLockedLongerDurationDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedLongerDurationDenomRequest | PlainMessage<AccountLockedLongerDurationDenomRequest> | undefined, b: AccountLockedLongerDurationDenomRequest | PlainMessage<AccountLockedLongerDurationDenomRequest> | undefined): boolean {
    return proto3.util.equals(AccountLockedLongerDurationDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.AccountLockedLongerDurationDenomResponse
 */
export class AccountLockedLongerDurationDenomResponse extends Message<AccountLockedLongerDurationDenomResponse> {
  /**
   * @generated from field: repeated osmosis.lockup.PeriodLock locks = 1;
   */
  locks: PeriodLock[] = [];

  constructor(data?: PartialMessage<AccountLockedLongerDurationDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.AccountLockedLongerDurationDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locks", kind: "message", T: PeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLockedLongerDurationDenomResponse {
    return new AccountLockedLongerDurationDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationDenomResponse {
    return new AccountLockedLongerDurationDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLockedLongerDurationDenomResponse {
    return new AccountLockedLongerDurationDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLockedLongerDurationDenomResponse | PlainMessage<AccountLockedLongerDurationDenomResponse> | undefined, b: AccountLockedLongerDurationDenomResponse | PlainMessage<AccountLockedLongerDurationDenomResponse> | undefined): boolean {
    return proto3.util.equals(AccountLockedLongerDurationDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.lockup.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: osmosis.lockup.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.lockup.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

