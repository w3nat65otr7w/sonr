// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file osmosis/incentives/query.proto (package osmosis.incentives, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ActiveGaugesPerDenomRequest, ActiveGaugesPerDenomResponse, ActiveGaugesRequest, ActiveGaugesResponse, GaugeByIDRequest, GaugeByIDResponse, GaugesRequest, GaugesResponse, ModuleToDistributeCoinsRequest, ModuleToDistributeCoinsResponse, ParamsRequest, ParamsResponse, QueryAllGroupsGaugesRequest, QueryAllGroupsGaugesResponse, QueryAllGroupsRequest, QueryAllGroupsResponse, QueryAllGroupsWithGaugeRequest, QueryAllGroupsWithGaugeResponse, QueryCurrentWeightByGroupGaugeIDRequest, QueryCurrentWeightByGroupGaugeIDResponse, QueryExternalGaugesRequest, QueryExternalGaugesResponse, QueryGaugesByPoolIDRequest, QueryGaugesByPoolIDResponse, QueryGroupByGroupGaugeIDRequest, QueryGroupByGroupGaugeIDResponse, QueryInternalGaugesRequest, QueryInternalGaugesResponse, QueryLockableDurationsRequest, QueryLockableDurationsResponse, RewardsEstRequest, RewardsEstResponse, UpcomingGaugesPerDenomRequest, UpcomingGaugesPerDenomResponse, UpcomingGaugesRequest, UpcomingGaugesResponse } from "./query_pb.js";

const TYPE_NAME = "osmosis.incentives.Query";

/**
 * ModuleToDistributeCoins returns coins that are going to be distributed
 *
 * @generated from rpc osmosis.incentives.Query.ModuleToDistributeCoins
 */
export const QueryModuleToDistributeCoinsService = {
  typeName: TYPE_NAME,
  method: "ModuleToDistributeCoins",
  Request: ModuleToDistributeCoinsRequest,
  Response: ModuleToDistributeCoinsResponse,
} as const;

/**
 * GaugeByID returns gauges by their respective ID
 *
 * @generated from rpc osmosis.incentives.Query.GaugeByID
 */
export const QueryGaugeByIDService = {
  typeName: TYPE_NAME,
  method: "GaugeByID",
  Request: GaugeByIDRequest,
  Response: GaugeByIDResponse,
} as const;

/**
 * Gauges returns both upcoming and active gauges
 *
 * @generated from rpc osmosis.incentives.Query.Gauges
 */
export const QueryGaugesService = {
  typeName: TYPE_NAME,
  method: "Gauges",
  Request: GaugesRequest,
  Response: GaugesResponse,
} as const;

/**
 * ActiveGauges returns active gauges
 *
 * @generated from rpc osmosis.incentives.Query.ActiveGauges
 */
export const QueryActiveGaugesService = {
  typeName: TYPE_NAME,
  method: "ActiveGauges",
  Request: ActiveGaugesRequest,
  Response: ActiveGaugesResponse,
} as const;

/**
 * ActiveGaugesPerDenom returns active gauges by denom
 *
 * @generated from rpc osmosis.incentives.Query.ActiveGaugesPerDenom
 */
export const QueryActiveGaugesPerDenomService = {
  typeName: TYPE_NAME,
  method: "ActiveGaugesPerDenom",
  Request: ActiveGaugesPerDenomRequest,
  Response: ActiveGaugesPerDenomResponse,
} as const;

/**
 * Returns scheduled gauges that have not yet occurred
 *
 * @generated from rpc osmosis.incentives.Query.UpcomingGauges
 */
export const QueryUpcomingGaugesService = {
  typeName: TYPE_NAME,
  method: "UpcomingGauges",
  Request: UpcomingGaugesRequest,
  Response: UpcomingGaugesResponse,
} as const;

/**
 * UpcomingGaugesPerDenom returns scheduled gauges that have not yet occurred
 * by denom
 *
 * @generated from rpc osmosis.incentives.Query.UpcomingGaugesPerDenom
 */
export const QueryUpcomingGaugesPerDenomService = {
  typeName: TYPE_NAME,
  method: "UpcomingGaugesPerDenom",
  Request: UpcomingGaugesPerDenomRequest,
  Response: UpcomingGaugesPerDenomResponse,
} as const;

/**
 * RewardsEst returns an estimate of the rewards from now until a specified
 * time in the future The querier either provides an address or a set of locks
 * for which they want to find the associated rewards
 *
 * @generated from rpc osmosis.incentives.Query.RewardsEst
 */
export const QueryRewardsEstService = {
  typeName: TYPE_NAME,
  method: "RewardsEst",
  Request: RewardsEstRequest,
  Response: RewardsEstResponse,
} as const;

/**
 * LockableDurations returns lockable durations that are valid to distribute
 * incentives for
 *
 * @generated from rpc osmosis.incentives.Query.LockableDurations
 */
export const QueryLockableDurationsService = {
  typeName: TYPE_NAME,
  method: "LockableDurations",
  Request: QueryLockableDurationsRequest,
  Response: QueryLockableDurationsResponse,
} as const;

/**
 * AllGroups returns all groups
 *
 * @generated from rpc osmosis.incentives.Query.AllGroups
 */
export const QueryAllGroupsService = {
  typeName: TYPE_NAME,
  method: "AllGroups",
  Request: QueryAllGroupsRequest,
  Response: QueryAllGroupsResponse,
} as const;

/**
 * AllGroupsGauges returns all group gauges
 *
 * @generated from rpc osmosis.incentives.Query.AllGroupsGauges
 */
export const QueryAllGroupsGaugesService = {
  typeName: TYPE_NAME,
  method: "AllGroupsGauges",
  Request: QueryAllGroupsGaugesRequest,
  Response: QueryAllGroupsGaugesResponse,
} as const;

/**
 * AllGroupsWithGauge returns all groups with their group gauge
 *
 * @generated from rpc osmosis.incentives.Query.AllGroupsWithGauge
 */
export const QueryAllGroupsWithGaugeService = {
  typeName: TYPE_NAME,
  method: "AllGroupsWithGauge",
  Request: QueryAllGroupsWithGaugeRequest,
  Response: QueryAllGroupsWithGaugeResponse,
} as const;

/**
 * GroupByGroupGaugeID returns a group given its group gauge ID
 *
 * @generated from rpc osmosis.incentives.Query.GroupByGroupGaugeID
 */
export const QueryGroupByGroupGaugeIDService = {
  typeName: TYPE_NAME,
  method: "GroupByGroupGaugeID",
  Request: QueryGroupByGroupGaugeIDRequest,
  Response: QueryGroupByGroupGaugeIDResponse,
} as const;

/**
 * CurrentWeightByGroupGaugeID returns the current weight since the
 * the last epoch given a group gauge ID
 *
 * @generated from rpc osmosis.incentives.Query.CurrentWeightByGroupGaugeID
 */
export const QueryCurrentWeightByGroupGaugeIDService = {
  typeName: TYPE_NAME,
  method: "CurrentWeightByGroupGaugeID",
  Request: QueryCurrentWeightByGroupGaugeIDRequest,
  Response: QueryCurrentWeightByGroupGaugeIDResponse,
} as const;

/**
 * @generated from rpc osmosis.incentives.Query.InternalGauges
 */
export const QueryInternalGaugesService = {
  typeName: TYPE_NAME,
  method: "InternalGauges",
  Request: QueryInternalGaugesRequest,
  Response: QueryInternalGaugesResponse,
} as const;

/**
 * @generated from rpc osmosis.incentives.Query.ExternalGauges
 */
export const QueryExternalGaugesService = {
  typeName: TYPE_NAME,
  method: "ExternalGauges",
  Request: QueryExternalGaugesRequest,
  Response: QueryExternalGaugesResponse,
} as const;

/**
 * @generated from rpc osmosis.incentives.Query.GaugesByPoolID
 */
export const QueryGaugesByPoolIDService = {
  typeName: TYPE_NAME,
  method: "GaugesByPoolID",
  Request: QueryGaugesByPoolIDRequest,
  Response: QueryGaugesByPoolIDResponse,
} as const;

/**
 * Params returns incentives module params.
 *
 * @generated from rpc osmosis.incentives.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: ParamsRequest,
  Response: ParamsResponse,
} as const;

