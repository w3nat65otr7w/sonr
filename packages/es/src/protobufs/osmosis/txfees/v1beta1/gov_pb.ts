// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/txfees/v1beta1/gov.proto (package osmosis.txfees.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FeeToken } from "./feetoken_pb.js";

/**
 * UpdateFeeTokenProposal is a gov Content type for adding new whitelisted fee
 * token(s). It must specify a denom along with gamm pool ID to use as a spot
 * price calculator. It can be used to add new denoms to the whitelist. It can
 * also be used to update the Pool to associate with the denom. If Pool ID is
 * set to 0, it will remove the denom from the whitelisted set.
 *
 * @generated from message osmosis.txfees.v1beta1.UpdateFeeTokenProposal
 */
export class UpdateFeeTokenProposal extends Message<UpdateFeeTokenProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.txfees.v1beta1.FeeToken feetokens = 3;
   */
  feetokens: FeeToken[] = [];

  constructor(data?: PartialMessage<UpdateFeeTokenProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.txfees.v1beta1.UpdateFeeTokenProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feetokens", kind: "message", T: FeeToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFeeTokenProposal {
    return new UpdateFeeTokenProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFeeTokenProposal {
    return new UpdateFeeTokenProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFeeTokenProposal {
    return new UpdateFeeTokenProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFeeTokenProposal | PlainMessage<UpdateFeeTokenProposal> | undefined, b: UpdateFeeTokenProposal | PlainMessage<UpdateFeeTokenProposal> | undefined): boolean {
    return proto3.util.equals(UpdateFeeTokenProposal, a, b);
  }
}

