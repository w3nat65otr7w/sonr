// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/gamm/v2/query.proto (package osmosis.gamm.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Deprecated: please use alternate in x/poolmanager
 *
 * @generated from message osmosis.gamm.v2.QuerySpotPriceRequest
 * @deprecated
 */
export class QuerySpotPriceRequest extends Message<QuerySpotPriceRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string base_asset_denom = 2;
   */
  baseAssetDenom = "";

  /**
   * @generated from field: string quote_asset_denom = 3;
   */
  quoteAssetDenom = "";

  /**
   * DEPRECATED
   *
   * @generated from field: bool withSwapFee = 4 [deprecated = true];
   * @deprecated
   */
  withSwapFee = false;

  constructor(data?: PartialMessage<QuerySpotPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v2.QuerySpotPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "withSwapFee", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySpotPriceRequest | PlainMessage<QuerySpotPriceRequest> | undefined, b: QuerySpotPriceRequest | PlainMessage<QuerySpotPriceRequest> | undefined): boolean {
    return proto3.util.equals(QuerySpotPriceRequest, a, b);
  }
}

/**
 * Deprecated: please use alternate in x/poolmanager
 *
 * @generated from message osmosis.gamm.v2.QuerySpotPriceResponse
 * @deprecated
 */
export class QuerySpotPriceResponse extends Message<QuerySpotPriceResponse> {
  /**
   * String of the Dec. Ex) 10.203uatom
   *
   * @generated from field: string spot_price = 1;
   */
  spotPrice = "";

  constructor(data?: PartialMessage<QuerySpotPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v2.QuerySpotPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySpotPriceResponse | PlainMessage<QuerySpotPriceResponse> | undefined, b: QuerySpotPriceResponse | PlainMessage<QuerySpotPriceResponse> | undefined): boolean {
    return proto3.util.equals(QuerySpotPriceResponse, a, b);
  }
}

