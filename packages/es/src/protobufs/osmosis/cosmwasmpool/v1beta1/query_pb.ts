// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/cosmwasmpool/v1beta1/query.proto (package osmosis.cosmwasmpool.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * =============================== ContractInfoByPoolId
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * @generated from field: osmosis.cosmwasmpool.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

/**
 * =============================== Pools
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.PoolsRequest
 */
export class PoolsRequest extends Message<PoolsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.PoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsRequest {
    return new PoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsRequest {
    return new PoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsRequest {
    return new PoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsRequest | PlainMessage<PoolsRequest> | undefined, b: PoolsRequest | PlainMessage<PoolsRequest> | undefined): boolean {
    return proto3.util.equals(PoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.PoolsResponse
 */
export class PoolsResponse extends Message<PoolsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.PoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsResponse {
    return new PoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsResponse {
    return new PoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsResponse {
    return new PoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsResponse | PlainMessage<PoolsResponse> | undefined, b: PoolsResponse | PlainMessage<PoolsResponse> | undefined): boolean {
    return proto3.util.equals(PoolsResponse, a, b);
  }
}

/**
 * =============================== ContractInfoByPoolId
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdRequest
 */
export class ContractInfoByPoolIdRequest extends Message<ContractInfoByPoolIdRequest> {
  /**
   * pool_id is the pool id of the requested pool.
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<ContractInfoByPoolIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContractInfoByPoolIdRequest {
    return new ContractInfoByPoolIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContractInfoByPoolIdRequest {
    return new ContractInfoByPoolIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContractInfoByPoolIdRequest {
    return new ContractInfoByPoolIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ContractInfoByPoolIdRequest | PlainMessage<ContractInfoByPoolIdRequest> | undefined, b: ContractInfoByPoolIdRequest | PlainMessage<ContractInfoByPoolIdRequest> | undefined): boolean {
    return proto3.util.equals(ContractInfoByPoolIdRequest, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdResponse
 */
export class ContractInfoByPoolIdResponse extends Message<ContractInfoByPoolIdResponse> {
  /**
   * contract_address is the pool address and contract address
   * of the requested pool id.
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * code_id is the code id of the requested pool id.
   *
   * @generated from field: uint64 code_id = 2;
   */
  codeId = protoInt64.zero;

  constructor(data?: PartialMessage<ContractInfoByPoolIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContractInfoByPoolIdResponse {
    return new ContractInfoByPoolIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContractInfoByPoolIdResponse {
    return new ContractInfoByPoolIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContractInfoByPoolIdResponse {
    return new ContractInfoByPoolIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ContractInfoByPoolIdResponse | PlainMessage<ContractInfoByPoolIdResponse> | undefined, b: ContractInfoByPoolIdResponse | PlainMessage<ContractInfoByPoolIdResponse> | undefined): boolean {
    return proto3.util.equals(ContractInfoByPoolIdResponse, a, b);
  }
}

/**
 * =============================== PoolRawFilteredState
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.PoolRawFilteredStateRequest
 */
export class PoolRawFilteredStateRequest extends Message<PoolRawFilteredStateRequest> {
  /**
   * pool_id is the pool id of the requested pool.
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * key_filter is the key filter of the requested pool.
   *
   * @generated from field: string key_filter = 2;
   */
  keyFilter = "";

  /**
   * value_filter is the value filter of the requested pool.
   *
   * @generated from field: string value_filter = 3;
   */
  valueFilter = "";

  constructor(data?: PartialMessage<PoolRawFilteredStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.PoolRawFilteredStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "key_filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value_filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRawFilteredStateRequest {
    return new PoolRawFilteredStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRawFilteredStateRequest {
    return new PoolRawFilteredStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRawFilteredStateRequest {
    return new PoolRawFilteredStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRawFilteredStateRequest | PlainMessage<PoolRawFilteredStateRequest> | undefined, b: PoolRawFilteredStateRequest | PlainMessage<PoolRawFilteredStateRequest> | undefined): boolean {
    return proto3.util.equals(PoolRawFilteredStateRequest, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.PoolRawFilteredStateResponse
 */
export class PoolRawFilteredStateResponse extends Message<PoolRawFilteredStateResponse> {
  /**
   * values represents the list of values in the pool.
   *
   * @generated from field: repeated bytes values = 1;
   */
  values: Uint8Array[] = [];

  constructor(data?: PartialMessage<PoolRawFilteredStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.PoolRawFilteredStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRawFilteredStateResponse {
    return new PoolRawFilteredStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRawFilteredStateResponse {
    return new PoolRawFilteredStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRawFilteredStateResponse {
    return new PoolRawFilteredStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRawFilteredStateResponse | PlainMessage<PoolRawFilteredStateResponse> | undefined, b: PoolRawFilteredStateResponse | PlainMessage<PoolRawFilteredStateResponse> | undefined): boolean {
    return proto3.util.equals(PoolRawFilteredStateResponse, a, b);
  }
}

