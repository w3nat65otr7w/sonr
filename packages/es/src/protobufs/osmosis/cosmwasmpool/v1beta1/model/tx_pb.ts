// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/cosmwasmpool/v1beta1/model/tx.proto (package osmosis.cosmwasmpool.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ===================== MsgCreateCosmwasmPool
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPool
 */
export class MsgCreateCosmWasmPool extends Message<MsgCreateCosmWasmPool> {
  /**
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  /**
   * @generated from field: bytes instantiate_msg = 2;
   */
  instantiateMsg = new Uint8Array(0);

  /**
   * @generated from field: string sender = 3;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgCreateCosmWasmPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "instantiate_msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateCosmWasmPool {
    return new MsgCreateCosmWasmPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateCosmWasmPool {
    return new MsgCreateCosmWasmPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateCosmWasmPool {
    return new MsgCreateCosmWasmPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateCosmWasmPool | PlainMessage<MsgCreateCosmWasmPool> | undefined, b: MsgCreateCosmWasmPool | PlainMessage<MsgCreateCosmWasmPool> | undefined): boolean {
    return proto3.util.equals(MsgCreateCosmWasmPool, a, b);
  }
}

/**
 * Returns a unique poolID to identify the pool with.
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPoolResponse
 */
export class MsgCreateCosmWasmPoolResponse extends Message<MsgCreateCosmWasmPoolResponse> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateCosmWasmPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateCosmWasmPoolResponse {
    return new MsgCreateCosmWasmPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateCosmWasmPoolResponse {
    return new MsgCreateCosmWasmPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateCosmWasmPoolResponse {
    return new MsgCreateCosmWasmPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateCosmWasmPoolResponse | PlainMessage<MsgCreateCosmWasmPoolResponse> | undefined, b: MsgCreateCosmWasmPoolResponse | PlainMessage<MsgCreateCosmWasmPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateCosmWasmPoolResponse, a, b);
  }
}

