// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/cosmwasmpool/v1beta1/model/pool_query_msg.proto (package osmosis.cosmwasmpool.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * ===================== GetSwapFeeQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg
 */
export class GetSwapFeeQueryMsg extends Message<GetSwapFeeQueryMsg> {
  /**
   * get_swap_fee is the query structure to get swap fee.
   *
   * @generated from field: osmosis.cosmwasmpool.v1beta1.EmptyStruct get_swap_fee = 1;
   */
  getSwapFee?: EmptyStruct;

  constructor(data?: PartialMessage<GetSwapFeeQueryMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "get_swap_fee", kind: "message", T: EmptyStruct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSwapFeeQueryMsg {
    return new GetSwapFeeQueryMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSwapFeeQueryMsg {
    return new GetSwapFeeQueryMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSwapFeeQueryMsg {
    return new GetSwapFeeQueryMsg().fromJsonString(jsonString, options);
  }

  static equals(a: GetSwapFeeQueryMsg | PlainMessage<GetSwapFeeQueryMsg> | undefined, b: GetSwapFeeQueryMsg | PlainMessage<GetSwapFeeQueryMsg> | undefined): boolean {
    return proto3.util.equals(GetSwapFeeQueryMsg, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse
 */
export class GetSwapFeeQueryMsgResponse extends Message<GetSwapFeeQueryMsgResponse> {
  /**
   * swap_fee is the swap fee for this swap estimate.
   *
   * @generated from field: string swap_fee = 3;
   */
  swapFee = "";

  constructor(data?: PartialMessage<GetSwapFeeQueryMsgResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSwapFeeQueryMsgResponse {
    return new GetSwapFeeQueryMsgResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSwapFeeQueryMsgResponse {
    return new GetSwapFeeQueryMsgResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSwapFeeQueryMsgResponse {
    return new GetSwapFeeQueryMsgResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSwapFeeQueryMsgResponse | PlainMessage<GetSwapFeeQueryMsgResponse> | undefined, b: GetSwapFeeQueryMsgResponse | PlainMessage<GetSwapFeeQueryMsgResponse> | undefined): boolean {
    return proto3.util.equals(GetSwapFeeQueryMsgResponse, a, b);
  }
}

/**
 * ===================== SpotPriceQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.SpotPrice
 */
export class SpotPrice extends Message<SpotPrice> {
  /**
   * quote_asset_denom is the quote asset of the spot query.
   *
   * @generated from field: string quote_asset_denom = 1;
   */
  quoteAssetDenom = "";

  /**
   * base_asset_denom is the base asset of the spot query.
   *
   * @generated from field: string base_asset_denom = 2;
   */
  baseAssetDenom = "";

  constructor(data?: PartialMessage<SpotPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.SpotPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quote_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotPrice {
    return new SpotPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotPrice {
    return new SpotPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotPrice {
    return new SpotPrice().fromJsonString(jsonString, options);
  }

  static equals(a: SpotPrice | PlainMessage<SpotPrice> | undefined, b: SpotPrice | PlainMessage<SpotPrice> | undefined): boolean {
    return proto3.util.equals(SpotPrice, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg
 */
export class SpotPriceQueryMsg extends Message<SpotPriceQueryMsg> {
  /**
   * spot_price is the structure containing request field of the spot price
   * query message.
   *
   * @generated from field: osmosis.cosmwasmpool.v1beta1.SpotPrice spot_price = 1;
   */
  spotPrice?: SpotPrice;

  constructor(data?: PartialMessage<SpotPriceQueryMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "message", T: SpotPrice },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotPriceQueryMsg {
    return new SpotPriceQueryMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotPriceQueryMsg {
    return new SpotPriceQueryMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotPriceQueryMsg {
    return new SpotPriceQueryMsg().fromJsonString(jsonString, options);
  }

  static equals(a: SpotPriceQueryMsg | PlainMessage<SpotPriceQueryMsg> | undefined, b: SpotPriceQueryMsg | PlainMessage<SpotPriceQueryMsg> | undefined): boolean {
    return proto3.util.equals(SpotPriceQueryMsg, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse
 */
export class SpotPriceQueryMsgResponse extends Message<SpotPriceQueryMsgResponse> {
  /**
   * spot_price is the spot price returned.
   *
   * @generated from field: string spot_price = 1;
   */
  spotPrice = "";

  constructor(data?: PartialMessage<SpotPriceQueryMsgResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotPriceQueryMsgResponse {
    return new SpotPriceQueryMsgResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotPriceQueryMsgResponse {
    return new SpotPriceQueryMsgResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotPriceQueryMsgResponse {
    return new SpotPriceQueryMsgResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpotPriceQueryMsgResponse | PlainMessage<SpotPriceQueryMsgResponse> | undefined, b: SpotPriceQueryMsgResponse | PlainMessage<SpotPriceQueryMsgResponse> | undefined): boolean {
    return proto3.util.equals(SpotPriceQueryMsgResponse, a, b);
  }
}

/**
 * ===================== GetTotalPoolLiquidityQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.EmptyStruct
 */
export class EmptyStruct extends Message<EmptyStruct> {
  constructor(data?: PartialMessage<EmptyStruct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.EmptyStruct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyStruct {
    return new EmptyStruct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyStruct {
    return new EmptyStruct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyStruct {
    return new EmptyStruct().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyStruct | PlainMessage<EmptyStruct> | undefined, b: EmptyStruct | PlainMessage<EmptyStruct> | undefined): boolean {
    return proto3.util.equals(EmptyStruct, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg
 */
export class GetTotalPoolLiquidityQueryMsg extends Message<GetTotalPoolLiquidityQueryMsg> {
  /**
   * get_total_pool_liquidity is the structure containing request field of the
   * total pool liquidity query message.
   *
   * @generated from field: osmosis.cosmwasmpool.v1beta1.EmptyStruct get_total_pool_liquidity = 1;
   */
  getTotalPoolLiquidity?: EmptyStruct;

  constructor(data?: PartialMessage<GetTotalPoolLiquidityQueryMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "get_total_pool_liquidity", kind: "message", T: EmptyStruct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTotalPoolLiquidityQueryMsg {
    return new GetTotalPoolLiquidityQueryMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTotalPoolLiquidityQueryMsg {
    return new GetTotalPoolLiquidityQueryMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTotalPoolLiquidityQueryMsg {
    return new GetTotalPoolLiquidityQueryMsg().fromJsonString(jsonString, options);
  }

  static equals(a: GetTotalPoolLiquidityQueryMsg | PlainMessage<GetTotalPoolLiquidityQueryMsg> | undefined, b: GetTotalPoolLiquidityQueryMsg | PlainMessage<GetTotalPoolLiquidityQueryMsg> | undefined): boolean {
    return proto3.util.equals(GetTotalPoolLiquidityQueryMsg, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse
 */
export class GetTotalPoolLiquidityQueryMsgResponse extends Message<GetTotalPoolLiquidityQueryMsgResponse> {
  /**
   *  total_pool_liquidity is the total liquidity in the pool denominated in
   *  coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_pool_liquidity = 1;
   */
  totalPoolLiquidity: Coin[] = [];

  constructor(data?: PartialMessage<GetTotalPoolLiquidityQueryMsgResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_pool_liquidity", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTotalPoolLiquidityQueryMsgResponse {
    return new GetTotalPoolLiquidityQueryMsgResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTotalPoolLiquidityQueryMsgResponse {
    return new GetTotalPoolLiquidityQueryMsgResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTotalPoolLiquidityQueryMsgResponse {
    return new GetTotalPoolLiquidityQueryMsgResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTotalPoolLiquidityQueryMsgResponse | PlainMessage<GetTotalPoolLiquidityQueryMsgResponse> | undefined, b: GetTotalPoolLiquidityQueryMsgResponse | PlainMessage<GetTotalPoolLiquidityQueryMsgResponse> | undefined): boolean {
    return proto3.util.equals(GetTotalPoolLiquidityQueryMsgResponse, a, b);
  }
}

/**
 * ===================== GetTotalSharesQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg
 */
export class GetTotalSharesQueryMsg extends Message<GetTotalSharesQueryMsg> {
  /**
   * get_total_shares is the structure containing request field of the
   * total shares query message.
   *
   * @generated from field: osmosis.cosmwasmpool.v1beta1.EmptyStruct get_total_shares = 1;
   */
  getTotalShares?: EmptyStruct;

  constructor(data?: PartialMessage<GetTotalSharesQueryMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "get_total_shares", kind: "message", T: EmptyStruct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTotalSharesQueryMsg {
    return new GetTotalSharesQueryMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTotalSharesQueryMsg {
    return new GetTotalSharesQueryMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTotalSharesQueryMsg {
    return new GetTotalSharesQueryMsg().fromJsonString(jsonString, options);
  }

  static equals(a: GetTotalSharesQueryMsg | PlainMessage<GetTotalSharesQueryMsg> | undefined, b: GetTotalSharesQueryMsg | PlainMessage<GetTotalSharesQueryMsg> | undefined): boolean {
    return proto3.util.equals(GetTotalSharesQueryMsg, a, b);
  }
}

/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse
 */
export class GetTotalSharesQueryMsgResponse extends Message<GetTotalSharesQueryMsgResponse> {
  /**
   * total_shares is the amount of shares returned.
   *
   * @generated from field: string total_shares = 1;
   */
  totalShares = "";

  constructor(data?: PartialMessage<GetTotalSharesQueryMsgResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTotalSharesQueryMsgResponse {
    return new GetTotalSharesQueryMsgResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTotalSharesQueryMsgResponse {
    return new GetTotalSharesQueryMsgResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTotalSharesQueryMsgResponse {
    return new GetTotalSharesQueryMsgResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTotalSharesQueryMsgResponse | PlainMessage<GetTotalSharesQueryMsgResponse> | undefined, b: GetTotalSharesQueryMsgResponse | PlainMessage<GetTotalSharesQueryMsgResponse> | undefined): boolean {
    return proto3.util.equals(GetTotalSharesQueryMsgResponse, a, b);
  }
}

