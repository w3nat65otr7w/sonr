// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/cosmwasmpool/v1beta1/model/instantiate_msg.proto (package osmosis.cosmwasmpool.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ===================== InstantiateMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.InstantiateMsg
 */
export class InstantiateMsg extends Message<InstantiateMsg> {
  /**
   * pool_asset_denoms is the list of asset denoms that are initialized
   * at pool creation time.
   *
   * @generated from field: repeated string pool_asset_denoms = 1;
   */
  poolAssetDenoms: string[] = [];

  constructor(data?: PartialMessage<InstantiateMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.cosmwasmpool.v1beta1.InstantiateMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_asset_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstantiateMsg {
    return new InstantiateMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstantiateMsg {
    return new InstantiateMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstantiateMsg {
    return new InstantiateMsg().fromJsonString(jsonString, options);
  }

  static equals(a: InstantiateMsg | PlainMessage<InstantiateMsg> | undefined, b: InstantiateMsg | PlainMessage<InstantiateMsg> | undefined): boolean {
    return proto3.util.equals(InstantiateMsg, a, b);
  }
}

