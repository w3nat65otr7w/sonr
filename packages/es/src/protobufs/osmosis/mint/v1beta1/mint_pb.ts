// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/mint/v1beta1/mint.proto (package osmosis.mint.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Minter represents the minting state.
 *
 * @generated from message osmosis.mint.v1beta1.Minter
 */
export class Minter extends Message<Minter> {
  /**
   * epoch_provisions represent rewards for the current epoch.
   *
   * @generated from field: string epoch_provisions = 1;
   */
  epochProvisions = "";

  constructor(data?: PartialMessage<Minter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.mint.v1beta1.Minter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_provisions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Minter {
    return new Minter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Minter {
    return new Minter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Minter {
    return new Minter().fromJsonString(jsonString, options);
  }

  static equals(a: Minter | PlainMessage<Minter> | undefined, b: Minter | PlainMessage<Minter> | undefined): boolean {
    return proto3.util.equals(Minter, a, b);
  }
}

/**
 * WeightedAddress represents an address with a weight assigned to it.
 * The weight is used to determine the proportion of the total minted
 * tokens to be minted to the address.
 *
 * @generated from message osmosis.mint.v1beta1.WeightedAddress
 */
export class WeightedAddress extends Message<WeightedAddress> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<WeightedAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.mint.v1beta1.WeightedAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeightedAddress {
    return new WeightedAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeightedAddress {
    return new WeightedAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeightedAddress {
    return new WeightedAddress().fromJsonString(jsonString, options);
  }

  static equals(a: WeightedAddress | PlainMessage<WeightedAddress> | undefined, b: WeightedAddress | PlainMessage<WeightedAddress> | undefined): boolean {
    return proto3.util.equals(WeightedAddress, a, b);
  }
}

/**
 * DistributionProportions defines the distribution proportions of the minted
 * denom. In other words, defines which stakeholders will receive the minted
 * denoms and how much.
 *
 * @generated from message osmosis.mint.v1beta1.DistributionProportions
 */
export class DistributionProportions extends Message<DistributionProportions> {
  /**
   * staking defines the proportion of the minted mint_denom that is to be
   * allocated as staking rewards.
   *
   * @generated from field: string staking = 1;
   */
  staking = "";

  /**
   * pool_incentives defines the proportion of the minted mint_denom that is
   * to be allocated as pool incentives.
   *
   * @generated from field: string pool_incentives = 2;
   */
  poolIncentives = "";

  /**
   * developer_rewards defines the proportion of the minted mint_denom that is
   * to be allocated to developer rewards address.
   *
   * @generated from field: string developer_rewards = 3;
   */
  developerRewards = "";

  /**
   * community_pool defines the proportion of the minted mint_denom that is
   * to be allocated to the community pool.
   *
   * @generated from field: string community_pool = 4;
   */
  communityPool = "";

  constructor(data?: PartialMessage<DistributionProportions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.mint.v1beta1.DistributionProportions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "staking", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_incentives", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "developer_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "community_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributionProportions {
    return new DistributionProportions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributionProportions {
    return new DistributionProportions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributionProportions {
    return new DistributionProportions().fromJsonString(jsonString, options);
  }

  static equals(a: DistributionProportions | PlainMessage<DistributionProportions> | undefined, b: DistributionProportions | PlainMessage<DistributionProportions> | undefined): boolean {
    return proto3.util.equals(DistributionProportions, a, b);
  }
}

/**
 * Params holds parameters for the x/mint module.
 *
 * @generated from message osmosis.mint.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * mint_denom is the denom of the coin to mint.
   *
   * @generated from field: string mint_denom = 1;
   */
  mintDenom = "";

  /**
   * genesis_epoch_provisions epoch provisions from the first epoch.
   *
   * @generated from field: string genesis_epoch_provisions = 2;
   */
  genesisEpochProvisions = "";

  /**
   * epoch_identifier mint epoch identifier e.g. (day, week).
   *
   * @generated from field: string epoch_identifier = 3;
   */
  epochIdentifier = "";

  /**
   * reduction_period_in_epochs the number of epochs it takes
   * to reduce the rewards.
   *
   * @generated from field: int64 reduction_period_in_epochs = 4;
   */
  reductionPeriodInEpochs = protoInt64.zero;

  /**
   * reduction_factor is the reduction multiplier to execute
   * at the end of each period set by reduction_period_in_epochs.
   *
   * @generated from field: string reduction_factor = 5;
   */
  reductionFactor = "";

  /**
   * distribution_proportions defines the distribution proportions of the minted
   * denom. In other words, defines which stakeholders will receive the minted
   * denoms and how much.
   *
   * @generated from field: osmosis.mint.v1beta1.DistributionProportions distribution_proportions = 6;
   */
  distributionProportions?: DistributionProportions;

  /**
   * weighted_developer_rewards_receivers is the address to receive developer
   * rewards with weights assignedt to each address. The final amount that each
   * address receives is: epoch_provisions *
   * distribution_proportions.developer_rewards * Address's Weight.
   *
   * @generated from field: repeated osmosis.mint.v1beta1.WeightedAddress weighted_developer_rewards_receivers = 7;
   */
  weightedDeveloperRewardsReceivers: WeightedAddress[] = [];

  /**
   * minting_rewards_distribution_start_epoch start epoch to distribute minting
   * rewards
   *
   * @generated from field: int64 minting_rewards_distribution_start_epoch = 8;
   */
  mintingRewardsDistributionStartEpoch = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.mint.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mint_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "genesis_epoch_provisions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reduction_period_in_epochs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "reduction_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "distribution_proportions", kind: "message", T: DistributionProportions },
    { no: 7, name: "weighted_developer_rewards_receivers", kind: "message", T: WeightedAddress, repeated: true },
    { no: 8, name: "minting_rewards_distribution_start_epoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

