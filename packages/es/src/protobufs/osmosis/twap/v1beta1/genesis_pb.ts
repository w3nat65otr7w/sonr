// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/twap/v1beta1/genesis.proto (package osmosis.twap.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { TwapRecord } from "./twap_record_pb.js";

/**
 * Params holds parameters for the twap module
 *
 * @generated from message osmosis.twap.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: string prune_epoch_identifier = 1;
   */
  pruneEpochIdentifier = "";

  /**
   * @generated from field: google.protobuf.Duration record_history_keep_period = 2;
   */
  recordHistoryKeepPeriod?: Duration;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.twap.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prune_epoch_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "record_history_keep_period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * GenesisState defines the twap module's genesis state.
 *
 * @generated from message osmosis.twap.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * twaps is the collection of all twap records.
   *
   * @generated from field: repeated osmosis.twap.v1beta1.TwapRecord twaps = 1;
   */
  twaps: TwapRecord[] = [];

  /**
   * params is the container of twap parameters.
   *
   * @generated from field: osmosis.twap.v1beta1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.twap.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "twaps", kind: "message", T: TwapRecord, repeated: true },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

