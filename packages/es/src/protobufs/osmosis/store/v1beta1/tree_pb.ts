// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/store/v1beta1/tree.proto (package osmosis.store.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message osmosis.store.v1beta1.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: repeated osmosis.store.v1beta1.Child children = 1;
   */
  children: Child[] = [];

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.store.v1beta1.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "children", kind: "message", T: Child, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message osmosis.store.v1beta1.Child
 */
export class Child extends Message<Child> {
  /**
   * @generated from field: bytes index = 1;
   */
  index = new Uint8Array(0);

  /**
   * @generated from field: string accumulation = 2;
   */
  accumulation = "";

  constructor(data?: PartialMessage<Child>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.store.v1beta1.Child";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "accumulation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Child {
    return new Child().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Child {
    return new Child().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Child {
    return new Child().fromJsonString(jsonString, options);
  }

  static equals(a: Child | PlainMessage<Child> | undefined, b: Child | PlainMessage<Child> | undefined): boolean {
    return proto3.util.equals(Child, a, b);
  }
}

/**
 * @generated from message osmosis.store.v1beta1.Leaf
 */
export class Leaf extends Message<Leaf> {
  /**
   * @generated from field: osmosis.store.v1beta1.Child leaf = 1;
   */
  leaf?: Child;

  constructor(data?: PartialMessage<Leaf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.store.v1beta1.Leaf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "leaf", kind: "message", T: Child },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Leaf {
    return new Leaf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Leaf {
    return new Leaf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Leaf {
    return new Leaf().fromJsonString(jsonString, options);
  }

  static equals(a: Leaf | PlainMessage<Leaf> | undefined, b: Leaf | PlainMessage<Leaf> | undefined): boolean {
    return proto3.util.equals(Leaf, a, b);
  }
}

