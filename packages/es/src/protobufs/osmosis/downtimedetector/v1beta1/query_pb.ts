// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/downtimedetector/v1beta1/query.proto (package osmosis.downtimedetector.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { Downtime } from "./downtime_duration_pb.js";

/**
 * Query for has it been at least $RECOVERY_DURATION units of time,
 * since the chain has been down for $DOWNTIME_DURATION.
 *
 * @generated from message osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthRequest
 */
export class RecoveredSinceDowntimeOfLengthRequest extends Message<RecoveredSinceDowntimeOfLengthRequest> {
  /**
   * @generated from field: osmosis.downtimedetector.v1beta1.Downtime downtime = 1;
   */
  downtime = Downtime.DURATION_30S;

  /**
   * @generated from field: google.protobuf.Duration recovery = 2;
   */
  recovery?: Duration;

  constructor(data?: PartialMessage<RecoveredSinceDowntimeOfLengthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "downtime", kind: "enum", T: proto3.getEnumType(Downtime) },
    { no: 2, name: "recovery", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecoveredSinceDowntimeOfLengthRequest {
    return new RecoveredSinceDowntimeOfLengthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecoveredSinceDowntimeOfLengthRequest {
    return new RecoveredSinceDowntimeOfLengthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecoveredSinceDowntimeOfLengthRequest {
    return new RecoveredSinceDowntimeOfLengthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecoveredSinceDowntimeOfLengthRequest | PlainMessage<RecoveredSinceDowntimeOfLengthRequest> | undefined, b: RecoveredSinceDowntimeOfLengthRequest | PlainMessage<RecoveredSinceDowntimeOfLengthRequest> | undefined): boolean {
    return proto3.util.equals(RecoveredSinceDowntimeOfLengthRequest, a, b);
  }
}

/**
 * @generated from message osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthResponse
 */
export class RecoveredSinceDowntimeOfLengthResponse extends Message<RecoveredSinceDowntimeOfLengthResponse> {
  /**
   * @generated from field: bool succesfully_recovered = 1;
   */
  succesfullyRecovered = false;

  constructor(data?: PartialMessage<RecoveredSinceDowntimeOfLengthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "succesfully_recovered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecoveredSinceDowntimeOfLengthResponse {
    return new RecoveredSinceDowntimeOfLengthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecoveredSinceDowntimeOfLengthResponse {
    return new RecoveredSinceDowntimeOfLengthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecoveredSinceDowntimeOfLengthResponse {
    return new RecoveredSinceDowntimeOfLengthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecoveredSinceDowntimeOfLengthResponse | PlainMessage<RecoveredSinceDowntimeOfLengthResponse> | undefined, b: RecoveredSinceDowntimeOfLengthResponse | PlainMessage<RecoveredSinceDowntimeOfLengthResponse> | undefined): boolean {
    return proto3.util.equals(RecoveredSinceDowntimeOfLengthResponse, a, b);
  }
}

