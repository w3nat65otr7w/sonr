// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/ingest/v1beta1/ingest.proto (package osmosis.ingest.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * PoolData represents a structure encapsulating an Osmosis liquidity pool.
 *
 * @generated from message osmosis.ingest.v1beta1.PoolData
 */
export class PoolData extends Message<PoolData> {
  /**
   * ChainModel is the chain representation model of the pool.
   *
   * @generated from field: bytes chain_model = 1;
   */
  chainModel = new Uint8Array(0);

  /**
   * SqsModel is additional pool data used by the sidecar query server.
   *
   * @generated from field: bytes sqs_model = 2;
   */
  sqsModel = new Uint8Array(0);

  /**
   * TickModel is the tick data of a concentrated liquidity pool.
   * This field is only valid and set for concentrated pools. It is nil
   * otherwise.
   *
   * @generated from field: bytes tick_model = 3;
   */
  tickModel = new Uint8Array(0);

  constructor(data?: PartialMessage<PoolData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.ingest.v1beta1.PoolData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_model", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "sqs_model", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "tick_model", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolData {
    return new PoolData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolData {
    return new PoolData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolData {
    return new PoolData().fromJsonString(jsonString, options);
  }

  static equals(a: PoolData | PlainMessage<PoolData> | undefined, b: PoolData | PlainMessage<PoolData> | undefined): boolean {
    return proto3.util.equals(PoolData, a, b);
  }
}

/**
 * The block process request.
 * Sends taker fees, block height and pools.
 *
 * @generated from message osmosis.ingest.v1beta1.ProcessBlockRequest
 */
export class ProcessBlockRequest extends Message<ProcessBlockRequest> {
  /**
   * block height is the height of the block being processed.
   *
   * @generated from field: uint64 block_height = 1;
   */
  blockHeight = protoInt64.zero;

  /**
   * taker_fees_map is the map of taker fees for the block.
   *
   * @generated from field: bytes taker_fees_map = 2;
   */
  takerFeesMap = new Uint8Array(0);

  /**
   * pools in the block.
   *
   * @generated from field: repeated osmosis.ingest.v1beta1.PoolData pools = 3;
   */
  pools: PoolData[] = [];

  constructor(data?: PartialMessage<ProcessBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.ingest.v1beta1.ProcessBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "taker_fees_map", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "pools", kind: "message", T: PoolData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessBlockRequest {
    return new ProcessBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessBlockRequest {
    return new ProcessBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessBlockRequest {
    return new ProcessBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessBlockRequest | PlainMessage<ProcessBlockRequest> | undefined, b: ProcessBlockRequest | PlainMessage<ProcessBlockRequest> | undefined): boolean {
    return proto3.util.equals(ProcessBlockRequest, a, b);
  }
}

/**
 * The response after completing the block processing.
 *
 * @generated from message osmosis.ingest.v1beta1.ProcessBlockReply
 */
export class ProcessBlockReply extends Message<ProcessBlockReply> {
  constructor(data?: PartialMessage<ProcessBlockReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.ingest.v1beta1.ProcessBlockReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessBlockReply {
    return new ProcessBlockReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessBlockReply {
    return new ProcessBlockReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessBlockReply {
    return new ProcessBlockReply().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessBlockReply | PlainMessage<ProcessBlockReply> | undefined, b: ProcessBlockReply | PlainMessage<ProcessBlockReply> | undefined): boolean {
    return proto3.util.equals(ProcessBlockReply, a, b);
  }
}

