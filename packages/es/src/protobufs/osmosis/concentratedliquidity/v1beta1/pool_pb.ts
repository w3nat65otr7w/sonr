// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/v1beta1/pool.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// This is a legacy package that requires additional migration logic
// in order to use the correct package. Decision made to use legacy package path
// until clear steps for migration logic and the unknowns for state breaking are
// investigated for changing proto package.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * pool's address holding all liquidity tokens.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * address holding the incentives liquidity.
   *
   * @generated from field: string incentives_address = 2;
   */
  incentivesAddress = "";

  /**
   * address holding spread rewards from swaps.
   *
   * @generated from field: string spread_rewards_address = 3;
   */
  spreadRewardsAddress = "";

  /**
   * @generated from field: uint64 id = 4;
   */
  id = protoInt64.zero;

  /**
   * Amount of total liquidity
   *
   * @generated from field: string current_tick_liquidity = 5;
   */
  currentTickLiquidity = "";

  /**
   * @generated from field: string token0 = 6;
   */
  token0 = "";

  /**
   * @generated from field: string token1 = 7;
   */
  token1 = "";

  /**
   * @generated from field: string current_sqrt_price = 8;
   */
  currentSqrtPrice = "";

  /**
   * @generated from field: int64 current_tick = 9;
   */
  currentTick = protoInt64.zero;

  /**
   * tick_spacing must be one of the authorized_tick_spacing values set in the
   * concentrated-liquidity parameters
   *
   * @generated from field: uint64 tick_spacing = 10;
   */
  tickSpacing = protoInt64.zero;

  /**
   * @generated from field: int64 exponent_at_price_one = 11;
   */
  exponentAtPriceOne = protoInt64.zero;

  /**
   * spread_factor is the ratio that is charged on the amount of token in.
   *
   * @generated from field: string spread_factor = 12;
   */
  spreadFactor = "";

  /**
   * last_liquidity_update is the last time either the pool liquidity or the
   * active tick changed
   *
   * @generated from field: google.protobuf.Timestamp last_liquidity_update = 13;
   */
  lastLiquidityUpdate?: Timestamp;

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "incentives_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spread_rewards_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "current_tick_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "current_sqrt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "current_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "tick_spacing", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "exponent_at_price_one", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "spread_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "last_liquidity_update", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

