// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/v1beta1/position.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// this is a legacy package that requires additional migration logic
// in order to use the correct package. Decision made to use legacy package path
// until clear steps for migration logic and the unknowns for state breaking are
// investigated for changing proto package.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { PeriodLock } from "../../lockup/lock_pb.js";

/**
 * Position contains position's id, address, pool id, lower tick, upper tick
 * join time, and liquidity.
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.Position
 */
export class Position extends Message<Position> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: int64 lower_tick = 4;
   */
  lowerTick = protoInt64.zero;

  /**
   * @generated from field: int64 upper_tick = 5;
   */
  upperTick = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp join_time = 6;
   */
  joinTime?: Timestamp;

  /**
   * @generated from field: string liquidity = 7;
   */
  liquidity = "";

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "join_time", kind: "message", T: Timestamp },
    { no: 7, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

/**
 * FullPositionBreakdown returns:
 * - the position itself
 * - the amount the position translates in terms of asset0 and asset1
 * - the amount of claimable fees
 * - the amount of claimable incentives
 * - the amount of incentives that would be forfeited if the position was closed
 * now
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown
 */
export class FullPositionBreakdown extends Message<FullPositionBreakdown> {
  /**
   * @generated from field: osmosis.concentratedliquidity.v1beta1.Position position = 1;
   */
  position?: Position;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin asset0 = 2;
   */
  asset0?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin asset1 = 3;
   */
  asset1?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_spread_rewards = 4;
   */
  claimableSpreadRewards: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_incentives = 5;
   */
  claimableIncentives: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin forfeited_incentives = 6;
   */
  forfeitedIncentives: Coin[] = [];

  constructor(data?: PartialMessage<FullPositionBreakdown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "asset0", kind: "message", T: Coin },
    { no: 3, name: "asset1", kind: "message", T: Coin },
    { no: 4, name: "claimable_spread_rewards", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "claimable_incentives", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "forfeited_incentives", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullPositionBreakdown {
    return new FullPositionBreakdown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullPositionBreakdown {
    return new FullPositionBreakdown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullPositionBreakdown {
    return new FullPositionBreakdown().fromJsonString(jsonString, options);
  }

  static equals(a: FullPositionBreakdown | PlainMessage<FullPositionBreakdown> | undefined, b: FullPositionBreakdown | PlainMessage<FullPositionBreakdown> | undefined): boolean {
    return proto3.util.equals(FullPositionBreakdown, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock
 */
export class PositionWithPeriodLock extends Message<PositionWithPeriodLock> {
  /**
   * @generated from field: osmosis.concentratedliquidity.v1beta1.Position position = 1;
   */
  position?: Position;

  /**
   * @generated from field: osmosis.lockup.PeriodLock locks = 2;
   */
  locks?: PeriodLock;

  constructor(data?: PartialMessage<PositionWithPeriodLock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "locks", kind: "message", T: PeriodLock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionWithPeriodLock {
    return new PositionWithPeriodLock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionWithPeriodLock {
    return new PositionWithPeriodLock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionWithPeriodLock {
    return new PositionWithPeriodLock().fromJsonString(jsonString, options);
  }

  static equals(a: PositionWithPeriodLock | PlainMessage<PositionWithPeriodLock> | undefined, b: PositionWithPeriodLock | PlainMessage<PositionWithPeriodLock> | undefined): boolean {
    return proto3.util.equals(PositionWithPeriodLock, a, b);
  }
}

