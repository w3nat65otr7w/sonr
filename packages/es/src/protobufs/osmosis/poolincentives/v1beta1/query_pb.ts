// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolincentives/v1beta1/query.proto (package osmosis.poolincentives.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DistrInfo, Params } from "./incentives_pb.js";
import { Gauge } from "../../incentives/gauge_pb.js";

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryGaugeIdsRequest
 */
export class QueryGaugeIdsRequest extends Message<QueryGaugeIdsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGaugeIdsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryGaugeIdsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeIdsRequest {
    return new QueryGaugeIdsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeIdsRequest {
    return new QueryGaugeIdsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeIdsRequest {
    return new QueryGaugeIdsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeIdsRequest | PlainMessage<QueryGaugeIdsRequest> | undefined, b: QueryGaugeIdsRequest | PlainMessage<QueryGaugeIdsRequest> | undefined): boolean {
    return proto3.util.equals(QueryGaugeIdsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse
 */
export class QueryGaugeIdsResponse extends Message<QueryGaugeIdsResponse> {
  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration gauge_ids_with_duration = 1;
   */
  gaugeIdsWithDuration: QueryGaugeIdsResponse_GaugeIdWithDuration[] = [];

  constructor(data?: PartialMessage<QueryGaugeIdsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_ids_with_duration", kind: "message", T: QueryGaugeIdsResponse_GaugeIdWithDuration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeIdsResponse {
    return new QueryGaugeIdsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeIdsResponse {
    return new QueryGaugeIdsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeIdsResponse {
    return new QueryGaugeIdsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeIdsResponse | PlainMessage<QueryGaugeIdsResponse> | undefined, b: QueryGaugeIdsResponse | PlainMessage<QueryGaugeIdsResponse> | undefined): boolean {
    return proto3.util.equals(QueryGaugeIdsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration
 */
export class QueryGaugeIdsResponse_GaugeIdWithDuration extends Message<QueryGaugeIdsResponse_GaugeIdWithDuration> {
  /**
   * @generated from field: uint64 gauge_id = 1;
   */
  gaugeId = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  /**
   * @generated from field: string gauge_incentive_percentage = 3;
   */
  gaugeIncentivePercentage = "";

  constructor(data?: PartialMessage<QueryGaugeIdsResponse_GaugeIdWithDuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
    { no: 3, name: "gauge_incentive_percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeIdsResponse_GaugeIdWithDuration {
    return new QueryGaugeIdsResponse_GaugeIdWithDuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeIdsResponse_GaugeIdWithDuration {
    return new QueryGaugeIdsResponse_GaugeIdWithDuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeIdsResponse_GaugeIdWithDuration {
    return new QueryGaugeIdsResponse_GaugeIdWithDuration().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeIdsResponse_GaugeIdWithDuration | PlainMessage<QueryGaugeIdsResponse_GaugeIdWithDuration> | undefined, b: QueryGaugeIdsResponse_GaugeIdWithDuration | PlainMessage<QueryGaugeIdsResponse_GaugeIdWithDuration> | undefined): boolean {
    return proto3.util.equals(QueryGaugeIdsResponse_GaugeIdWithDuration, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryDistrInfoRequest
 */
export class QueryDistrInfoRequest extends Message<QueryDistrInfoRequest> {
  constructor(data?: PartialMessage<QueryDistrInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryDistrInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDistrInfoRequest {
    return new QueryDistrInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDistrInfoRequest {
    return new QueryDistrInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDistrInfoRequest {
    return new QueryDistrInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDistrInfoRequest | PlainMessage<QueryDistrInfoRequest> | undefined, b: QueryDistrInfoRequest | PlainMessage<QueryDistrInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryDistrInfoRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryDistrInfoResponse
 */
export class QueryDistrInfoResponse extends Message<QueryDistrInfoResponse> {
  /**
   * @generated from field: osmosis.poolincentives.v1beta1.DistrInfo distr_info = 1;
   */
  distrInfo?: DistrInfo;

  constructor(data?: PartialMessage<QueryDistrInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryDistrInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distr_info", kind: "message", T: DistrInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDistrInfoResponse {
    return new QueryDistrInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDistrInfoResponse {
    return new QueryDistrInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDistrInfoResponse {
    return new QueryDistrInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDistrInfoResponse | PlainMessage<QueryDistrInfoResponse> | undefined, b: QueryDistrInfoResponse | PlainMessage<QueryDistrInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryDistrInfoResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: osmosis.poolincentives.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryLockableDurationsRequest
 */
export class QueryLockableDurationsRequest extends Message<QueryLockableDurationsRequest> {
  constructor(data?: PartialMessage<QueryLockableDurationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryLockableDurationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLockableDurationsRequest {
    return new QueryLockableDurationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLockableDurationsRequest {
    return new QueryLockableDurationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLockableDurationsRequest {
    return new QueryLockableDurationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLockableDurationsRequest | PlainMessage<QueryLockableDurationsRequest> | undefined, b: QueryLockableDurationsRequest | PlainMessage<QueryLockableDurationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryLockableDurationsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse
 */
export class QueryLockableDurationsResponse extends Message<QueryLockableDurationsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Duration lockable_durations = 1;
   */
  lockableDurations: Duration[] = [];

  constructor(data?: PartialMessage<QueryLockableDurationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lockable_durations", kind: "message", T: Duration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLockableDurationsResponse {
    return new QueryLockableDurationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLockableDurationsResponse {
    return new QueryLockableDurationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLockableDurationsResponse {
    return new QueryLockableDurationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLockableDurationsResponse | PlainMessage<QueryLockableDurationsResponse> | undefined, b: QueryLockableDurationsResponse | PlainMessage<QueryLockableDurationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryLockableDurationsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsRequest
 */
export class QueryIncentivizedPoolsRequest extends Message<QueryIncentivizedPoolsRequest> {
  constructor(data?: PartialMessage<QueryIncentivizedPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPoolsRequest {
    return new QueryIncentivizedPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPoolsRequest {
    return new QueryIncentivizedPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPoolsRequest {
    return new QueryIncentivizedPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPoolsRequest | PlainMessage<QueryIncentivizedPoolsRequest> | undefined, b: QueryIncentivizedPoolsRequest | PlainMessage<QueryIncentivizedPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.IncentivizedPool
 */
export class IncentivizedPool extends Message<IncentivizedPool> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Duration lockable_duration = 2;
   */
  lockableDuration?: Duration;

  /**
   * @generated from field: uint64 gauge_id = 3;
   */
  gaugeId = protoInt64.zero;

  constructor(data?: PartialMessage<IncentivizedPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.IncentivizedPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "lockable_duration", kind: "message", T: Duration },
    { no: 3, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncentivizedPool {
    return new IncentivizedPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncentivizedPool {
    return new IncentivizedPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncentivizedPool {
    return new IncentivizedPool().fromJsonString(jsonString, options);
  }

  static equals(a: IncentivizedPool | PlainMessage<IncentivizedPool> | undefined, b: IncentivizedPool | PlainMessage<IncentivizedPool> | undefined): boolean {
    return proto3.util.equals(IncentivizedPool, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse
 */
export class QueryIncentivizedPoolsResponse extends Message<QueryIncentivizedPoolsResponse> {
  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.IncentivizedPool incentivized_pools = 1;
   */
  incentivizedPools: IncentivizedPool[] = [];

  constructor(data?: PartialMessage<QueryIncentivizedPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_pools", kind: "message", T: IncentivizedPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPoolsResponse {
    return new QueryIncentivizedPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPoolsResponse {
    return new QueryIncentivizedPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPoolsResponse {
    return new QueryIncentivizedPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPoolsResponse | PlainMessage<QueryIncentivizedPoolsResponse> | undefined, b: QueryIncentivizedPoolsResponse | PlainMessage<QueryIncentivizedPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPoolsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesRequest
 */
export class QueryExternalIncentiveGaugesRequest extends Message<QueryExternalIncentiveGaugesRequest> {
  constructor(data?: PartialMessage<QueryExternalIncentiveGaugesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExternalIncentiveGaugesRequest {
    return new QueryExternalIncentiveGaugesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExternalIncentiveGaugesRequest {
    return new QueryExternalIncentiveGaugesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExternalIncentiveGaugesRequest {
    return new QueryExternalIncentiveGaugesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExternalIncentiveGaugesRequest | PlainMessage<QueryExternalIncentiveGaugesRequest> | undefined, b: QueryExternalIncentiveGaugesRequest | PlainMessage<QueryExternalIncentiveGaugesRequest> | undefined): boolean {
    return proto3.util.equals(QueryExternalIncentiveGaugesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse
 */
export class QueryExternalIncentiveGaugesResponse extends Message<QueryExternalIncentiveGaugesResponse> {
  /**
   * @generated from field: repeated osmosis.incentives.Gauge data = 1;
   */
  data: Gauge[] = [];

  constructor(data?: PartialMessage<QueryExternalIncentiveGaugesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Gauge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExternalIncentiveGaugesResponse {
    return new QueryExternalIncentiveGaugesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExternalIncentiveGaugesResponse {
    return new QueryExternalIncentiveGaugesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExternalIncentiveGaugesResponse {
    return new QueryExternalIncentiveGaugesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExternalIncentiveGaugesResponse | PlainMessage<QueryExternalIncentiveGaugesResponse> | undefined, b: QueryExternalIncentiveGaugesResponse | PlainMessage<QueryExternalIncentiveGaugesResponse> | undefined): boolean {
    return proto3.util.equals(QueryExternalIncentiveGaugesResponse, a, b);
  }
}

