// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolincentives/v1beta1/gov.proto (package osmosis.poolincentives.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DistrRecord } from "./incentives_pb.js";

/**
 * ReplacePoolIncentivesProposal is a gov Content type for updating the pool
 * incentives. If a ReplacePoolIncentivesProposal passes, the proposalâ€™s records
 * override the existing DistrRecords set in the module. Each record has a
 * specified gauge id and weight, and the incentives are distributed to each
 * gauge according to weight/total_weight. The incentives are put in the fee
 * pool and it is allocated to gauges and community pool by the DistrRecords
 * configuration. Note that gaugeId=0 represents the community pool.
 *
 * @generated from message osmosis.poolincentives.v1beta1.ReplacePoolIncentivesProposal
 */
export class ReplacePoolIncentivesProposal extends Message<ReplacePoolIncentivesProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.DistrRecord records = 3;
   */
  records: DistrRecord[] = [];

  constructor(data?: PartialMessage<ReplacePoolIncentivesProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.ReplacePoolIncentivesProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "records", kind: "message", T: DistrRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplacePoolIncentivesProposal {
    return new ReplacePoolIncentivesProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplacePoolIncentivesProposal {
    return new ReplacePoolIncentivesProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplacePoolIncentivesProposal {
    return new ReplacePoolIncentivesProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ReplacePoolIncentivesProposal | PlainMessage<ReplacePoolIncentivesProposal> | undefined, b: ReplacePoolIncentivesProposal | PlainMessage<ReplacePoolIncentivesProposal> | undefined): boolean {
    return proto3.util.equals(ReplacePoolIncentivesProposal, a, b);
  }
}

/**
 * For example: if the existing DistrRecords were:
 * [(Gauge 0, 5), (Gauge 1, 6), (Gauge 2, 6)]
 * An UpdatePoolIncentivesProposal includes
 * [(Gauge 1, 0), (Gauge 2, 4), (Gauge 3, 10)]
 * This would delete Gauge 1, Edit Gauge 2, and Add Gauge 3
 * The result DistrRecords in state would be:
 * [(Gauge 0, 5), (Gauge 2, 4), (Gauge 3, 10)]
 *
 * @generated from message osmosis.poolincentives.v1beta1.UpdatePoolIncentivesProposal
 */
export class UpdatePoolIncentivesProposal extends Message<UpdatePoolIncentivesProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.DistrRecord records = 3;
   */
  records: DistrRecord[] = [];

  constructor(data?: PartialMessage<UpdatePoolIncentivesProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.UpdatePoolIncentivesProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "records", kind: "message", T: DistrRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePoolIncentivesProposal {
    return new UpdatePoolIncentivesProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePoolIncentivesProposal {
    return new UpdatePoolIncentivesProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePoolIncentivesProposal {
    return new UpdatePoolIncentivesProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePoolIncentivesProposal | PlainMessage<UpdatePoolIncentivesProposal> | undefined, b: UpdatePoolIncentivesProposal | PlainMessage<UpdatePoolIncentivesProposal> | undefined): boolean {
    return proto3.util.equals(UpdatePoolIncentivesProposal, a, b);
  }
}

