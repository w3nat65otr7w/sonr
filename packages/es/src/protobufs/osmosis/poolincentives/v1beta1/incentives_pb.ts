// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolincentives/v1beta1/incentives.proto (package osmosis.poolincentives.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message osmosis.poolincentives.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * minted_denom is the denomination of the coin expected to be minted by the
   * minting module. Pool-incentives module doesnâ€™t actually mint the coin
   * itself, but rather manages the distribution of coins that matches the
   * defined minted_denom.
   *
   * @generated from field: string minted_denom = 1;
   */
  mintedDenom = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minted_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.LockableDurationsInfo
 */
export class LockableDurationsInfo extends Message<LockableDurationsInfo> {
  /**
   * @generated from field: repeated google.protobuf.Duration lockable_durations = 1;
   */
  lockableDurations: Duration[] = [];

  constructor(data?: PartialMessage<LockableDurationsInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.LockableDurationsInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lockable_durations", kind: "message", T: Duration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockableDurationsInfo {
    return new LockableDurationsInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockableDurationsInfo {
    return new LockableDurationsInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockableDurationsInfo {
    return new LockableDurationsInfo().fromJsonString(jsonString, options);
  }

  static equals(a: LockableDurationsInfo | PlainMessage<LockableDurationsInfo> | undefined, b: LockableDurationsInfo | PlainMessage<LockableDurationsInfo> | undefined): boolean {
    return proto3.util.equals(LockableDurationsInfo, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.DistrInfo
 */
export class DistrInfo extends Message<DistrInfo> {
  /**
   * @generated from field: string total_weight = 1;
   */
  totalWeight = "";

  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.DistrRecord records = 2;
   */
  records: DistrRecord[] = [];

  constructor(data?: PartialMessage<DistrInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.DistrInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "records", kind: "message", T: DistrRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistrInfo {
    return new DistrInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistrInfo {
    return new DistrInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistrInfo {
    return new DistrInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DistrInfo | PlainMessage<DistrInfo> | undefined, b: DistrInfo | PlainMessage<DistrInfo> | undefined): boolean {
    return proto3.util.equals(DistrInfo, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.DistrRecord
 */
export class DistrRecord extends Message<DistrRecord> {
  /**
   * @generated from field: uint64 gauge_id = 1;
   */
  gaugeId = protoInt64.zero;

  /**
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<DistrRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.DistrRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistrRecord {
    return new DistrRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistrRecord {
    return new DistrRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistrRecord {
    return new DistrRecord().fromJsonString(jsonString, options);
  }

  static equals(a: DistrRecord | PlainMessage<DistrRecord> | undefined, b: DistrRecord | PlainMessage<DistrRecord> | undefined): boolean {
    return proto3.util.equals(DistrRecord, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.PoolToGauge
 */
export class PoolToGauge extends Message<PoolToGauge> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: uint64 gauge_id = 2;
   */
  gaugeId = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<PoolToGauge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.PoolToGauge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolToGauge {
    return new PoolToGauge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolToGauge {
    return new PoolToGauge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolToGauge {
    return new PoolToGauge().fromJsonString(jsonString, options);
  }

  static equals(a: PoolToGauge | PlainMessage<PoolToGauge> | undefined, b: PoolToGauge | PlainMessage<PoolToGauge> | undefined): boolean {
    return proto3.util.equals(PoolToGauge, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.AnyPoolToInternalGauges
 */
export class AnyPoolToInternalGauges extends Message<AnyPoolToInternalGauges> {
  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.PoolToGauge pool_to_gauge = 2;
   */
  poolToGauge: PoolToGauge[] = [];

  constructor(data?: PartialMessage<AnyPoolToInternalGauges>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.AnyPoolToInternalGauges";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pool_to_gauge", kind: "message", T: PoolToGauge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyPoolToInternalGauges {
    return new AnyPoolToInternalGauges().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyPoolToInternalGauges {
    return new AnyPoolToInternalGauges().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyPoolToInternalGauges {
    return new AnyPoolToInternalGauges().fromJsonString(jsonString, options);
  }

  static equals(a: AnyPoolToInternalGauges | PlainMessage<AnyPoolToInternalGauges> | undefined, b: AnyPoolToInternalGauges | PlainMessage<AnyPoolToInternalGauges> | undefined): boolean {
    return proto3.util.equals(AnyPoolToInternalGauges, a, b);
  }
}

/**
 * @generated from message osmosis.poolincentives.v1beta1.ConcentratedPoolToNoLockGauges
 */
export class ConcentratedPoolToNoLockGauges extends Message<ConcentratedPoolToNoLockGauges> {
  /**
   * @generated from field: repeated osmosis.poolincentives.v1beta1.PoolToGauge pool_to_gauge = 1;
   */
  poolToGauge: PoolToGauge[] = [];

  constructor(data?: PartialMessage<ConcentratedPoolToNoLockGauges>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolincentives.v1beta1.ConcentratedPoolToNoLockGauges";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_to_gauge", kind: "message", T: PoolToGauge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConcentratedPoolToNoLockGauges {
    return new ConcentratedPoolToNoLockGauges().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConcentratedPoolToNoLockGauges {
    return new ConcentratedPoolToNoLockGauges().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConcentratedPoolToNoLockGauges {
    return new ConcentratedPoolToNoLockGauges().fromJsonString(jsonString, options);
  }

  static equals(a: ConcentratedPoolToNoLockGauges | PlainMessage<ConcentratedPoolToNoLockGauges> | undefined, b: ConcentratedPoolToNoLockGauges | PlainMessage<ConcentratedPoolToNoLockGauges> | undefined): boolean {
    return proto3.util.equals(ConcentratedPoolToNoLockGauges, a, b);
  }
}

