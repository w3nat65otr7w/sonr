// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/valsetpref/v1beta1/tx.proto (package osmosis.valsetpref.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ValidatorPreference } from "./state_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgCreateValidatorSetPreference is a list that holds validator-set.
 *
 * @generated from message osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreference
 */
export class MsgSetValidatorSetPreference extends Message<MsgSetValidatorSetPreference> {
  /**
   * delegator is the user who is trying to create a validator-set.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * list of {valAddr, weight} to delegate to
   *
   * @generated from field: repeated osmosis.valsetpref.v1beta1.ValidatorPreference preferences = 2;
   */
  preferences: ValidatorPreference[] = [];

  constructor(data?: PartialMessage<MsgSetValidatorSetPreference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "preferences", kind: "message", T: ValidatorPreference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetValidatorSetPreference {
    return new MsgSetValidatorSetPreference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetValidatorSetPreference {
    return new MsgSetValidatorSetPreference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetValidatorSetPreference {
    return new MsgSetValidatorSetPreference().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetValidatorSetPreference | PlainMessage<MsgSetValidatorSetPreference> | undefined, b: MsgSetValidatorSetPreference | PlainMessage<MsgSetValidatorSetPreference> | undefined): boolean {
    return proto3.util.equals(MsgSetValidatorSetPreference, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreferenceResponse
 */
export class MsgSetValidatorSetPreferenceResponse extends Message<MsgSetValidatorSetPreferenceResponse> {
  constructor(data?: PartialMessage<MsgSetValidatorSetPreferenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreferenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetValidatorSetPreferenceResponse {
    return new MsgSetValidatorSetPreferenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetValidatorSetPreferenceResponse {
    return new MsgSetValidatorSetPreferenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetValidatorSetPreferenceResponse {
    return new MsgSetValidatorSetPreferenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetValidatorSetPreferenceResponse | PlainMessage<MsgSetValidatorSetPreferenceResponse> | undefined, b: MsgSetValidatorSetPreferenceResponse | PlainMessage<MsgSetValidatorSetPreferenceResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetValidatorSetPreferenceResponse, a, b);
  }
}

/**
 * MsgDelegateToValidatorSet allows users to delegate to an existing
 * validator-set
 *
 * @generated from message osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSet
 */
export class MsgDelegateToValidatorSet extends Message<MsgDelegateToValidatorSet> {
  /**
   * delegator is the user who is trying to delegate.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * the amount of tokens the user is trying to delegate.
   * For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC
   * -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to
   * B, 2osmo to C.
   *
   * @generated from field: cosmos.base.v1beta1.Coin coin = 2;
   */
  coin?: Coin;

  constructor(data?: PartialMessage<MsgDelegateToValidatorSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateToValidatorSet {
    return new MsgDelegateToValidatorSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateToValidatorSet {
    return new MsgDelegateToValidatorSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateToValidatorSet {
    return new MsgDelegateToValidatorSet().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateToValidatorSet | PlainMessage<MsgDelegateToValidatorSet> | undefined, b: MsgDelegateToValidatorSet | PlainMessage<MsgDelegateToValidatorSet> | undefined): boolean {
    return proto3.util.equals(MsgDelegateToValidatorSet, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSetResponse
 */
export class MsgDelegateToValidatorSetResponse extends Message<MsgDelegateToValidatorSetResponse> {
  constructor(data?: PartialMessage<MsgDelegateToValidatorSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateToValidatorSetResponse {
    return new MsgDelegateToValidatorSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateToValidatorSetResponse {
    return new MsgDelegateToValidatorSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateToValidatorSetResponse {
    return new MsgDelegateToValidatorSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateToValidatorSetResponse | PlainMessage<MsgDelegateToValidatorSetResponse> | undefined, b: MsgDelegateToValidatorSetResponse | PlainMessage<MsgDelegateToValidatorSetResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegateToValidatorSetResponse, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSet
 */
export class MsgUndelegateFromValidatorSet extends Message<MsgUndelegateFromValidatorSet> {
  /**
   * delegator is the user who is trying to undelegate.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * the amount the user wants to undelegate
   * For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3,
   * ValC
   * -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A ,
   * 3osmo from B, 2osmo from C
   *
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;

  constructor(data?: PartialMessage<MsgUndelegateFromValidatorSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateFromValidatorSet {
    return new MsgUndelegateFromValidatorSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateFromValidatorSet {
    return new MsgUndelegateFromValidatorSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateFromValidatorSet {
    return new MsgUndelegateFromValidatorSet().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateFromValidatorSet | PlainMessage<MsgUndelegateFromValidatorSet> | undefined, b: MsgUndelegateFromValidatorSet | PlainMessage<MsgUndelegateFromValidatorSet> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateFromValidatorSet, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSetResponse
 */
export class MsgUndelegateFromValidatorSetResponse extends Message<MsgUndelegateFromValidatorSetResponse> {
  constructor(data?: PartialMessage<MsgUndelegateFromValidatorSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateFromValidatorSetResponse {
    return new MsgUndelegateFromValidatorSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateFromValidatorSetResponse {
    return new MsgUndelegateFromValidatorSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateFromValidatorSetResponse {
    return new MsgUndelegateFromValidatorSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateFromValidatorSetResponse | PlainMessage<MsgUndelegateFromValidatorSetResponse> | undefined, b: MsgUndelegateFromValidatorSetResponse | PlainMessage<MsgUndelegateFromValidatorSetResponse> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateFromValidatorSetResponse, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSet
 */
export class MsgUndelegateFromRebalancedValidatorSet extends Message<MsgUndelegateFromRebalancedValidatorSet> {
  /**
   * delegator is the user who is trying to undelegate.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * the amount the user wants to undelegate
   * For ex: Undelegate 50 osmo with validator-set {ValA -> 0.5, ValB -> 0.5}
   * Our undelegate logic would first check the current delegation balance.
   * If the user has 90 osmo delegated to ValA and 10 osmo delegated to ValB,
   * the rebalanced validator set would be {ValA -> 0.9, ValB -> 0.1}
   * So now the 45 osmo would be undelegated from ValA and 5 osmo would be
   * undelegated from ValB.
   *
   * @generated from field: cosmos.base.v1beta1.Coin coin = 2;
   */
  coin?: Coin;

  constructor(data?: PartialMessage<MsgUndelegateFromRebalancedValidatorSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateFromRebalancedValidatorSet {
    return new MsgUndelegateFromRebalancedValidatorSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateFromRebalancedValidatorSet {
    return new MsgUndelegateFromRebalancedValidatorSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateFromRebalancedValidatorSet {
    return new MsgUndelegateFromRebalancedValidatorSet().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateFromRebalancedValidatorSet | PlainMessage<MsgUndelegateFromRebalancedValidatorSet> | undefined, b: MsgUndelegateFromRebalancedValidatorSet | PlainMessage<MsgUndelegateFromRebalancedValidatorSet> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateFromRebalancedValidatorSet, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSetResponse
 */
export class MsgUndelegateFromRebalancedValidatorSetResponse extends Message<MsgUndelegateFromRebalancedValidatorSetResponse> {
  constructor(data?: PartialMessage<MsgUndelegateFromRebalancedValidatorSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateFromRebalancedValidatorSetResponse {
    return new MsgUndelegateFromRebalancedValidatorSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateFromRebalancedValidatorSetResponse {
    return new MsgUndelegateFromRebalancedValidatorSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateFromRebalancedValidatorSetResponse {
    return new MsgUndelegateFromRebalancedValidatorSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateFromRebalancedValidatorSetResponse | PlainMessage<MsgUndelegateFromRebalancedValidatorSetResponse> | undefined, b: MsgUndelegateFromRebalancedValidatorSetResponse | PlainMessage<MsgUndelegateFromRebalancedValidatorSetResponse> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateFromRebalancedValidatorSetResponse, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSet
 */
export class MsgRedelegateValidatorSet extends Message<MsgRedelegateValidatorSet> {
  /**
   * delegator is the user who is trying to create a validator-set.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * list of {valAddr, weight} to delegate to
   *
   * @generated from field: repeated osmosis.valsetpref.v1beta1.ValidatorPreference preferences = 2;
   */
  preferences: ValidatorPreference[] = [];

  constructor(data?: PartialMessage<MsgRedelegateValidatorSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "preferences", kind: "message", T: ValidatorPreference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedelegateValidatorSet {
    return new MsgRedelegateValidatorSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedelegateValidatorSet {
    return new MsgRedelegateValidatorSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedelegateValidatorSet {
    return new MsgRedelegateValidatorSet().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedelegateValidatorSet | PlainMessage<MsgRedelegateValidatorSet> | undefined, b: MsgRedelegateValidatorSet | PlainMessage<MsgRedelegateValidatorSet> | undefined): boolean {
    return proto3.util.equals(MsgRedelegateValidatorSet, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSetResponse
 */
export class MsgRedelegateValidatorSetResponse extends Message<MsgRedelegateValidatorSetResponse> {
  constructor(data?: PartialMessage<MsgRedelegateValidatorSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedelegateValidatorSetResponse {
    return new MsgRedelegateValidatorSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedelegateValidatorSetResponse {
    return new MsgRedelegateValidatorSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedelegateValidatorSetResponse {
    return new MsgRedelegateValidatorSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedelegateValidatorSetResponse | PlainMessage<MsgRedelegateValidatorSetResponse> | undefined, b: MsgRedelegateValidatorSetResponse | PlainMessage<MsgRedelegateValidatorSetResponse> | undefined): boolean {
    return proto3.util.equals(MsgRedelegateValidatorSetResponse, a, b);
  }
}

/**
 * MsgWithdrawDelegationRewards allows user to claim staking rewards from the
 * validator set.
 *
 * @generated from message osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewards
 */
export class MsgWithdrawDelegationRewards extends Message<MsgWithdrawDelegationRewards> {
  /**
   * delegator is the user who is trying to claim staking rewards.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  constructor(data?: PartialMessage<MsgWithdrawDelegationRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawDelegationRewards {
    return new MsgWithdrawDelegationRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawDelegationRewards {
    return new MsgWithdrawDelegationRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawDelegationRewards {
    return new MsgWithdrawDelegationRewards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawDelegationRewards | PlainMessage<MsgWithdrawDelegationRewards> | undefined, b: MsgWithdrawDelegationRewards | PlainMessage<MsgWithdrawDelegationRewards> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawDelegationRewards, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewardsResponse
 */
export class MsgWithdrawDelegationRewardsResponse extends Message<MsgWithdrawDelegationRewardsResponse> {
  constructor(data?: PartialMessage<MsgWithdrawDelegationRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawDelegationRewardsResponse {
    return new MsgWithdrawDelegationRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawDelegationRewardsResponse {
    return new MsgWithdrawDelegationRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawDelegationRewardsResponse {
    return new MsgWithdrawDelegationRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawDelegationRewardsResponse | PlainMessage<MsgWithdrawDelegationRewardsResponse> | undefined, b: MsgWithdrawDelegationRewardsResponse | PlainMessage<MsgWithdrawDelegationRewardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawDelegationRewardsResponse, a, b);
  }
}

/**
 * MsgDelegateBondedTokens breaks bonded lockup (by ID) of osmo, of
 * length <= 2 weeks and takes all that osmo and delegates according to
 * delegator's current validator set preference.
 *
 * @generated from message osmosis.valsetpref.v1beta1.MsgDelegateBondedTokens
 */
export class MsgDelegateBondedTokens extends Message<MsgDelegateBondedTokens> {
  /**
   * delegator is the user who is trying to force unbond osmo and delegate.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * lockup id of osmo in the pool
   *
   * @generated from field: uint64 lockID = 2;
   */
  lockID = protoInt64.zero;

  constructor(data?: PartialMessage<MsgDelegateBondedTokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgDelegateBondedTokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateBondedTokens {
    return new MsgDelegateBondedTokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateBondedTokens {
    return new MsgDelegateBondedTokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateBondedTokens {
    return new MsgDelegateBondedTokens().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateBondedTokens | PlainMessage<MsgDelegateBondedTokens> | undefined, b: MsgDelegateBondedTokens | PlainMessage<MsgDelegateBondedTokens> | undefined): boolean {
    return proto3.util.equals(MsgDelegateBondedTokens, a, b);
  }
}

/**
 * @generated from message osmosis.valsetpref.v1beta1.MsgDelegateBondedTokensResponse
 */
export class MsgDelegateBondedTokensResponse extends Message<MsgDelegateBondedTokensResponse> {
  constructor(data?: PartialMessage<MsgDelegateBondedTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.MsgDelegateBondedTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateBondedTokensResponse {
    return new MsgDelegateBondedTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateBondedTokensResponse {
    return new MsgDelegateBondedTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateBondedTokensResponse {
    return new MsgDelegateBondedTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateBondedTokensResponse | PlainMessage<MsgDelegateBondedTokensResponse> | undefined, b: MsgDelegateBondedTokensResponse | PlainMessage<MsgDelegateBondedTokensResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegateBondedTokensResponse, a, b);
  }
}

