// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/valsetpref/v1beta1/state.proto (package osmosis.valsetpref.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ValidatorPreference defines the message structure for
 * CreateValidatorSetPreference. It allows a user to set {val_addr, weight} in
 * state. If a user does not have a validator set preference list set, and has
 * staked, make their preference list default to their current staking
 * distribution.
 *
 * @generated from message osmosis.valsetpref.v1beta1.ValidatorPreference
 */
export class ValidatorPreference extends Message<ValidatorPreference> {
  /**
   * val_oper_address holds the validator address the user wants to delegate
   * funds to.
   *
   * @generated from field: string val_oper_address = 1;
   */
  valOperAddress = "";

  /**
   * weight is decimal between 0 and 1, and they all sum to 1.
   *
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<ValidatorPreference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.ValidatorPreference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val_oper_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorPreference {
    return new ValidatorPreference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorPreference {
    return new ValidatorPreference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorPreference {
    return new ValidatorPreference().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorPreference | PlainMessage<ValidatorPreference> | undefined, b: ValidatorPreference | PlainMessage<ValidatorPreference> | undefined): boolean {
    return proto3.util.equals(ValidatorPreference, a, b);
  }
}

/**
 * ValidatorSetPreferences defines a delegator's validator set preference.
 * It contains a list of (validator, percent_allocation) pairs.
 * The percent allocation are arranged in decimal notation from 0 to 1 and must
 * add up to 1.
 *
 * @generated from message osmosis.valsetpref.v1beta1.ValidatorSetPreferences
 */
export class ValidatorSetPreferences extends Message<ValidatorSetPreferences> {
  /**
   * preference holds {valAddr, weight} for the user who created it.
   *
   * @generated from field: repeated osmosis.valsetpref.v1beta1.ValidatorPreference preferences = 2;
   */
  preferences: ValidatorPreference[] = [];

  constructor(data?: PartialMessage<ValidatorSetPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.valsetpref.v1beta1.ValidatorSetPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "preferences", kind: "message", T: ValidatorPreference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorSetPreferences {
    return new ValidatorSetPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorSetPreferences {
    return new ValidatorSetPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorSetPreferences {
    return new ValidatorSetPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorSetPreferences | PlainMessage<ValidatorSetPreferences> | undefined, b: ValidatorSetPreferences | PlainMessage<ValidatorSetPreferences> | undefined): boolean {
    return proto3.util.equals(ValidatorSetPreferences, a, b);
  }
}

