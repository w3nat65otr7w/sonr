// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file osmosis/valsetpref/v1beta1/tx.proto (package osmosis.valsetpref.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgDelegateBondedTokens, MsgDelegateBondedTokensResponse, MsgDelegateToValidatorSet, MsgDelegateToValidatorSetResponse, MsgRedelegateValidatorSet, MsgRedelegateValidatorSetResponse, MsgSetValidatorSetPreference, MsgSetValidatorSetPreferenceResponse, MsgUndelegateFromRebalancedValidatorSet, MsgUndelegateFromRebalancedValidatorSetResponse, MsgUndelegateFromValidatorSet, MsgUndelegateFromValidatorSetResponse, MsgWithdrawDelegationRewards, MsgWithdrawDelegationRewardsResponse } from "./tx_pb.js";

const TYPE_NAME = "osmosis.valsetpref.v1beta1.Msg";

/**
 * SetValidatorSetPreference creates a set of validator preference.
 * This message will process both create + update request.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.SetValidatorSetPreference
 */
export const MsgSetValidatorSetPreferenceService = {
  typeName: TYPE_NAME,
  method: "SetValidatorSetPreference",
  Request: MsgSetValidatorSetPreference,
  Response: MsgSetValidatorSetPreferenceResponse,
} as const;

/**
 * DelegateToValidatorSet gets the owner, coins and delegates to a
 * validator-set.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.DelegateToValidatorSet
 */
export const MsgDelegateToValidatorSetService = {
  typeName: TYPE_NAME,
  method: "DelegateToValidatorSet",
  Request: MsgDelegateToValidatorSet,
  Response: MsgDelegateToValidatorSetResponse,
} as const;

/**
 * UndelegateFromValidatorSet gets the owner and coins and undelegates from
 * validator-set. The unbonding logic will follow the `Undelegate` logic from
 * the sdk.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.UndelegateFromValidatorSet
 */
export const MsgUndelegateFromValidatorSetService = {
  typeName: TYPE_NAME,
  method: "UndelegateFromValidatorSet",
  Request: MsgUndelegateFromValidatorSet,
  Response: MsgUndelegateFromValidatorSetResponse,
} as const;

/**
 * UndelegateFromRebalancedValidatorSet undelegates the proivded amount from
 * the validator set, but takes into consideration the current delegations
 * to the user's validator set to determine the weights assigned to each.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.UndelegateFromRebalancedValidatorSet
 */
export const MsgUndelegateFromRebalancedValidatorSetService = {
  typeName: TYPE_NAME,
  method: "UndelegateFromRebalancedValidatorSet",
  Request: MsgUndelegateFromRebalancedValidatorSet,
  Response: MsgUndelegateFromRebalancedValidatorSetResponse,
} as const;

/**
 * RedelegateValidatorSet takes the existing validator set and redelegates to
 * a new set.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.RedelegateValidatorSet
 */
export const MsgRedelegateValidatorSetService = {
  typeName: TYPE_NAME,
  method: "RedelegateValidatorSet",
  Request: MsgRedelegateValidatorSet,
  Response: MsgRedelegateValidatorSetResponse,
} as const;

/**
 * WithdrawDelegationRewards allows users to claim rewards from the
 * validator-set.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.WithdrawDelegationRewards
 */
export const MsgWithdrawDelegationRewardsService = {
  typeName: TYPE_NAME,
  method: "WithdrawDelegationRewards",
  Request: MsgWithdrawDelegationRewards,
  Response: MsgWithdrawDelegationRewardsResponse,
} as const;

/**
 * DelegateBondedTokens allows users to break the lockup bond and delegate
 * osmo tokens to a predefined validator-set.
 *
 * @generated from rpc osmosis.valsetpref.v1beta1.Msg.DelegateBondedTokens
 */
export const MsgDelegateBondedTokensService = {
  typeName: TYPE_NAME,
  method: "DelegateBondedTokens",
  Request: MsgDelegateBondedTokens,
  Response: MsgDelegateBondedTokensResponse,
} as const;

