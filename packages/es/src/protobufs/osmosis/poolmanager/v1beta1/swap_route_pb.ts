// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolmanager/v1beta1/swap_route.proto (package osmosis.poolmanager.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message osmosis.poolmanager.v1beta1.SwapAmountInRoute
 */
export class SwapAmountInRoute extends Message<SwapAmountInRoute> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_out_denom = 2;
   */
  tokenOutDenom = "";

  constructor(data?: PartialMessage<SwapAmountInRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.SwapAmountInRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapAmountInRoute {
    return new SwapAmountInRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapAmountInRoute {
    return new SwapAmountInRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapAmountInRoute {
    return new SwapAmountInRoute().fromJsonString(jsonString, options);
  }

  static equals(a: SwapAmountInRoute | PlainMessage<SwapAmountInRoute> | undefined, b: SwapAmountInRoute | PlainMessage<SwapAmountInRoute> | undefined): boolean {
    return proto3.util.equals(SwapAmountInRoute, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.SwapAmountOutRoute
 */
export class SwapAmountOutRoute extends Message<SwapAmountOutRoute> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in_denom = 2;
   */
  tokenInDenom = "";

  constructor(data?: PartialMessage<SwapAmountOutRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.SwapAmountOutRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapAmountOutRoute {
    return new SwapAmountOutRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapAmountOutRoute {
    return new SwapAmountOutRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapAmountOutRoute {
    return new SwapAmountOutRoute().fromJsonString(jsonString, options);
  }

  static equals(a: SwapAmountOutRoute | PlainMessage<SwapAmountOutRoute> | undefined, b: SwapAmountOutRoute | PlainMessage<SwapAmountOutRoute> | undefined): boolean {
    return proto3.util.equals(SwapAmountOutRoute, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.SwapAmountInSplitRoute
 */
export class SwapAmountInSplitRoute extends Message<SwapAmountInSplitRoute> {
  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountInRoute pools = 1;
   */
  pools: SwapAmountInRoute[] = [];

  /**
   * @generated from field: string token_in_amount = 2;
   */
  tokenInAmount = "";

  constructor(data?: PartialMessage<SwapAmountInSplitRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.SwapAmountInSplitRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: SwapAmountInRoute, repeated: true },
    { no: 2, name: "token_in_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapAmountInSplitRoute {
    return new SwapAmountInSplitRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapAmountInSplitRoute {
    return new SwapAmountInSplitRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapAmountInSplitRoute {
    return new SwapAmountInSplitRoute().fromJsonString(jsonString, options);
  }

  static equals(a: SwapAmountInSplitRoute | PlainMessage<SwapAmountInSplitRoute> | undefined, b: SwapAmountInSplitRoute | PlainMessage<SwapAmountInSplitRoute> | undefined): boolean {
    return proto3.util.equals(SwapAmountInSplitRoute, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.SwapAmountOutSplitRoute
 */
export class SwapAmountOutSplitRoute extends Message<SwapAmountOutSplitRoute> {
  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountOutRoute pools = 1;
   */
  pools: SwapAmountOutRoute[] = [];

  /**
   * @generated from field: string token_out_amount = 2;
   */
  tokenOutAmount = "";

  constructor(data?: PartialMessage<SwapAmountOutSplitRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.SwapAmountOutSplitRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: SwapAmountOutRoute, repeated: true },
    { no: 2, name: "token_out_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapAmountOutSplitRoute {
    return new SwapAmountOutSplitRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapAmountOutSplitRoute {
    return new SwapAmountOutSplitRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapAmountOutSplitRoute {
    return new SwapAmountOutSplitRoute().fromJsonString(jsonString, options);
  }

  static equals(a: SwapAmountOutSplitRoute | PlainMessage<SwapAmountOutSplitRoute> | undefined, b: SwapAmountOutSplitRoute | PlainMessage<SwapAmountOutSplitRoute> | undefined): boolean {
    return proto3.util.equals(SwapAmountOutSplitRoute, a, b);
  }
}

