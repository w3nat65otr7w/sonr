// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolmanager/v1beta1/query.proto (package osmosis.poolmanager.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { SwapAmountInRoute, SwapAmountOutRoute } from "./swap_route_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { AlloyContractTakerFeeShareState, TakerFeeShareAgreement, TakerFeeSkimAccumulator } from "./taker_fee_share_pb.js";

/**
 * =============================== Params
 *
 * @generated from message osmosis.poolmanager.v1beta1.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * @generated from field: osmosis.poolmanager.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

/**
 * =============================== EstimateSwapExactAmountIn
 *
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInRequest
 */
export class EstimateSwapExactAmountInRequest extends Message<EstimateSwapExactAmountInRequest> {
  /**
   * DEPRECATED
   *
   * @generated from field: string sender = 1 [deprecated = true];
   * @deprecated
   */
  sender = "";

  /**
   * @generated from field: uint64 pool_id = 2 [deprecated = true];
   * @deprecated
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 3;
   */
  tokenIn = "";

  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountInRoute routes = 4;
   */
  routes: SwapAmountInRoute[] = [];

  constructor(data?: PartialMessage<EstimateSwapExactAmountInRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "routes", kind: "message", T: SwapAmountInRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSwapExactAmountInRequest {
    return new EstimateSwapExactAmountInRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountInRequest {
    return new EstimateSwapExactAmountInRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountInRequest {
    return new EstimateSwapExactAmountInRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSwapExactAmountInRequest | PlainMessage<EstimateSwapExactAmountInRequest> | undefined, b: EstimateSwapExactAmountInRequest | PlainMessage<EstimateSwapExactAmountInRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSwapExactAmountInRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInWithPrimitiveTypesRequest
 */
export class EstimateSwapExactAmountInWithPrimitiveTypesRequest extends Message<EstimateSwapExactAmountInWithPrimitiveTypesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1 [deprecated = true];
   * @deprecated
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: repeated uint64 routes_pool_id = 3;
   */
  routesPoolId: bigint[] = [];

  /**
   * @generated from field: repeated string routes_token_out_denom = 4;
   */
  routesTokenOutDenom: string[] = [];

  constructor(data?: PartialMessage<EstimateSwapExactAmountInWithPrimitiveTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInWithPrimitiveTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routes_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 4, name: "routes_token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSwapExactAmountInWithPrimitiveTypesRequest {
    return new EstimateSwapExactAmountInWithPrimitiveTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountInWithPrimitiveTypesRequest {
    return new EstimateSwapExactAmountInWithPrimitiveTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountInWithPrimitiveTypesRequest {
    return new EstimateSwapExactAmountInWithPrimitiveTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSwapExactAmountInWithPrimitiveTypesRequest | PlainMessage<EstimateSwapExactAmountInWithPrimitiveTypesRequest> | undefined, b: EstimateSwapExactAmountInWithPrimitiveTypesRequest | PlainMessage<EstimateSwapExactAmountInWithPrimitiveTypesRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSwapExactAmountInWithPrimitiveTypesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountInRequest
 */
export class EstimateSinglePoolSwapExactAmountInRequest extends Message<EstimateSinglePoolSwapExactAmountInRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: string token_out_denom = 3;
   */
  tokenOutDenom = "";

  constructor(data?: PartialMessage<EstimateSinglePoolSwapExactAmountInRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountInRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSinglePoolSwapExactAmountInRequest {
    return new EstimateSinglePoolSwapExactAmountInRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSinglePoolSwapExactAmountInRequest {
    return new EstimateSinglePoolSwapExactAmountInRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSinglePoolSwapExactAmountInRequest {
    return new EstimateSinglePoolSwapExactAmountInRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSinglePoolSwapExactAmountInRequest | PlainMessage<EstimateSinglePoolSwapExactAmountInRequest> | undefined, b: EstimateSinglePoolSwapExactAmountInRequest | PlainMessage<EstimateSinglePoolSwapExactAmountInRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSinglePoolSwapExactAmountInRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInResponse
 */
export class EstimateSwapExactAmountInResponse extends Message<EstimateSwapExactAmountInResponse> {
  /**
   * @generated from field: string token_out_amount = 1;
   */
  tokenOutAmount = "";

  constructor(data?: PartialMessage<EstimateSwapExactAmountInResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_out_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSwapExactAmountInResponse {
    return new EstimateSwapExactAmountInResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountInResponse {
    return new EstimateSwapExactAmountInResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountInResponse {
    return new EstimateSwapExactAmountInResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSwapExactAmountInResponse | PlainMessage<EstimateSwapExactAmountInResponse> | undefined, b: EstimateSwapExactAmountInResponse | PlainMessage<EstimateSwapExactAmountInResponse> | undefined): boolean {
    return proto3.util.equals(EstimateSwapExactAmountInResponse, a, b);
  }
}

/**
 * =============================== EstimateSwapExactAmountOut
 *
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutRequest
 */
export class EstimateSwapExactAmountOutRequest extends Message<EstimateSwapExactAmountOutRequest> {
  /**
   * DEPRECATED
   *
   * @generated from field: string sender = 1 [deprecated = true];
   * @deprecated
   */
  sender = "";

  /**
   * @generated from field: uint64 pool_id = 2 [deprecated = true];
   * @deprecated
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountOutRoute routes = 3;
   */
  routes: SwapAmountOutRoute[] = [];

  /**
   * @generated from field: string token_out = 4;
   */
  tokenOut = "";

  constructor(data?: PartialMessage<EstimateSwapExactAmountOutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "routes", kind: "message", T: SwapAmountOutRoute, repeated: true },
    { no: 4, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSwapExactAmountOutRequest {
    return new EstimateSwapExactAmountOutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountOutRequest {
    return new EstimateSwapExactAmountOutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountOutRequest {
    return new EstimateSwapExactAmountOutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSwapExactAmountOutRequest | PlainMessage<EstimateSwapExactAmountOutRequest> | undefined, b: EstimateSwapExactAmountOutRequest | PlainMessage<EstimateSwapExactAmountOutRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSwapExactAmountOutRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutWithPrimitiveTypesRequest
 */
export class EstimateSwapExactAmountOutWithPrimitiveTypesRequest extends Message<EstimateSwapExactAmountOutWithPrimitiveTypesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1 [deprecated = true];
   * @deprecated
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated uint64 routes_pool_id = 2;
   */
  routesPoolId: bigint[] = [];

  /**
   * @generated from field: repeated string routes_token_in_denom = 3;
   */
  routesTokenInDenom: string[] = [];

  /**
   * @generated from field: string token_out = 4;
   */
  tokenOut = "";

  constructor(data?: PartialMessage<EstimateSwapExactAmountOutWithPrimitiveTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutWithPrimitiveTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "routes_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 3, name: "routes_token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSwapExactAmountOutWithPrimitiveTypesRequest {
    return new EstimateSwapExactAmountOutWithPrimitiveTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountOutWithPrimitiveTypesRequest {
    return new EstimateSwapExactAmountOutWithPrimitiveTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountOutWithPrimitiveTypesRequest {
    return new EstimateSwapExactAmountOutWithPrimitiveTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSwapExactAmountOutWithPrimitiveTypesRequest | PlainMessage<EstimateSwapExactAmountOutWithPrimitiveTypesRequest> | undefined, b: EstimateSwapExactAmountOutWithPrimitiveTypesRequest | PlainMessage<EstimateSwapExactAmountOutWithPrimitiveTypesRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSwapExactAmountOutWithPrimitiveTypesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountOutRequest
 */
export class EstimateSinglePoolSwapExactAmountOutRequest extends Message<EstimateSinglePoolSwapExactAmountOutRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in_denom = 2;
   */
  tokenInDenom = "";

  /**
   * @generated from field: string token_out = 3;
   */
  tokenOut = "";

  constructor(data?: PartialMessage<EstimateSinglePoolSwapExactAmountOutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountOutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSinglePoolSwapExactAmountOutRequest {
    return new EstimateSinglePoolSwapExactAmountOutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSinglePoolSwapExactAmountOutRequest {
    return new EstimateSinglePoolSwapExactAmountOutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSinglePoolSwapExactAmountOutRequest {
    return new EstimateSinglePoolSwapExactAmountOutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSinglePoolSwapExactAmountOutRequest | PlainMessage<EstimateSinglePoolSwapExactAmountOutRequest> | undefined, b: EstimateSinglePoolSwapExactAmountOutRequest | PlainMessage<EstimateSinglePoolSwapExactAmountOutRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSinglePoolSwapExactAmountOutRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutResponse
 */
export class EstimateSwapExactAmountOutResponse extends Message<EstimateSwapExactAmountOutResponse> {
  /**
   * @generated from field: string token_in_amount = 1;
   */
  tokenInAmount = "";

  constructor(data?: PartialMessage<EstimateSwapExactAmountOutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_in_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSwapExactAmountOutResponse {
    return new EstimateSwapExactAmountOutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountOutResponse {
    return new EstimateSwapExactAmountOutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSwapExactAmountOutResponse {
    return new EstimateSwapExactAmountOutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSwapExactAmountOutResponse | PlainMessage<EstimateSwapExactAmountOutResponse> | undefined, b: EstimateSwapExactAmountOutResponse | PlainMessage<EstimateSwapExactAmountOutResponse> | undefined): boolean {
    return proto3.util.equals(EstimateSwapExactAmountOutResponse, a, b);
  }
}

/**
 * =============================== NumPools
 *
 * @generated from message osmosis.poolmanager.v1beta1.NumPoolsRequest
 */
export class NumPoolsRequest extends Message<NumPoolsRequest> {
  constructor(data?: PartialMessage<NumPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.NumPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumPoolsRequest {
    return new NumPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumPoolsRequest {
    return new NumPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumPoolsRequest {
    return new NumPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NumPoolsRequest | PlainMessage<NumPoolsRequest> | undefined, b: NumPoolsRequest | PlainMessage<NumPoolsRequest> | undefined): boolean {
    return proto3.util.equals(NumPoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.NumPoolsResponse
 */
export class NumPoolsResponse extends Message<NumPoolsResponse> {
  /**
   * @generated from field: uint64 num_pools = 1;
   */
  numPools = protoInt64.zero;

  constructor(data?: PartialMessage<NumPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.NumPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumPoolsResponse {
    return new NumPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumPoolsResponse {
    return new NumPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumPoolsResponse {
    return new NumPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NumPoolsResponse | PlainMessage<NumPoolsResponse> | undefined, b: NumPoolsResponse | PlainMessage<NumPoolsResponse> | undefined): boolean {
    return proto3.util.equals(NumPoolsResponse, a, b);
  }
}

/**
 * =============================== Pool
 *
 * @generated from message osmosis.poolmanager.v1beta1.PoolRequest
 */
export class PoolRequest extends Message<PoolRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<PoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.PoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRequest {
    return new PoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRequest {
    return new PoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRequest {
    return new PoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRequest | PlainMessage<PoolRequest> | undefined, b: PoolRequest | PlainMessage<PoolRequest> | undefined): boolean {
    return proto3.util.equals(PoolRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.PoolResponse
 */
export class PoolResponse extends Message<PoolResponse> {
  /**
   * @generated from field: google.protobuf.Any pool = 1;
   */
  pool?: Any;

  constructor(data?: PartialMessage<PoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.PoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolResponse {
    return new PoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolResponse | PlainMessage<PoolResponse> | undefined, b: PoolResponse | PlainMessage<PoolResponse> | undefined): boolean {
    return proto3.util.equals(PoolResponse, a, b);
  }
}

/**
 * =============================== AllPools
 *
 * @generated from message osmosis.poolmanager.v1beta1.AllPoolsRequest
 */
export class AllPoolsRequest extends Message<AllPoolsRequest> {
  constructor(data?: PartialMessage<AllPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllPoolsRequest {
    return new AllPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllPoolsRequest {
    return new AllPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllPoolsRequest {
    return new AllPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllPoolsRequest | PlainMessage<AllPoolsRequest> | undefined, b: AllPoolsRequest | PlainMessage<AllPoolsRequest> | undefined): boolean {
    return proto3.util.equals(AllPoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllPoolsResponse
 */
export class AllPoolsResponse extends Message<AllPoolsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  constructor(data?: PartialMessage<AllPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllPoolsResponse {
    return new AllPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllPoolsResponse {
    return new AllPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllPoolsResponse {
    return new AllPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllPoolsResponse | PlainMessage<AllPoolsResponse> | undefined, b: AllPoolsResponse | PlainMessage<AllPoolsResponse> | undefined): boolean {
    return proto3.util.equals(AllPoolsResponse, a, b);
  }
}

/**
 * =======================================================
 * ListPoolsByDenomRequest
 *
 * @generated from message osmosis.poolmanager.v1beta1.ListPoolsByDenomRequest
 */
export class ListPoolsByDenomRequest extends Message<ListPoolsByDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<ListPoolsByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.ListPoolsByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPoolsByDenomRequest {
    return new ListPoolsByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPoolsByDenomRequest {
    return new ListPoolsByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPoolsByDenomRequest {
    return new ListPoolsByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPoolsByDenomRequest | PlainMessage<ListPoolsByDenomRequest> | undefined, b: ListPoolsByDenomRequest | PlainMessage<ListPoolsByDenomRequest> | undefined): boolean {
    return proto3.util.equals(ListPoolsByDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.ListPoolsByDenomResponse
 */
export class ListPoolsByDenomResponse extends Message<ListPoolsByDenomResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  constructor(data?: PartialMessage<ListPoolsByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.ListPoolsByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPoolsByDenomResponse {
    return new ListPoolsByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPoolsByDenomResponse {
    return new ListPoolsByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPoolsByDenomResponse {
    return new ListPoolsByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPoolsByDenomResponse | PlainMessage<ListPoolsByDenomResponse> | undefined, b: ListPoolsByDenomResponse | PlainMessage<ListPoolsByDenomResponse> | undefined): boolean {
    return proto3.util.equals(ListPoolsByDenomResponse, a, b);
  }
}

/**
 * ==========================================================
 * SpotPriceRequest defines the gRPC request structure for a SpotPrice
 * query.
 *
 * @generated from message osmosis.poolmanager.v1beta1.SpotPriceRequest
 */
export class SpotPriceRequest extends Message<SpotPriceRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string base_asset_denom = 2;
   */
  baseAssetDenom = "";

  /**
   * @generated from field: string quote_asset_denom = 3;
   */
  quoteAssetDenom = "";

  constructor(data?: PartialMessage<SpotPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.SpotPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotPriceRequest {
    return new SpotPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotPriceRequest {
    return new SpotPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotPriceRequest {
    return new SpotPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpotPriceRequest | PlainMessage<SpotPriceRequest> | undefined, b: SpotPriceRequest | PlainMessage<SpotPriceRequest> | undefined): boolean {
    return proto3.util.equals(SpotPriceRequest, a, b);
  }
}

/**
 * SpotPriceResponse defines the gRPC response structure for a SpotPrice
 * query.
 *
 * @generated from message osmosis.poolmanager.v1beta1.SpotPriceResponse
 */
export class SpotPriceResponse extends Message<SpotPriceResponse> {
  /**
   * String of the Dec. Ex) 10.203uatom
   *
   * @generated from field: string spot_price = 1;
   */
  spotPrice = "";

  constructor(data?: PartialMessage<SpotPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.SpotPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotPriceResponse {
    return new SpotPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotPriceResponse {
    return new SpotPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotPriceResponse {
    return new SpotPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpotPriceResponse | PlainMessage<SpotPriceResponse> | undefined, b: SpotPriceResponse | PlainMessage<SpotPriceResponse> | undefined): boolean {
    return proto3.util.equals(SpotPriceResponse, a, b);
  }
}

/**
 * =============================== TotalPoolLiquidity
 *
 * @generated from message osmosis.poolmanager.v1beta1.TotalPoolLiquidityRequest
 */
export class TotalPoolLiquidityRequest extends Message<TotalPoolLiquidityRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<TotalPoolLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TotalPoolLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalPoolLiquidityRequest {
    return new TotalPoolLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalPoolLiquidityRequest {
    return new TotalPoolLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalPoolLiquidityRequest {
    return new TotalPoolLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TotalPoolLiquidityRequest | PlainMessage<TotalPoolLiquidityRequest> | undefined, b: TotalPoolLiquidityRequest | PlainMessage<TotalPoolLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(TotalPoolLiquidityRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TotalPoolLiquidityResponse
 */
export class TotalPoolLiquidityResponse extends Message<TotalPoolLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
   */
  liquidity: Coin[] = [];

  constructor(data?: PartialMessage<TotalPoolLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TotalPoolLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalPoolLiquidityResponse {
    return new TotalPoolLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalPoolLiquidityResponse {
    return new TotalPoolLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalPoolLiquidityResponse {
    return new TotalPoolLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TotalPoolLiquidityResponse | PlainMessage<TotalPoolLiquidityResponse> | undefined, b: TotalPoolLiquidityResponse | PlainMessage<TotalPoolLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(TotalPoolLiquidityResponse, a, b);
  }
}

/**
 * =============================== TotalLiquidity
 *
 * @generated from message osmosis.poolmanager.v1beta1.TotalLiquidityRequest
 */
export class TotalLiquidityRequest extends Message<TotalLiquidityRequest> {
  constructor(data?: PartialMessage<TotalLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TotalLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalLiquidityRequest {
    return new TotalLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalLiquidityRequest {
    return new TotalLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalLiquidityRequest {
    return new TotalLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TotalLiquidityRequest | PlainMessage<TotalLiquidityRequest> | undefined, b: TotalLiquidityRequest | PlainMessage<TotalLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(TotalLiquidityRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TotalLiquidityResponse
 */
export class TotalLiquidityResponse extends Message<TotalLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
   */
  liquidity: Coin[] = [];

  constructor(data?: PartialMessage<TotalLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TotalLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalLiquidityResponse {
    return new TotalLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalLiquidityResponse {
    return new TotalLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalLiquidityResponse {
    return new TotalLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TotalLiquidityResponse | PlainMessage<TotalLiquidityResponse> | undefined, b: TotalLiquidityResponse | PlainMessage<TotalLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(TotalLiquidityResponse, a, b);
  }
}

/**
 * =============================== TotalVolumeForPool
 *
 * @generated from message osmosis.poolmanager.v1beta1.TotalVolumeForPoolRequest
 */
export class TotalVolumeForPoolRequest extends Message<TotalVolumeForPoolRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<TotalVolumeForPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TotalVolumeForPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalVolumeForPoolRequest {
    return new TotalVolumeForPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalVolumeForPoolRequest {
    return new TotalVolumeForPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalVolumeForPoolRequest {
    return new TotalVolumeForPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TotalVolumeForPoolRequest | PlainMessage<TotalVolumeForPoolRequest> | undefined, b: TotalVolumeForPoolRequest | PlainMessage<TotalVolumeForPoolRequest> | undefined): boolean {
    return proto3.util.equals(TotalVolumeForPoolRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TotalVolumeForPoolResponse
 */
export class TotalVolumeForPoolResponse extends Message<TotalVolumeForPoolResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin volume = 1;
   */
  volume: Coin[] = [];

  constructor(data?: PartialMessage<TotalVolumeForPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TotalVolumeForPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "volume", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalVolumeForPoolResponse {
    return new TotalVolumeForPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalVolumeForPoolResponse {
    return new TotalVolumeForPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalVolumeForPoolResponse {
    return new TotalVolumeForPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TotalVolumeForPoolResponse | PlainMessage<TotalVolumeForPoolResponse> | undefined, b: TotalVolumeForPoolResponse | PlainMessage<TotalVolumeForPoolResponse> | undefined): boolean {
    return proto3.util.equals(TotalVolumeForPoolResponse, a, b);
  }
}

/**
 * =============================== TradingPairTakerFee
 *
 * @generated from message osmosis.poolmanager.v1beta1.TradingPairTakerFeeRequest
 */
export class TradingPairTakerFeeRequest extends Message<TradingPairTakerFeeRequest> {
  /**
   * @generated from field: string denom_0 = 1;
   */
  denom0 = "";

  /**
   * @generated from field: string denom_1 = 2;
   */
  denom1 = "";

  constructor(data?: PartialMessage<TradingPairTakerFeeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TradingPairTakerFeeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradingPairTakerFeeRequest {
    return new TradingPairTakerFeeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradingPairTakerFeeRequest {
    return new TradingPairTakerFeeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradingPairTakerFeeRequest {
    return new TradingPairTakerFeeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TradingPairTakerFeeRequest | PlainMessage<TradingPairTakerFeeRequest> | undefined, b: TradingPairTakerFeeRequest | PlainMessage<TradingPairTakerFeeRequest> | undefined): boolean {
    return proto3.util.equals(TradingPairTakerFeeRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TradingPairTakerFeeResponse
 */
export class TradingPairTakerFeeResponse extends Message<TradingPairTakerFeeResponse> {
  /**
   * @generated from field: string taker_fee = 1;
   */
  takerFee = "";

  constructor(data?: PartialMessage<TradingPairTakerFeeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TradingPairTakerFeeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradingPairTakerFeeResponse {
    return new TradingPairTakerFeeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradingPairTakerFeeResponse {
    return new TradingPairTakerFeeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradingPairTakerFeeResponse {
    return new TradingPairTakerFeeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TradingPairTakerFeeResponse | PlainMessage<TradingPairTakerFeeResponse> | undefined, b: TradingPairTakerFeeResponse | PlainMessage<TradingPairTakerFeeResponse> | undefined): boolean {
    return proto3.util.equals(TradingPairTakerFeeResponse, a, b);
  }
}

/**
 * EstimateTradeBasedOnPriceImpactRequest represents a request to estimate a
 * trade for Balancer/StableSwap/Concentrated liquidity pool types based on the
 * given parameters.
 *
 * @generated from message osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactRequest
 */
export class EstimateTradeBasedOnPriceImpactRequest extends Message<EstimateTradeBasedOnPriceImpactRequest> {
  /**
   * from_coin is the total amount of tokens that the user wants to sell.
   *
   * @generated from field: cosmos.base.v1beta1.Coin from_coin = 1;
   */
  fromCoin?: Coin;

  /**
   * to_coin_denom is the denom identifier of the token that the user wants to
   * buy.
   *
   * @generated from field: string to_coin_denom = 2;
   */
  toCoinDenom = "";

  /**
   * pool_id is the identifier of the liquidity pool that the trade will occur
   * on.
   *
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * max_price_impact is the maximum percentage that the user is willing
   * to affect the price of the liquidity pool.
   *
   * @generated from field: string max_price_impact = 4;
   */
  maxPriceImpact = "";

  /**
   * external_price is an optional external price that the user can enter.
   * It adjusts the MaxPriceImpact as the SpotPrice of a pool can be changed at
   * any time.
   *
   * @generated from field: string external_price = 5;
   */
  externalPrice = "";

  constructor(data?: PartialMessage<EstimateTradeBasedOnPriceImpactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_coin", kind: "message", T: Coin },
    { no: 2, name: "to_coin_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "max_price_impact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateTradeBasedOnPriceImpactRequest {
    return new EstimateTradeBasedOnPriceImpactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateTradeBasedOnPriceImpactRequest {
    return new EstimateTradeBasedOnPriceImpactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateTradeBasedOnPriceImpactRequest {
    return new EstimateTradeBasedOnPriceImpactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateTradeBasedOnPriceImpactRequest | PlainMessage<EstimateTradeBasedOnPriceImpactRequest> | undefined, b: EstimateTradeBasedOnPriceImpactRequest | PlainMessage<EstimateTradeBasedOnPriceImpactRequest> | undefined): boolean {
    return proto3.util.equals(EstimateTradeBasedOnPriceImpactRequest, a, b);
  }
}

/**
 * EstimateTradeBasedOnPriceImpactResponse represents the response data
 * for an estimated trade based on price impact. If a trade fails to be
 * estimated the response would be 0,0 for input_coin and output_coin and will
 * not error.
 *
 * @generated from message osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactResponse
 */
export class EstimateTradeBasedOnPriceImpactResponse extends Message<EstimateTradeBasedOnPriceImpactResponse> {
  /**
   * input_coin is the actual input amount that would be tradeable
   * under the specified price impact.
   *
   * @generated from field: cosmos.base.v1beta1.Coin input_coin = 1;
   */
  inputCoin?: Coin;

  /**
   * output_coin is the amount of tokens of the ToCoinDenom type
   * that will be received for the actual InputCoin trade.
   *
   * @generated from field: cosmos.base.v1beta1.Coin output_coin = 2;
   */
  outputCoin?: Coin;

  constructor(data?: PartialMessage<EstimateTradeBasedOnPriceImpactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_coin", kind: "message", T: Coin },
    { no: 2, name: "output_coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateTradeBasedOnPriceImpactResponse {
    return new EstimateTradeBasedOnPriceImpactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateTradeBasedOnPriceImpactResponse {
    return new EstimateTradeBasedOnPriceImpactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateTradeBasedOnPriceImpactResponse {
    return new EstimateTradeBasedOnPriceImpactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateTradeBasedOnPriceImpactResponse | PlainMessage<EstimateTradeBasedOnPriceImpactResponse> | undefined, b: EstimateTradeBasedOnPriceImpactResponse | PlainMessage<EstimateTradeBasedOnPriceImpactResponse> | undefined): boolean {
    return proto3.util.equals(EstimateTradeBasedOnPriceImpactResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllTakerFeeShareAgreementsRequest
 */
export class AllTakerFeeShareAgreementsRequest extends Message<AllTakerFeeShareAgreementsRequest> {
  constructor(data?: PartialMessage<AllTakerFeeShareAgreementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllTakerFeeShareAgreementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllTakerFeeShareAgreementsRequest {
    return new AllTakerFeeShareAgreementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllTakerFeeShareAgreementsRequest {
    return new AllTakerFeeShareAgreementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllTakerFeeShareAgreementsRequest {
    return new AllTakerFeeShareAgreementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllTakerFeeShareAgreementsRequest | PlainMessage<AllTakerFeeShareAgreementsRequest> | undefined, b: AllTakerFeeShareAgreementsRequest | PlainMessage<AllTakerFeeShareAgreementsRequest> | undefined): boolean {
    return proto3.util.equals(AllTakerFeeShareAgreementsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllTakerFeeShareAgreementsResponse
 */
export class AllTakerFeeShareAgreementsResponse extends Message<AllTakerFeeShareAgreementsResponse> {
  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 1;
   */
  takerFeeShareAgreements: TakerFeeShareAgreement[] = [];

  constructor(data?: PartialMessage<AllTakerFeeShareAgreementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllTakerFeeShareAgreementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taker_fee_share_agreements", kind: "message", T: TakerFeeShareAgreement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllTakerFeeShareAgreementsResponse {
    return new AllTakerFeeShareAgreementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllTakerFeeShareAgreementsResponse {
    return new AllTakerFeeShareAgreementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllTakerFeeShareAgreementsResponse {
    return new AllTakerFeeShareAgreementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllTakerFeeShareAgreementsResponse | PlainMessage<AllTakerFeeShareAgreementsResponse> | undefined, b: AllTakerFeeShareAgreementsResponse | PlainMessage<AllTakerFeeShareAgreementsResponse> | undefined): boolean {
    return proto3.util.equals(AllTakerFeeShareAgreementsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeShareAgreementFromDenomRequest
 */
export class TakerFeeShareAgreementFromDenomRequest extends Message<TakerFeeShareAgreementFromDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<TakerFeeShareAgreementFromDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TakerFeeShareAgreementFromDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakerFeeShareAgreementFromDenomRequest {
    return new TakerFeeShareAgreementFromDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakerFeeShareAgreementFromDenomRequest {
    return new TakerFeeShareAgreementFromDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakerFeeShareAgreementFromDenomRequest {
    return new TakerFeeShareAgreementFromDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TakerFeeShareAgreementFromDenomRequest | PlainMessage<TakerFeeShareAgreementFromDenomRequest> | undefined, b: TakerFeeShareAgreementFromDenomRequest | PlainMessage<TakerFeeShareAgreementFromDenomRequest> | undefined): boolean {
    return proto3.util.equals(TakerFeeShareAgreementFromDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeShareAgreementFromDenomResponse
 */
export class TakerFeeShareAgreementFromDenomResponse extends Message<TakerFeeShareAgreementFromDenomResponse> {
  /**
   * @generated from field: osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreement = 1;
   */
  takerFeeShareAgreement?: TakerFeeShareAgreement;

  constructor(data?: PartialMessage<TakerFeeShareAgreementFromDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TakerFeeShareAgreementFromDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taker_fee_share_agreement", kind: "message", T: TakerFeeShareAgreement },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakerFeeShareAgreementFromDenomResponse {
    return new TakerFeeShareAgreementFromDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakerFeeShareAgreementFromDenomResponse {
    return new TakerFeeShareAgreementFromDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakerFeeShareAgreementFromDenomResponse {
    return new TakerFeeShareAgreementFromDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TakerFeeShareAgreementFromDenomResponse | PlainMessage<TakerFeeShareAgreementFromDenomResponse> | undefined, b: TakerFeeShareAgreementFromDenomResponse | PlainMessage<TakerFeeShareAgreementFromDenomResponse> | undefined): boolean {
    return proto3.util.equals(TakerFeeShareAgreementFromDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeShareDenomsToAccruedValueRequest
 */
export class TakerFeeShareDenomsToAccruedValueRequest extends Message<TakerFeeShareDenomsToAccruedValueRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string takerFeeDenom = 2;
   */
  takerFeeDenom = "";

  constructor(data?: PartialMessage<TakerFeeShareDenomsToAccruedValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TakerFeeShareDenomsToAccruedValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "takerFeeDenom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakerFeeShareDenomsToAccruedValueRequest {
    return new TakerFeeShareDenomsToAccruedValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakerFeeShareDenomsToAccruedValueRequest {
    return new TakerFeeShareDenomsToAccruedValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakerFeeShareDenomsToAccruedValueRequest {
    return new TakerFeeShareDenomsToAccruedValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TakerFeeShareDenomsToAccruedValueRequest | PlainMessage<TakerFeeShareDenomsToAccruedValueRequest> | undefined, b: TakerFeeShareDenomsToAccruedValueRequest | PlainMessage<TakerFeeShareDenomsToAccruedValueRequest> | undefined): boolean {
    return proto3.util.equals(TakerFeeShareDenomsToAccruedValueRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeShareDenomsToAccruedValueResponse
 */
export class TakerFeeShareDenomsToAccruedValueResponse extends Message<TakerFeeShareDenomsToAccruedValueResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<TakerFeeShareDenomsToAccruedValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TakerFeeShareDenomsToAccruedValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakerFeeShareDenomsToAccruedValueResponse {
    return new TakerFeeShareDenomsToAccruedValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakerFeeShareDenomsToAccruedValueResponse {
    return new TakerFeeShareDenomsToAccruedValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakerFeeShareDenomsToAccruedValueResponse {
    return new TakerFeeShareDenomsToAccruedValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TakerFeeShareDenomsToAccruedValueResponse | PlainMessage<TakerFeeShareDenomsToAccruedValueResponse> | undefined, b: TakerFeeShareDenomsToAccruedValueResponse | PlainMessage<TakerFeeShareDenomsToAccruedValueResponse> | undefined): boolean {
    return proto3.util.equals(TakerFeeShareDenomsToAccruedValueResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllTakerFeeShareAccumulatorsRequest
 */
export class AllTakerFeeShareAccumulatorsRequest extends Message<AllTakerFeeShareAccumulatorsRequest> {
  constructor(data?: PartialMessage<AllTakerFeeShareAccumulatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllTakerFeeShareAccumulatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllTakerFeeShareAccumulatorsRequest {
    return new AllTakerFeeShareAccumulatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllTakerFeeShareAccumulatorsRequest {
    return new AllTakerFeeShareAccumulatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllTakerFeeShareAccumulatorsRequest {
    return new AllTakerFeeShareAccumulatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllTakerFeeShareAccumulatorsRequest | PlainMessage<AllTakerFeeShareAccumulatorsRequest> | undefined, b: AllTakerFeeShareAccumulatorsRequest | PlainMessage<AllTakerFeeShareAccumulatorsRequest> | undefined): boolean {
    return proto3.util.equals(AllTakerFeeShareAccumulatorsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllTakerFeeShareAccumulatorsResponse
 */
export class AllTakerFeeShareAccumulatorsResponse extends Message<AllTakerFeeShareAccumulatorsResponse> {
  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator taker_fee_skim_accumulators = 1;
   */
  takerFeeSkimAccumulators: TakerFeeSkimAccumulator[] = [];

  constructor(data?: PartialMessage<AllTakerFeeShareAccumulatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllTakerFeeShareAccumulatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taker_fee_skim_accumulators", kind: "message", T: TakerFeeSkimAccumulator, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllTakerFeeShareAccumulatorsResponse {
    return new AllTakerFeeShareAccumulatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllTakerFeeShareAccumulatorsResponse {
    return new AllTakerFeeShareAccumulatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllTakerFeeShareAccumulatorsResponse {
    return new AllTakerFeeShareAccumulatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllTakerFeeShareAccumulatorsResponse | PlainMessage<AllTakerFeeShareAccumulatorsResponse> | undefined, b: AllTakerFeeShareAccumulatorsResponse | PlainMessage<AllTakerFeeShareAccumulatorsResponse> | undefined): boolean {
    return proto3.util.equals(AllTakerFeeShareAccumulatorsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromDenomRequest
 */
export class RegisteredAlloyedPoolFromDenomRequest extends Message<RegisteredAlloyedPoolFromDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<RegisteredAlloyedPoolFromDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisteredAlloyedPoolFromDenomRequest {
    return new RegisteredAlloyedPoolFromDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromDenomRequest {
    return new RegisteredAlloyedPoolFromDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromDenomRequest {
    return new RegisteredAlloyedPoolFromDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisteredAlloyedPoolFromDenomRequest | PlainMessage<RegisteredAlloyedPoolFromDenomRequest> | undefined, b: RegisteredAlloyedPoolFromDenomRequest | PlainMessage<RegisteredAlloyedPoolFromDenomRequest> | undefined): boolean {
    return proto3.util.equals(RegisteredAlloyedPoolFromDenomRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromDenomResponse
 */
export class RegisteredAlloyedPoolFromDenomResponse extends Message<RegisteredAlloyedPoolFromDenomResponse> {
  /**
   * @generated from field: osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState contract_state = 1;
   */
  contractState?: AlloyContractTakerFeeShareState;

  constructor(data?: PartialMessage<RegisteredAlloyedPoolFromDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_state", kind: "message", T: AlloyContractTakerFeeShareState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisteredAlloyedPoolFromDenomResponse {
    return new RegisteredAlloyedPoolFromDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromDenomResponse {
    return new RegisteredAlloyedPoolFromDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromDenomResponse {
    return new RegisteredAlloyedPoolFromDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisteredAlloyedPoolFromDenomResponse | PlainMessage<RegisteredAlloyedPoolFromDenomResponse> | undefined, b: RegisteredAlloyedPoolFromDenomResponse | PlainMessage<RegisteredAlloyedPoolFromDenomResponse> | undefined): boolean {
    return proto3.util.equals(RegisteredAlloyedPoolFromDenomResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromPoolIdRequest
 */
export class RegisteredAlloyedPoolFromPoolIdRequest extends Message<RegisteredAlloyedPoolFromPoolIdRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<RegisteredAlloyedPoolFromPoolIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromPoolIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisteredAlloyedPoolFromPoolIdRequest {
    return new RegisteredAlloyedPoolFromPoolIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromPoolIdRequest {
    return new RegisteredAlloyedPoolFromPoolIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromPoolIdRequest {
    return new RegisteredAlloyedPoolFromPoolIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisteredAlloyedPoolFromPoolIdRequest | PlainMessage<RegisteredAlloyedPoolFromPoolIdRequest> | undefined, b: RegisteredAlloyedPoolFromPoolIdRequest | PlainMessage<RegisteredAlloyedPoolFromPoolIdRequest> | undefined): boolean {
    return proto3.util.equals(RegisteredAlloyedPoolFromPoolIdRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromPoolIdResponse
 */
export class RegisteredAlloyedPoolFromPoolIdResponse extends Message<RegisteredAlloyedPoolFromPoolIdResponse> {
  /**
   * @generated from field: osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState contract_state = 1;
   */
  contractState?: AlloyContractTakerFeeShareState;

  constructor(data?: PartialMessage<RegisteredAlloyedPoolFromPoolIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.RegisteredAlloyedPoolFromPoolIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_state", kind: "message", T: AlloyContractTakerFeeShareState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisteredAlloyedPoolFromPoolIdResponse {
    return new RegisteredAlloyedPoolFromPoolIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromPoolIdResponse {
    return new RegisteredAlloyedPoolFromPoolIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisteredAlloyedPoolFromPoolIdResponse {
    return new RegisteredAlloyedPoolFromPoolIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisteredAlloyedPoolFromPoolIdResponse | PlainMessage<RegisteredAlloyedPoolFromPoolIdResponse> | undefined, b: RegisteredAlloyedPoolFromPoolIdResponse | PlainMessage<RegisteredAlloyedPoolFromPoolIdResponse> | undefined): boolean {
    return proto3.util.equals(RegisteredAlloyedPoolFromPoolIdResponse, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllRegisteredAlloyedPoolsRequest
 */
export class AllRegisteredAlloyedPoolsRequest extends Message<AllRegisteredAlloyedPoolsRequest> {
  constructor(data?: PartialMessage<AllRegisteredAlloyedPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllRegisteredAlloyedPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllRegisteredAlloyedPoolsRequest {
    return new AllRegisteredAlloyedPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllRegisteredAlloyedPoolsRequest {
    return new AllRegisteredAlloyedPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllRegisteredAlloyedPoolsRequest {
    return new AllRegisteredAlloyedPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllRegisteredAlloyedPoolsRequest | PlainMessage<AllRegisteredAlloyedPoolsRequest> | undefined, b: AllRegisteredAlloyedPoolsRequest | PlainMessage<AllRegisteredAlloyedPoolsRequest> | undefined): boolean {
    return proto3.util.equals(AllRegisteredAlloyedPoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.poolmanager.v1beta1.AllRegisteredAlloyedPoolsResponse
 */
export class AllRegisteredAlloyedPoolsResponse extends Message<AllRegisteredAlloyedPoolsResponse> {
  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState contract_states = 1;
   */
  contractStates: AlloyContractTakerFeeShareState[] = [];

  constructor(data?: PartialMessage<AllRegisteredAlloyedPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AllRegisteredAlloyedPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_states", kind: "message", T: AlloyContractTakerFeeShareState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllRegisteredAlloyedPoolsResponse {
    return new AllRegisteredAlloyedPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllRegisteredAlloyedPoolsResponse {
    return new AllRegisteredAlloyedPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllRegisteredAlloyedPoolsResponse {
    return new AllRegisteredAlloyedPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllRegisteredAlloyedPoolsResponse | PlainMessage<AllRegisteredAlloyedPoolsResponse> | undefined, b: AllRegisteredAlloyedPoolsResponse | PlainMessage<AllRegisteredAlloyedPoolsResponse> | undefined): boolean {
    return proto3.util.equals(AllRegisteredAlloyedPoolsResponse, a, b);
  }
}

