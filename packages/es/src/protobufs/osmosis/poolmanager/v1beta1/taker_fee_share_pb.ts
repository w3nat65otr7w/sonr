// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolmanager/v1beta1/taker_fee_share.proto (package osmosis.poolmanager.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * TakerFeeShareAgreement represents the agreement between the Osmosis protocol
 * and a specific denom to share a certain percent of taker fees generated in
 * any route that contains said denom. For example, if the agreement specifies a
 * 10% skim_percent, this means 10% of the taker fees generated in a swap route
 * containing the specified denom will be sent to the address specified
 * in the skim_address field at the end of each epoch. These skim_percents are
 * additive, so if three taker fee agreements have skim percents of 10%, 20%,
 * and 30%, the total skim percent for the route will be 60%.
 *
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeShareAgreement
 */
export class TakerFeeShareAgreement extends Message<TakerFeeShareAgreement> {
  /**
   * denom is the denom that has the taker fee share agreement.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * skim_percent is the percentage of taker fees that will be skimmed for the
   * denom, in the event that the denom is included in the swap route.
   *
   * @generated from field: string skim_percent = 2;
   */
  skimPercent = "";

  /**
   * skim_address is the address belonging to the respective denom
   * that the skimmed taker fees will be sent to at the end of each epoch.
   *
   * @generated from field: string skim_address = 3;
   */
  skimAddress = "";

  constructor(data?: PartialMessage<TakerFeeShareAgreement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TakerFeeShareAgreement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "skim_percent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "skim_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakerFeeShareAgreement {
    return new TakerFeeShareAgreement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakerFeeShareAgreement {
    return new TakerFeeShareAgreement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakerFeeShareAgreement {
    return new TakerFeeShareAgreement().fromJsonString(jsonString, options);
  }

  static equals(a: TakerFeeShareAgreement | PlainMessage<TakerFeeShareAgreement> | undefined, b: TakerFeeShareAgreement | PlainMessage<TakerFeeShareAgreement> | undefined): boolean {
    return proto3.util.equals(TakerFeeShareAgreement, a, b);
  }
}

/**
 * TakerFeeSkimAccumulator accumulates the total skimmed taker fees for each
 * denom that has a taker fee share agreement.
 *
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator
 */
export class TakerFeeSkimAccumulator extends Message<TakerFeeSkimAccumulator> {
  /**
   * denom is the denom that has the taker fee share agreement.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * skimmed_taker_fees is the total skimmed taker fees for the denom.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin skimmed_taker_fees = 2;
   */
  skimmedTakerFees: Coin[] = [];

  constructor(data?: PartialMessage<TakerFeeSkimAccumulator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "skimmed_taker_fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakerFeeSkimAccumulator {
    return new TakerFeeSkimAccumulator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakerFeeSkimAccumulator {
    return new TakerFeeSkimAccumulator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakerFeeSkimAccumulator {
    return new TakerFeeSkimAccumulator().fromJsonString(jsonString, options);
  }

  static equals(a: TakerFeeSkimAccumulator | PlainMessage<TakerFeeSkimAccumulator> | undefined, b: TakerFeeSkimAccumulator | PlainMessage<TakerFeeSkimAccumulator> | undefined): boolean {
    return proto3.util.equals(TakerFeeSkimAccumulator, a, b);
  }
}

/**
 * AlloyContractTakerFeeShareState contains the contract address of the alloyed
 * asset pool, along with the adjusted taker fee share agreements for any asset
 * within the alloyed asset pool that has a taker fee share agreement. If for
 * instance there are two denoms, and denomA makes up 50 percent and denomB
 * makes up 50 percent, and denom A has a taker fee share agreement with a skim
 * percent of 10%, then the adjusted taker fee share agreement for denomA will
 * be 5%.
 *
 * @generated from message osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState
 */
export class AlloyContractTakerFeeShareState extends Message<AlloyContractTakerFeeShareState> {
  /**
   * contract_address is the address of the alloyed asset pool contract.
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * taker_fee_share_agreements is the adjusted taker fee share agreements for
   * any asset within the alloyed asset pool that has a taker fee share
   * agreement.
   *
   * @generated from field: repeated osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2;
   */
  takerFeeShareAgreements: TakerFeeShareAgreement[] = [];

  constructor(data?: PartialMessage<AlloyContractTakerFeeShareState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "taker_fee_share_agreements", kind: "message", T: TakerFeeShareAgreement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlloyContractTakerFeeShareState {
    return new AlloyContractTakerFeeShareState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlloyContractTakerFeeShareState {
    return new AlloyContractTakerFeeShareState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlloyContractTakerFeeShareState {
    return new AlloyContractTakerFeeShareState().fromJsonString(jsonString, options);
  }

  static equals(a: AlloyContractTakerFeeShareState | PlainMessage<AlloyContractTakerFeeShareState> | undefined, b: AlloyContractTakerFeeShareState | PlainMessage<AlloyContractTakerFeeShareState> | undefined): boolean {
    return proto3.util.equals(AlloyContractTakerFeeShareState, a, b);
  }
}

