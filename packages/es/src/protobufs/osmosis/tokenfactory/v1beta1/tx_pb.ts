// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/tokenfactory/v1beta1/tx.proto (package osmosis.tokenfactory.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank_pb.js";

/**
 * MsgCreateDenom defines the message structure for the CreateDenom gRPC service
 * method. It allows an account to create a new denom. It requires a sender
 * address and a sub denomination. The (sender_address, sub_denomination) tuple
 * must be unique and cannot be reused.
 *
 * The resulting denom created is defined as
 * <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
 * originally set to be the creator, but this can be changed later. The token
 * denom does not indicate the current admin.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgCreateDenom
 */
export class MsgCreateDenom extends Message<MsgCreateDenom> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * subdenom can be up to 44 "alphanumeric" characters long.
   *
   * @generated from field: string subdenom = 2;
   */
  subdenom = "";

  constructor(data?: PartialMessage<MsgCreateDenom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgCreateDenom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subdenom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDenom {
    return new MsgCreateDenom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDenom {
    return new MsgCreateDenom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDenom {
    return new MsgCreateDenom().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDenom | PlainMessage<MsgCreateDenom> | undefined, b: MsgCreateDenom | PlainMessage<MsgCreateDenom> | undefined): boolean {
    return proto3.util.equals(MsgCreateDenom, a, b);
  }
}

/**
 * MsgCreateDenomResponse is the return value of MsgCreateDenom
 * It returns the full string of the newly created denom
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
 */
export class MsgCreateDenomResponse extends Message<MsgCreateDenomResponse> {
  /**
   * @generated from field: string new_token_denom = 1;
   */
  newTokenDenom = "";

  constructor(data?: PartialMessage<MsgCreateDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_token_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDenomResponse {
    return new MsgCreateDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDenomResponse {
    return new MsgCreateDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDenomResponse {
    return new MsgCreateDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDenomResponse | PlainMessage<MsgCreateDenomResponse> | undefined, b: MsgCreateDenomResponse | PlainMessage<MsgCreateDenomResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateDenomResponse, a, b);
  }
}

/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.
 * Only the admin of the token factory denom has permission to mint unless
 * the denom does not have any admin.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgMint
 */
export class MsgMint extends Message<MsgMint> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string mintToAddress = 3;
   */
  mintToAddress = "";

  constructor(data?: PartialMessage<MsgMint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgMint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "mintToAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMint {
    return new MsgMint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMint {
    return new MsgMint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMint {
    return new MsgMint().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMint | PlainMessage<MsgMint> | undefined, b: MsgMint | PlainMessage<MsgMint> | undefined): boolean {
    return proto3.util.equals(MsgMint, a, b);
  }
}

/**
 * @generated from message osmosis.tokenfactory.v1beta1.MsgMintResponse
 */
export class MsgMintResponse extends Message<MsgMintResponse> {
  constructor(data?: PartialMessage<MsgMintResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgMintResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintResponse {
    return new MsgMintResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintResponse {
    return new MsgMintResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintResponse {
    return new MsgMintResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintResponse | PlainMessage<MsgMintResponse> | undefined, b: MsgMintResponse | PlainMessage<MsgMintResponse> | undefined): boolean {
    return proto3.util.equals(MsgMintResponse, a, b);
  }
}

/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.
 * Only the admin of the token factory denom has permission to burn unless
 * the denom does not have any admin.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgBurn
 */
export class MsgBurn extends Message<MsgBurn> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string burnFromAddress = 3;
   */
  burnFromAddress = "";

  constructor(data?: PartialMessage<MsgBurn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgBurn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "burnFromAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurn {
    return new MsgBurn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurn {
    return new MsgBurn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurn {
    return new MsgBurn().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurn | PlainMessage<MsgBurn> | undefined, b: MsgBurn | PlainMessage<MsgBurn> | undefined): boolean {
    return proto3.util.equals(MsgBurn, a, b);
  }
}

/**
 * @generated from message osmosis.tokenfactory.v1beta1.MsgBurnResponse
 */
export class MsgBurnResponse extends Message<MsgBurnResponse> {
  constructor(data?: PartialMessage<MsgBurnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgBurnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurnResponse {
    return new MsgBurnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurnResponse {
    return new MsgBurnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurnResponse {
    return new MsgBurnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurnResponse | PlainMessage<MsgBurnResponse> | undefined, b: MsgBurnResponse | PlainMessage<MsgBurnResponse> | undefined): boolean {
    return proto3.util.equals(MsgBurnResponse, a, b);
  }
}

/**
 * MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
 * adminship of a denom to a new account
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgChangeAdmin
 */
export class MsgChangeAdmin extends Message<MsgChangeAdmin> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string new_admin = 3;
   */
  newAdmin = "";

  constructor(data?: PartialMessage<MsgChangeAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgChangeAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChangeAdmin {
    return new MsgChangeAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChangeAdmin {
    return new MsgChangeAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChangeAdmin {
    return new MsgChangeAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChangeAdmin | PlainMessage<MsgChangeAdmin> | undefined, b: MsgChangeAdmin | PlainMessage<MsgChangeAdmin> | undefined): boolean {
    return proto3.util.equals(MsgChangeAdmin, a, b);
  }
}

/**
 * MsgChangeAdminResponse defines the response structure for an executed
 * MsgChangeAdmin message.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
 */
export class MsgChangeAdminResponse extends Message<MsgChangeAdminResponse> {
  constructor(data?: PartialMessage<MsgChangeAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChangeAdminResponse {
    return new MsgChangeAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChangeAdminResponse {
    return new MsgChangeAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChangeAdminResponse {
    return new MsgChangeAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChangeAdminResponse | PlainMessage<MsgChangeAdminResponse> | undefined, b: MsgChangeAdminResponse | PlainMessage<MsgChangeAdminResponse> | undefined): boolean {
    return proto3.util.equals(MsgChangeAdminResponse, a, b);
  }
}

/**
 * MsgSetBeforeSendHook is the sdk.Msg type for allowing an admin account to
 * assign a CosmWasm contract to call with a BeforeSend hook
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
 */
export class MsgSetBeforeSendHook extends Message<MsgSetBeforeSendHook> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string cosmwasm_address = 3;
   */
  cosmwasmAddress = "";

  constructor(data?: PartialMessage<MsgSetBeforeSendHook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cosmwasm_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetBeforeSendHook {
    return new MsgSetBeforeSendHook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetBeforeSendHook {
    return new MsgSetBeforeSendHook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetBeforeSendHook {
    return new MsgSetBeforeSendHook().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetBeforeSendHook | PlainMessage<MsgSetBeforeSendHook> | undefined, b: MsgSetBeforeSendHook | PlainMessage<MsgSetBeforeSendHook> | undefined): boolean {
    return proto3.util.equals(MsgSetBeforeSendHook, a, b);
  }
}

/**
 * MsgSetBeforeSendHookResponse defines the response structure for an executed
 * MsgSetBeforeSendHook message.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
 */
export class MsgSetBeforeSendHookResponse extends Message<MsgSetBeforeSendHookResponse> {
  constructor(data?: PartialMessage<MsgSetBeforeSendHookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetBeforeSendHookResponse {
    return new MsgSetBeforeSendHookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetBeforeSendHookResponse {
    return new MsgSetBeforeSendHookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetBeforeSendHookResponse {
    return new MsgSetBeforeSendHookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetBeforeSendHookResponse | PlainMessage<MsgSetBeforeSendHookResponse> | undefined, b: MsgSetBeforeSendHookResponse | PlainMessage<MsgSetBeforeSendHookResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetBeforeSendHookResponse, a, b);
  }
}

/**
 * MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
 * the denom's bank metadata
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
 */
export class MsgSetDenomMetadata extends Message<MsgSetDenomMetadata> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.bank.v1beta1.Metadata metadata = 2;
   */
  metadata?: Metadata;

  constructor(data?: PartialMessage<MsgSetDenomMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetDenomMetadata {
    return new MsgSetDenomMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetDenomMetadata {
    return new MsgSetDenomMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetDenomMetadata {
    return new MsgSetDenomMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetDenomMetadata | PlainMessage<MsgSetDenomMetadata> | undefined, b: MsgSetDenomMetadata | PlainMessage<MsgSetDenomMetadata> | undefined): boolean {
    return proto3.util.equals(MsgSetDenomMetadata, a, b);
  }
}

/**
 * MsgSetDenomMetadataResponse defines the response structure for an executed
 * MsgSetDenomMetadata message.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
 */
export class MsgSetDenomMetadataResponse extends Message<MsgSetDenomMetadataResponse> {
  constructor(data?: PartialMessage<MsgSetDenomMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetDenomMetadataResponse {
    return new MsgSetDenomMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetDenomMetadataResponse {
    return new MsgSetDenomMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetDenomMetadataResponse {
    return new MsgSetDenomMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetDenomMetadataResponse | PlainMessage<MsgSetDenomMetadataResponse> | undefined, b: MsgSetDenomMetadataResponse | PlainMessage<MsgSetDenomMetadataResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetDenomMetadataResponse, a, b);
  }
}

/**
 * @generated from message osmosis.tokenfactory.v1beta1.MsgForceTransfer
 */
export class MsgForceTransfer extends Message<MsgForceTransfer> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string transferFromAddress = 3;
   */
  transferFromAddress = "";

  /**
   * @generated from field: string transferToAddress = 4;
   */
  transferToAddress = "";

  constructor(data?: PartialMessage<MsgForceTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgForceTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "transferFromAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transferToAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgForceTransfer {
    return new MsgForceTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgForceTransfer {
    return new MsgForceTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgForceTransfer {
    return new MsgForceTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: MsgForceTransfer | PlainMessage<MsgForceTransfer> | undefined, b: MsgForceTransfer | PlainMessage<MsgForceTransfer> | undefined): boolean {
    return proto3.util.equals(MsgForceTransfer, a, b);
  }
}

/**
 * @generated from message osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
 */
export class MsgForceTransferResponse extends Message<MsgForceTransferResponse> {
  constructor(data?: PartialMessage<MsgForceTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.MsgForceTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgForceTransferResponse {
    return new MsgForceTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgForceTransferResponse {
    return new MsgForceTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgForceTransferResponse {
    return new MsgForceTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgForceTransferResponse | PlainMessage<MsgForceTransferResponse> | undefined, b: MsgForceTransferResponse | PlainMessage<MsgForceTransferResponse> | undefined): boolean {
    return proto3.util.equals(MsgForceTransferResponse, a, b);
  }
}

