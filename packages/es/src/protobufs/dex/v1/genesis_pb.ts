// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dex/v1/genesis.proto (package dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { InterchainDEXAccount } from "./ica_pb.js";

/**
 * GenesisState defines the DEX module's genesis state
 *
 * @generated from message dex.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Module parameters
   *
   * @generated from field: dex.v1.Params params = 1;
   */
  params?: Params;

  /**
   * IBC port ID for the module
   *
   * @generated from field: string port_id = 2;
   */
  portId = "";

  /**
   * Registered DEX accounts
   *
   * @generated from field: repeated dex.v1.InterchainDEXAccount accounts = 3;
   */
  accounts: InterchainDEXAccount[] = [];

  /**
   * Account sequence counter
   *
   * @generated from field: uint64 account_sequence = 4;
   */
  accountSequence = protoInt64.zero;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "accounts", kind: "message", T: InterchainDEXAccount, repeated: true },
    { no: 4, name: "account_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the parameters for the DEX module
 *
 * @generated from message dex.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * Enable/disable the module
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * Maximum accounts per DID
   *
   * @generated from field: uint32 max_accounts_per_did = 2;
   */
  maxAccountsPerDid = 0;

  /**
   * Default timeout for ICA operations (in seconds)
   *
   * @generated from field: uint64 default_timeout_seconds = 3;
   */
  defaultTimeoutSeconds = protoInt64.zero;

  /**
   * Allowed DEX connections
   *
   * @generated from field: repeated string allowed_connections = 4;
   */
  allowedConnections: string[] = [];

  /**
   * Minimum swap amount (in base denom)
   *
   * @generated from field: string min_swap_amount = 5;
   */
  minSwapAmount = "";

  /**
   * Maximum daily volume per DID (in USD equivalent)
   *
   * @generated from field: string max_daily_volume = 6;
   */
  maxDailyVolume = "";

  /**
   * Rate limit parameters
   *
   * @generated from field: dex.v1.RateLimitParams rate_limits = 7;
   */
  rateLimits?: RateLimitParams;

  /**
   * Fee parameters
   *
   * @generated from field: dex.v1.FeeParams fees = 8;
   */
  fees?: FeeParams;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "max_accounts_per_did", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "default_timeout_seconds", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "allowed_connections", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "min_swap_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "max_daily_volume", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "rate_limits", kind: "message", T: RateLimitParams },
    { no: 8, name: "fees", kind: "message", T: FeeParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * RateLimitParams defines rate limiting parameters
 *
 * @generated from message dex.v1.RateLimitParams
 */
export class RateLimitParams extends Message<RateLimitParams> {
  /**
   * Maximum operations per block
   *
   * @generated from field: uint32 max_ops_per_block = 1;
   */
  maxOpsPerBlock = 0;

  /**
   * Maximum operations per DID per day
   *
   * @generated from field: uint32 max_ops_per_did_per_day = 2;
   */
  maxOpsPerDidPerDay = 0;

  /**
   * Cooldown period between operations (in blocks)
   *
   * @generated from field: uint32 cooldown_blocks = 3;
   */
  cooldownBlocks = 0;

  constructor(data?: PartialMessage<RateLimitParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.RateLimitParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_ops_per_block", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "max_ops_per_did_per_day", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "cooldown_blocks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitParams {
    return new RateLimitParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitParams {
    return new RateLimitParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitParams {
    return new RateLimitParams().fromJsonString(jsonString, options);
  }

  static equals(a: RateLimitParams | PlainMessage<RateLimitParams> | undefined, b: RateLimitParams | PlainMessage<RateLimitParams> | undefined): boolean {
    return proto3.util.equals(RateLimitParams, a, b);
  }
}

/**
 * FeeParams defines fee parameters for DEX operations
 *
 * @generated from message dex.v1.FeeParams
 */
export class FeeParams extends Message<FeeParams> {
  /**
   * Platform fee for swaps (basis points, e.g., 30 = 0.3%)
   *
   * @generated from field: uint32 swap_fee_bps = 1;
   */
  swapFeeBps = 0;

  /**
   * Platform fee for liquidity operations
   *
   * @generated from field: uint32 liquidity_fee_bps = 2;
   */
  liquidityFeeBps = 0;

  /**
   * Platform fee for orders
   *
   * @generated from field: uint32 order_fee_bps = 3;
   */
  orderFeeBps = 0;

  /**
   * Fee collector address
   *
   * @generated from field: string fee_collector = 4;
   */
  feeCollector = "";

  constructor(data?: PartialMessage<FeeParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.FeeParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap_fee_bps", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "liquidity_fee_bps", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "order_fee_bps", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "fee_collector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeParams {
    return new FeeParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeParams {
    return new FeeParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeParams {
    return new FeeParams().fromJsonString(jsonString, options);
  }

  static equals(a: FeeParams | PlainMessage<FeeParams> | undefined, b: FeeParams | PlainMessage<FeeParams> | undefined): boolean {
    return proto3.util.equals(FeeParams, a, b);
  }
}

