// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dex/v1/query.proto (package dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { InterchainDEXAccount } from "./ica_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest is request type for Query/Params RPC method
 *
 * @generated from message dex.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for Query/Params RPC method
 *
 * @generated from message dex.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module
   *
   * @generated from field: dex.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAccountRequest is request type for Query/Account RPC method
 *
 * @generated from message dex.v1.QueryAccountRequest
 */
export class QueryAccountRequest extends Message<QueryAccountRequest> {
  /**
   * DID of the account owner
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  constructor(data?: PartialMessage<QueryAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountRequest | PlainMessage<QueryAccountRequest> | undefined, b: QueryAccountRequest | PlainMessage<QueryAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountRequest, a, b);
  }
}

/**
 * QueryAccountResponse is response type for Query/Account RPC method
 *
 * @generated from message dex.v1.QueryAccountResponse
 */
export class QueryAccountResponse extends Message<QueryAccountResponse> {
  /**
   * The DEX account
   *
   * @generated from field: dex.v1.InterchainDEXAccount account = 1;
   */
  account?: InterchainDEXAccount;

  constructor(data?: PartialMessage<QueryAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: InterchainDEXAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountResponse {
    return new QueryAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountResponse {
    return new QueryAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountResponse {
    return new QueryAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountResponse | PlainMessage<QueryAccountResponse> | undefined, b: QueryAccountResponse | PlainMessage<QueryAccountResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountResponse, a, b);
  }
}

/**
 * QueryAccountsRequest is request type for Query/Accounts RPC method
 *
 * @generated from message dex.v1.QueryAccountsRequest
 */
export class QueryAccountsRequest extends Message<QueryAccountsRequest> {
  /**
   * DID of the account owner
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * pagination defines optional pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined, b: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountsRequest, a, b);
  }
}

/**
 * QueryAccountsResponse is response type for Query/Accounts RPC method
 *
 * @generated from message dex.v1.QueryAccountsResponse
 */
export class QueryAccountsResponse extends Message<QueryAccountsResponse> {
  /**
   * List of DEX accounts
   *
   * @generated from field: repeated dex.v1.InterchainDEXAccount accounts = 1;
   */
  accounts: InterchainDEXAccount[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: InterchainDEXAccount, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsResponse | PlainMessage<QueryAccountsResponse> | undefined, b: QueryAccountsResponse | PlainMessage<QueryAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountsResponse, a, b);
  }
}

/**
 * QueryBalanceRequest is request type for Query/Balance RPC method
 *
 * @generated from message dex.v1.QueryBalanceRequest
 */
export class QueryBalanceRequest extends Message<QueryBalanceRequest> {
  /**
   * DID of the account owner
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Optional specific denom to query
   *
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined, b: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryBalanceRequest, a, b);
  }
}

/**
 * QueryBalanceResponse is response type for Query/Balance RPC method
 *
 * @generated from message dex.v1.QueryBalanceResponse
 */
export class QueryBalanceResponse extends Message<QueryBalanceResponse> {
  /**
   * Balances on the remote chain
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 1;
   */
  balances: Coin[] = [];

  constructor(data?: PartialMessage<QueryBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balances", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined, b: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryBalanceResponse, a, b);
  }
}

/**
 * QueryPoolRequest is request type for Query/Pool RPC method
 *
 * @generated from message dex.v1.QueryPoolRequest
 */
export class QueryPoolRequest extends Message<QueryPoolRequest> {
  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId = "";

  /**
   * Pool ID to query
   *
   * @generated from field: string pool_id = 2;
   */
  poolId = "";

  constructor(data?: PartialMessage<QueryPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined, b: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolRequest, a, b);
  }
}

/**
 * QueryPoolResponse is response type for Query/Pool RPC method
 *
 * @generated from message dex.v1.QueryPoolResponse
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * Pool information
   *
   * @generated from field: dex.v1.PoolInfo pool = 1;
   */
  pool?: PoolInfo;

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PoolInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined, b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b);
  }
}

/**
 * PoolInfo contains pool information
 *
 * @generated from message dex.v1.PoolInfo
 */
export class PoolInfo extends Message<PoolInfo> {
  /**
   * Pool ID
   *
   * @generated from field: string pool_id = 1;
   */
  poolId = "";

  /**
   * Pool assets
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin assets = 2;
   */
  assets: Coin[] = [];

  /**
   * Total shares
   *
   * @generated from field: string total_shares = 3;
   */
  totalShares = "";

  /**
   * Swap fee
   *
   * @generated from field: string swap_fee = 4;
   */
  swapFee = "";

  constructor(data?: PartialMessage<PoolInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.PoolInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "assets", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolInfo {
    return new PoolInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolInfo {
    return new PoolInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolInfo {
    return new PoolInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PoolInfo | PlainMessage<PoolInfo> | undefined, b: PoolInfo | PlainMessage<PoolInfo> | undefined): boolean {
    return proto3.util.equals(PoolInfo, a, b);
  }
}

/**
 * QueryOrdersRequest is request type for Query/Orders RPC method
 *
 * @generated from message dex.v1.QueryOrdersRequest
 */
export class QueryOrdersRequest extends Message<QueryOrdersRequest> {
  /**
   * DID of the account owner
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Filter by status (optional)
   *
   * @generated from field: string status = 3;
   */
  status = "";

  /**
   * pagination defines optional pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrdersRequest {
    return new QueryOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrdersRequest {
    return new QueryOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrdersRequest {
    return new QueryOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrdersRequest | PlainMessage<QueryOrdersRequest> | undefined, b: QueryOrdersRequest | PlainMessage<QueryOrdersRequest> | undefined): boolean {
    return proto3.util.equals(QueryOrdersRequest, a, b);
  }
}

/**
 * QueryOrdersResponse is response type for Query/Orders RPC method
 *
 * @generated from message dex.v1.QueryOrdersResponse
 */
export class QueryOrdersResponse extends Message<QueryOrdersResponse> {
  /**
   * List of orders
   *
   * @generated from field: repeated dex.v1.Order orders = 1;
   */
  orders: Order[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrdersResponse {
    return new QueryOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrdersResponse {
    return new QueryOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrdersResponse {
    return new QueryOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrdersResponse | PlainMessage<QueryOrdersResponse> | undefined, b: QueryOrdersResponse | PlainMessage<QueryOrdersResponse> | undefined): boolean {
    return proto3.util.equals(QueryOrdersResponse, a, b);
  }
}

/**
 * Order represents a DEX order
 *
 * @generated from message dex.v1.Order
 */
export class Order extends Message<Order> {
  /**
   * Order ID
   *
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  /**
   * Order type
   *
   * @generated from field: string order_type = 2;
   */
  orderType = "";

  /**
   * Sell token
   *
   * @generated from field: string sell_denom = 3;
   */
  sellDenom = "";

  /**
   * Buy token
   *
   * @generated from field: string buy_denom = 4;
   */
  buyDenom = "";

  /**
   * Amount
   *
   * @generated from field: string amount = 5;
   */
  amount = "";

  /**
   * Price
   *
   * @generated from field: string price = 6;
   */
  price = "";

  /**
   * Status
   *
   * @generated from field: string status = 7;
   */
  status = "";

  /**
   * Creation time
   *
   * @generated from field: string created_at = 8;
   */
  createdAt = "";

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sell_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "buy_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * QueryHistoryRequest is request type for Query/History RPC method
 *
 * @generated from message dex.v1.QueryHistoryRequest
 */
export class QueryHistoryRequest extends Message<QueryHistoryRequest> {
  /**
   * DID of the account owner
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Optional connection filter
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Optional operation type filter
   *
   * @generated from field: string operation_type = 3;
   */
  operationType = "";

  /**
   * pagination defines optional pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHistoryRequest {
    return new QueryHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHistoryRequest {
    return new QueryHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHistoryRequest {
    return new QueryHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHistoryRequest | PlainMessage<QueryHistoryRequest> | undefined, b: QueryHistoryRequest | PlainMessage<QueryHistoryRequest> | undefined): boolean {
    return proto3.util.equals(QueryHistoryRequest, a, b);
  }
}

/**
 * QueryHistoryResponse is response type for Query/History RPC method
 *
 * @generated from message dex.v1.QueryHistoryResponse
 */
export class QueryHistoryResponse extends Message<QueryHistoryResponse> {
  /**
   * List of historical transactions
   *
   * @generated from field: repeated dex.v1.Transaction transactions = 1;
   */
  transactions: Transaction[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.QueryHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: Transaction, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHistoryResponse {
    return new QueryHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHistoryResponse {
    return new QueryHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHistoryResponse {
    return new QueryHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHistoryResponse | PlainMessage<QueryHistoryResponse> | undefined, b: QueryHistoryResponse | PlainMessage<QueryHistoryResponse> | undefined): boolean {
    return proto3.util.equals(QueryHistoryResponse, a, b);
  }
}

/**
 * Transaction represents a historical transaction
 *
 * @generated from message dex.v1.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * Transaction ID
   *
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * Operation type (swap, provide_liquidity, etc.)
   *
   * @generated from field: string operation_type = 2;
   */
  operationType = "";

  /**
   * Connection ID
   *
   * @generated from field: string connection_id = 3;
   */
  connectionId = "";

  /**
   * Transaction details (JSON)
   *
   * @generated from field: string details = 4;
   */
  details = "";

  /**
   * Status
   *
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * Timestamp
   *
   * @generated from field: string timestamp = 6;
   */
  timestamp = "";

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operation_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

