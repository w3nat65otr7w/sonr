// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file dex/v1/tx.proto (package dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgCancelOrder, MsgCancelOrderResponse, MsgCreateLimitOrder, MsgCreateLimitOrderResponse, MsgExecuteSwap, MsgExecuteSwapResponse, MsgProvideLiquidity, MsgProvideLiquidityResponse, MsgRegisterDEXAccount, MsgRegisterDEXAccountResponse, MsgRemoveLiquidity, MsgRemoveLiquidityResponse } from "./tx_pb.js";

const TYPE_NAME = "dex.v1.Msg";

/**
 * RegisterDEXAccount creates a new ICA account for DEX operations
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_tx_docs.md"}}
 *
 * @generated from rpc dex.v1.Msg.RegisterDEXAccount
 */
export const MsgRegisterDEXAccountService = {
  typeName: TYPE_NAME,
  method: "RegisterDEXAccount",
  Request: MsgRegisterDEXAccount,
  Response: MsgRegisterDEXAccountResponse,
} as const;

/**
 * ExecuteSwap performs a token swap on a remote chain
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_tx_docs.md"}}
 *
 * @generated from rpc dex.v1.Msg.ExecuteSwap
 */
export const MsgExecuteSwapService = {
  typeName: TYPE_NAME,
  method: "ExecuteSwap",
  Request: MsgExecuteSwap,
  Response: MsgExecuteSwapResponse,
} as const;

/**
 * ProvideLiquidity adds liquidity to a pool
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_tx_docs.md"}}
 *
 * @generated from rpc dex.v1.Msg.ProvideLiquidity
 */
export const MsgProvideLiquidityService = {
  typeName: TYPE_NAME,
  method: "ProvideLiquidity",
  Request: MsgProvideLiquidity,
  Response: MsgProvideLiquidityResponse,
} as const;

/**
 * RemoveLiquidity removes liquidity from a pool
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_tx_docs.md"}}
 *
 * @generated from rpc dex.v1.Msg.RemoveLiquidity
 */
export const MsgRemoveLiquidityService = {
  typeName: TYPE_NAME,
  method: "RemoveLiquidity",
  Request: MsgRemoveLiquidity,
  Response: MsgRemoveLiquidityResponse,
} as const;

/**
 * CreateLimitOrder creates a limit order
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_tx_docs.md"}}
 *
 * @generated from rpc dex.v1.Msg.CreateLimitOrder
 */
export const MsgCreateLimitOrderService = {
  typeName: TYPE_NAME,
  method: "CreateLimitOrder",
  Request: MsgCreateLimitOrder,
  Response: MsgCreateLimitOrderResponse,
} as const;

/**
 * CancelOrder cancels an existing order
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_tx_docs.md"}}
 *
 * @generated from rpc dex.v1.Msg.CancelOrder
 */
export const MsgCancelOrderService = {
  typeName: TYPE_NAME,
  method: "CancelOrder",
  Request: MsgCancelOrder,
  Response: MsgCancelOrderResponse,
} as const;

