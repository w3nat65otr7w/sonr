// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file dex/v1/query.proto (package dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryAccountRequest, QueryAccountResponse, QueryAccountsRequest, QueryAccountsResponse, QueryBalanceRequest, QueryBalanceResponse, QueryHistoryRequest, QueryHistoryResponse, QueryOrdersRequest, QueryOrdersResponse, QueryParamsRequest, QueryParamsResponse, QueryPoolRequest, QueryPoolResponse } from "./query_pb.js";

const TYPE_NAME = "dex.v1.Query";

/**
 * Params queries the parameters of the module
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * Account queries a DEX account by DID and connection
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.Account
 */
export const QueryAccountService = {
  typeName: TYPE_NAME,
  method: "Account",
  Request: QueryAccountRequest,
  Response: QueryAccountResponse,
} as const;

/**
 * Accounts queries all DEX accounts for a DID
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.Accounts
 */
export const QueryAccountsService = {
  typeName: TYPE_NAME,
  method: "Accounts",
  Request: QueryAccountsRequest,
  Response: QueryAccountsResponse,
} as const;

/**
 * Balance queries remote chain balance
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.Balance
 */
export const QueryBalanceService = {
  typeName: TYPE_NAME,
  method: "Balance",
  Request: QueryBalanceRequest,
  Response: QueryBalanceResponse,
} as const;

/**
 * Pool queries pool information
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.Pool
 */
export const QueryPoolService = {
  typeName: TYPE_NAME,
  method: "Pool",
  Request: QueryPoolRequest,
  Response: QueryPoolResponse,
} as const;

/**
 * Orders queries orders for a DID
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.Orders
 */
export const QueryOrdersService = {
  typeName: TYPE_NAME,
  method: "Orders",
  Request: QueryOrdersRequest,
  Response: QueryOrdersResponse,
} as const;

/**
 * History queries transaction history
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dex_query_docs.md"}}
 *
 * @generated from rpc dex.v1.Query.History
 */
export const QueryHistoryService = {
  typeName: TYPE_NAME,
  method: "History",
  Request: QueryHistoryRequest,
  Response: QueryHistoryResponse,
} as const;

