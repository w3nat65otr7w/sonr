// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dex/v1/ica.proto (package dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * AccountStatus defines the status of an ICA account
 *
 * @generated from enum dex.v1.AccountStatus
 */
export enum AccountStatus {
  /**
   * Account is pending creation
   *
   * @generated from enum value: ACCOUNT_STATUS_PENDING = 0;
   */
  PENDING = 0,

  /**
   * Account is active and ready
   *
   * @generated from enum value: ACCOUNT_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Account is temporarily disabled
   *
   * @generated from enum value: ACCOUNT_STATUS_DISABLED = 2;
   */
  DISABLED = 2,

  /**
   * Account creation failed
   *
   * @generated from enum value: ACCOUNT_STATUS_FAILED = 3;
   */
  FAILED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountStatus)
proto3.util.setEnumType(AccountStatus, "dex.v1.AccountStatus", [
  { no: 0, name: "ACCOUNT_STATUS_PENDING" },
  { no: 1, name: "ACCOUNT_STATUS_ACTIVE" },
  { no: 2, name: "ACCOUNT_STATUS_DISABLED" },
  { no: 3, name: "ACCOUNT_STATUS_FAILED" },
]);

/**
 * DEXFeatures defines available features for DEX accounts
 *
 * @generated from enum dex.v1.DEXFeatures
 */
export enum DEXFeatures {
  /**
   * Basic swap functionality
   *
   * @generated from enum value: DEX_FEATURE_SWAP = 0;
   */
  DEX_FEATURE_SWAP = 0,

  /**
   * Liquidity provision
   *
   * @generated from enum value: DEX_FEATURE_LIQUIDITY = 1;
   */
  DEX_FEATURE_LIQUIDITY = 1,

  /**
   * Limit orders
   *
   * @generated from enum value: DEX_FEATURE_ORDERS = 2;
   */
  DEX_FEATURE_ORDERS = 2,

  /**
   * Staking operations
   *
   * @generated from enum value: DEX_FEATURE_STAKING = 3;
   */
  DEX_FEATURE_STAKING = 3,

  /**
   * Governance participation
   *
   * @generated from enum value: DEX_FEATURE_GOVERNANCE = 4;
   */
  DEX_FEATURE_GOVERNANCE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DEXFeatures)
proto3.util.setEnumType(DEXFeatures, "dex.v1.DEXFeatures", [
  { no: 0, name: "DEX_FEATURE_SWAP" },
  { no: 1, name: "DEX_FEATURE_LIQUIDITY" },
  { no: 2, name: "DEX_FEATURE_ORDERS" },
  { no: 3, name: "DEX_FEATURE_STAKING" },
  { no: 4, name: "DEX_FEATURE_GOVERNANCE" },
]);

/**
 * InterchainDEXAccount represents a DEX account on a remote chain
 *
 * @generated from message dex.v1.InterchainDEXAccount
 */
export class InterchainDEXAccount extends Message<InterchainDEXAccount> {
  /**
   * DID controller of this account
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection to the remote chain
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Remote chain ID (e.g., osmosis-1)
   *
   * @generated from field: string host_chain_id = 3;
   */
  hostChainId = "";

  /**
   * Account address on the remote chain
   *
   * @generated from field: string account_address = 4;
   */
  accountAddress = "";

  /**
   * ICA port ID for this account
   *
   * @generated from field: string port_id = 5;
   */
  portId = "";

  /**
   * Account creation timestamp
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * Enabled features for this account
   *
   * @generated from field: repeated string enabled_features = 7;
   */
  enabledFeatures: string[] = [];

  /**
   * Account status
   *
   * @generated from field: dex.v1.AccountStatus status = 8;
   */
  status = AccountStatus.PENDING;

  constructor(data?: PartialMessage<InterchainDEXAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.InterchainDEXAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "host_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "enabled_features", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(AccountStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterchainDEXAccount {
    return new InterchainDEXAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterchainDEXAccount {
    return new InterchainDEXAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterchainDEXAccount {
    return new InterchainDEXAccount().fromJsonString(jsonString, options);
  }

  static equals(a: InterchainDEXAccount | PlainMessage<InterchainDEXAccount> | undefined, b: InterchainDEXAccount | PlainMessage<InterchainDEXAccount> | undefined): boolean {
    return proto3.util.equals(InterchainDEXAccount, a, b);
  }
}

/**
 * DEXActivity represents a DEX operation activity record
 *
 * @generated from message dex.v1.DEXActivity
 */
export class DEXActivity extends Message<DEXActivity> {
  /**
   * Type of activity (swap, provide_liquidity, remove_liquidity, create_order, cancel_order)
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * DID that performed the activity
   *
   * @generated from field: string did = 2;
   */
  did = "";

  /**
   * Connection ID where the activity occurred
   *
   * @generated from field: string connection_id = 3;
   */
  connectionId = "";

  /**
   * Transaction hash of the activity
   *
   * @generated from field: string tx_hash = 4;
   */
  txHash = "";

  /**
   * Block height when the activity occurred
   *
   * @generated from field: int64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  /**
   * Timestamp of the activity
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: Timestamp;

  /**
   * Activity-specific details (JSON encoded)
   *
   * @generated from field: string details = 7;
   */
  details = "";

  /**
   * Status of the activity (pending, success, failed)
   *
   * @generated from field: string status = 8;
   */
  status = "";

  /**
   * Amount involved in the activity (if applicable)
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 9;
   */
  amount: Coin[] = [];

  /**
   * Gas used for the activity
   *
   * @generated from field: uint64 gas_used = 10;
   */
  gasUsed = protoInt64.zero;

  constructor(data?: PartialMessage<DEXActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.DEXActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "timestamp", kind: "message", T: Timestamp },
    { no: 7, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 10, name: "gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DEXActivity {
    return new DEXActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DEXActivity {
    return new DEXActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DEXActivity {
    return new DEXActivity().fromJsonString(jsonString, options);
  }

  static equals(a: DEXActivity | PlainMessage<DEXActivity> | undefined, b: DEXActivity | PlainMessage<DEXActivity> | undefined): boolean {
    return proto3.util.equals(DEXActivity, a, b);
  }
}

