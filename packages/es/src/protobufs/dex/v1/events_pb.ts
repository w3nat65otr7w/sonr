// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dex/v1/events.proto (package dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * EventDEXAccountRegistered is emitted when a new DEX account is registered
 *
 * @generated from message dex.v1.EventDEXAccountRegistered
 */
export class EventDEXAccountRegistered extends Message<EventDEXAccountRegistered> {
  /**
   * DID of the account owner
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Generated port ID
   *
   * @generated from field: string port_id = 3;
   */
  portId = "";

  /**
   * Remote account address (when available)
   *
   * @generated from field: string account_address = 4;
   */
  accountAddress = "";

  constructor(data?: PartialMessage<EventDEXAccountRegistered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventDEXAccountRegistered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDEXAccountRegistered {
    return new EventDEXAccountRegistered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDEXAccountRegistered {
    return new EventDEXAccountRegistered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDEXAccountRegistered {
    return new EventDEXAccountRegistered().fromJsonString(jsonString, options);
  }

  static equals(a: EventDEXAccountRegistered | PlainMessage<EventDEXAccountRegistered> | undefined, b: EventDEXAccountRegistered | PlainMessage<EventDEXAccountRegistered> | undefined): boolean {
    return proto3.util.equals(EventDEXAccountRegistered, a, b);
  }
}

/**
 * EventSwapExecuted is emitted when a swap is executed
 *
 * @generated from message dex.v1.EventSwapExecuted
 */
export class EventSwapExecuted extends Message<EventSwapExecuted> {
  /**
   * DID of the trader
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Source token and amount
   *
   * @generated from field: cosmos.base.v1beta1.Coin source = 3;
   */
  source?: Coin;

  /**
   * Target token and amount received
   *
   * @generated from field: cosmos.base.v1beta1.Coin target = 4;
   */
  target?: Coin;

  /**
   * Transaction hash on remote chain
   *
   * @generated from field: string tx_hash = 5;
   */
  txHash = "";

  /**
   * IBC packet sequence
   *
   * @generated from field: uint64 sequence = 6;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<EventSwapExecuted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventSwapExecuted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source", kind: "message", T: Coin },
    { no: 4, name: "target", kind: "message", T: Coin },
    { no: 5, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSwapExecuted {
    return new EventSwapExecuted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSwapExecuted {
    return new EventSwapExecuted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSwapExecuted {
    return new EventSwapExecuted().fromJsonString(jsonString, options);
  }

  static equals(a: EventSwapExecuted | PlainMessage<EventSwapExecuted> | undefined, b: EventSwapExecuted | PlainMessage<EventSwapExecuted> | undefined): boolean {
    return proto3.util.equals(EventSwapExecuted, a, b);
  }
}

/**
 * EventLiquidityProvided is emitted when liquidity is added
 *
 * @generated from message dex.v1.EventLiquidityProvided
 */
export class EventLiquidityProvided extends Message<EventLiquidityProvided> {
  /**
   * DID of the liquidity provider
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Pool ID
   *
   * @generated from field: string pool_id = 3;
   */
  poolId = "";

  /**
   * Assets provided
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin assets = 4;
   */
  assets: Coin[] = [];

  /**
   * Shares received
   *
   * @generated from field: string shares_received = 5;
   */
  sharesReceived = "";

  /**
   * Transaction hash on remote chain
   *
   * @generated from field: string tx_hash = 6;
   */
  txHash = "";

  constructor(data?: PartialMessage<EventLiquidityProvided>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventLiquidityProvided";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "assets", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "shares_received", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventLiquidityProvided {
    return new EventLiquidityProvided().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventLiquidityProvided {
    return new EventLiquidityProvided().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventLiquidityProvided {
    return new EventLiquidityProvided().fromJsonString(jsonString, options);
  }

  static equals(a: EventLiquidityProvided | PlainMessage<EventLiquidityProvided> | undefined, b: EventLiquidityProvided | PlainMessage<EventLiquidityProvided> | undefined): boolean {
    return proto3.util.equals(EventLiquidityProvided, a, b);
  }
}

/**
 * EventLiquidityRemoved is emitted when liquidity is removed
 *
 * @generated from message dex.v1.EventLiquidityRemoved
 */
export class EventLiquidityRemoved extends Message<EventLiquidityRemoved> {
  /**
   * DID of the liquidity provider
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Pool ID
   *
   * @generated from field: string pool_id = 3;
   */
  poolId = "";

  /**
   * Shares removed
   *
   * @generated from field: string shares_removed = 4;
   */
  sharesRemoved = "";

  /**
   * Assets received
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin assets = 5;
   */
  assets: Coin[] = [];

  /**
   * Transaction hash on remote chain
   *
   * @generated from field: string tx_hash = 6;
   */
  txHash = "";

  constructor(data?: PartialMessage<EventLiquidityRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventLiquidityRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shares_removed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "assets", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventLiquidityRemoved {
    return new EventLiquidityRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventLiquidityRemoved {
    return new EventLiquidityRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventLiquidityRemoved {
    return new EventLiquidityRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: EventLiquidityRemoved | PlainMessage<EventLiquidityRemoved> | undefined, b: EventLiquidityRemoved | PlainMessage<EventLiquidityRemoved> | undefined): boolean {
    return proto3.util.equals(EventLiquidityRemoved, a, b);
  }
}

/**
 * EventOrderCreated is emitted when a limit order is created
 *
 * @generated from message dex.v1.EventOrderCreated
 */
export class EventOrderCreated extends Message<EventOrderCreated> {
  /**
   * DID of the trader
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Order ID on remote chain
   *
   * @generated from field: string order_id = 3;
   */
  orderId = "";

  /**
   * Order details
   *
   * @generated from field: string sell_denom = 4;
   */
  sellDenom = "";

  /**
   * @generated from field: string buy_denom = 5;
   */
  buyDenom = "";

  /**
   * @generated from field: string amount = 6;
   */
  amount = "";

  /**
   * @generated from field: string price = 7;
   */
  price = "";

  /**
   * Transaction hash on remote chain
   *
   * @generated from field: string tx_hash = 8;
   */
  txHash = "";

  constructor(data?: PartialMessage<EventOrderCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventOrderCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sell_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "buy_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderCreated {
    return new EventOrderCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderCreated {
    return new EventOrderCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderCreated {
    return new EventOrderCreated().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderCreated | PlainMessage<EventOrderCreated> | undefined, b: EventOrderCreated | PlainMessage<EventOrderCreated> | undefined): boolean {
    return proto3.util.equals(EventOrderCreated, a, b);
  }
}

/**
 * EventOrderCancelled is emitted when an order is cancelled
 *
 * @generated from message dex.v1.EventOrderCancelled
 */
export class EventOrderCancelled extends Message<EventOrderCancelled> {
  /**
   * DID of the trader
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Order ID that was cancelled
   *
   * @generated from field: string order_id = 3;
   */
  orderId = "";

  /**
   * Transaction hash on remote chain
   *
   * @generated from field: string tx_hash = 4;
   */
  txHash = "";

  constructor(data?: PartialMessage<EventOrderCancelled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventOrderCancelled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderCancelled {
    return new EventOrderCancelled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderCancelled {
    return new EventOrderCancelled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderCancelled {
    return new EventOrderCancelled().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderCancelled | PlainMessage<EventOrderCancelled> | undefined, b: EventOrderCancelled | PlainMessage<EventOrderCancelled> | undefined): boolean {
    return proto3.util.equals(EventOrderCancelled, a, b);
  }
}

/**
 * EventOrderFilled is emitted when an order is filled
 *
 * @generated from message dex.v1.EventOrderFilled
 */
export class EventOrderFilled extends Message<EventOrderFilled> {
  /**
   * DID of the trader
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Order ID that was filled
   *
   * @generated from field: string order_id = 3;
   */
  orderId = "";

  /**
   * Fill details
   *
   * @generated from field: string fill_amount = 4;
   */
  fillAmount = "";

  /**
   * @generated from field: string fill_price = 5;
   */
  fillPrice = "";

  /**
   * Transaction hash on remote chain
   *
   * @generated from field: string tx_hash = 6;
   */
  txHash = "";

  constructor(data?: PartialMessage<EventOrderFilled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventOrderFilled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fill_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fill_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderFilled {
    return new EventOrderFilled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderFilled {
    return new EventOrderFilled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderFilled {
    return new EventOrderFilled().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderFilled | PlainMessage<EventOrderFilled> | undefined, b: EventOrderFilled | PlainMessage<EventOrderFilled> | undefined): boolean {
    return proto3.util.equals(EventOrderFilled, a, b);
  }
}

/**
 * EventICAPacketSent is emitted when an ICA packet is sent
 *
 * @generated from message dex.v1.EventICAPacketSent
 */
export class EventICAPacketSent extends Message<EventICAPacketSent> {
  /**
   * DID of the sender
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Packet type (swap, liquidity, order, etc.)
   *
   * @generated from field: string packet_type = 3;
   */
  packetType = "";

  /**
   * IBC packet sequence
   *
   * @generated from field: uint64 sequence = 4;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<EventICAPacketSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventICAPacketSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "packet_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventICAPacketSent {
    return new EventICAPacketSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventICAPacketSent {
    return new EventICAPacketSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventICAPacketSent {
    return new EventICAPacketSent().fromJsonString(jsonString, options);
  }

  static equals(a: EventICAPacketSent | PlainMessage<EventICAPacketSent> | undefined, b: EventICAPacketSent | PlainMessage<EventICAPacketSent> | undefined): boolean {
    return proto3.util.equals(EventICAPacketSent, a, b);
  }
}

/**
 * EventICAPacketAcknowledged is emitted when an ICA packet is acknowledged
 *
 * @generated from message dex.v1.EventICAPacketAcknowledged
 */
export class EventICAPacketAcknowledged extends Message<EventICAPacketAcknowledged> {
  /**
   * DID of the sender
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * IBC connection ID
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * Packet type
   *
   * @generated from field: string packet_type = 3;
   */
  packetType = "";

  /**
   * IBC packet sequence
   *
   * @generated from field: uint64 sequence = 4;
   */
  sequence = protoInt64.zero;

  /**
   * Success status
   *
   * @generated from field: bool success = 5;
   */
  success = false;

  /**
   * Error message if failed
   *
   * @generated from field: string error = 6;
   */
  error = "";

  constructor(data?: PartialMessage<EventICAPacketAcknowledged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dex.v1.EventICAPacketAcknowledged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "packet_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventICAPacketAcknowledged {
    return new EventICAPacketAcknowledged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventICAPacketAcknowledged {
    return new EventICAPacketAcknowledged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventICAPacketAcknowledged {
    return new EventICAPacketAcknowledged().fromJsonString(jsonString, options);
  }

  static equals(a: EventICAPacketAcknowledged | PlainMessage<EventICAPacketAcknowledged> | undefined, b: EventICAPacketAcknowledged | PlainMessage<EventICAPacketAcknowledged> | undefined): boolean {
    return proto3.util.equals(EventICAPacketAcknowledged, a, b);
  }
}

