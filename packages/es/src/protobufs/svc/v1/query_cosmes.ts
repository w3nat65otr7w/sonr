// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file svc/v1/query.proto (package svc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryDomainVerificationRequest, QueryDomainVerificationResponse, QueryParamsRequest, QueryParamsResponse, QueryServiceOIDCDiscoveryRequest, QueryServiceOIDCDiscoveryResponse, QueryServiceOIDCJWKSRequest, QueryServiceOIDCJWKSResponse, QueryServiceOIDCMetadataRequest, QueryServiceOIDCMetadataResponse, QueryServiceRequest, QueryServiceResponse, QueryServicesByDomainRequest, QueryServicesByDomainResponse, QueryServicesByOwnerRequest, QueryServicesByOwnerResponse } from "./query_pb.js";

const TYPE_NAME = "svc.v1.Query";

/**
 * Params queries all parameters of the module.
 *
 * @generated from rpc svc.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * DomainVerification queries domain verification status by domain name.
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "svc_docs.md"}}
 *
 * @generated from rpc svc.v1.Query.DomainVerification
 */
export const QueryDomainVerificationService = {
  typeName: TYPE_NAME,
  method: "DomainVerification",
  Request: QueryDomainVerificationRequest,
  Response: QueryDomainVerificationResponse,
} as const;

/**
 * Service queries service information by service ID.
 *
 * @generated from rpc svc.v1.Query.Service
 */
export const QueryServiceService = {
  typeName: TYPE_NAME,
  method: "Service",
  Request: QueryServiceRequest,
  Response: QueryServiceResponse,
} as const;

/**
 * ServicesByOwner queries all services owned by a specific address.
 *
 * @generated from rpc svc.v1.Query.ServicesByOwner
 */
export const QueryServicesByOwnerService = {
  typeName: TYPE_NAME,
  method: "ServicesByOwner",
  Request: QueryServicesByOwnerRequest,
  Response: QueryServicesByOwnerResponse,
} as const;

/**
 * ServicesByDomain queries services bound to a specific domain.
 *
 * @generated from rpc svc.v1.Query.ServicesByDomain
 */
export const QueryServicesByDomainService = {
  typeName: TYPE_NAME,
  method: "ServicesByDomain",
  Request: QueryServicesByDomainRequest,
  Response: QueryServicesByDomainResponse,
} as const;

/**
 * ServiceOIDCDiscovery queries OIDC discovery configuration for a service
 *
 * @generated from rpc svc.v1.Query.ServiceOIDCDiscovery
 */
export const QueryServiceOIDCDiscoveryService = {
  typeName: TYPE_NAME,
  method: "ServiceOIDCDiscovery",
  Request: QueryServiceOIDCDiscoveryRequest,
  Response: QueryServiceOIDCDiscoveryResponse,
} as const;

/**
 * ServiceOIDCJWKS queries OIDC JWKS for a service
 *
 * @generated from rpc svc.v1.Query.ServiceOIDCJWKS
 */
export const QueryServiceOIDCJWKSService = {
  typeName: TYPE_NAME,
  method: "ServiceOIDCJWKS",
  Request: QueryServiceOIDCJWKSRequest,
  Response: QueryServiceOIDCJWKSResponse,
} as const;

/**
 * ServiceOIDCMetadata queries OIDC metadata for a service
 *
 * @generated from rpc svc.v1.Query.ServiceOIDCMetadata
 */
export const QueryServiceOIDCMetadataService = {
  typeName: TYPE_NAME,
  method: "ServiceOIDCMetadata",
  Request: QueryServiceOIDCMetadataRequest,
  Response: QueryServiceOIDCMetadataResponse,
} as const;

