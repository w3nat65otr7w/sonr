// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file svc/v1/state.proto (package svc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * DomainVerificationStatus represents the current state of domain verification
 *
 * @generated from enum svc.v1.DomainVerificationStatus
 */
export enum DomainVerificationStatus {
  /**
   * Pending verification - DNS TXT record not yet confirmed
   *
   * @generated from enum value: DOMAIN_VERIFICATION_STATUS_PENDING = 0;
   */
  PENDING = 0,

  /**
   * Successfully verified - DNS TXT record confirmed
   *
   * @generated from enum value: DOMAIN_VERIFICATION_STATUS_VERIFIED = 1;
   */
  VERIFIED = 1,

  /**
   * Verification expired - exceeded time limit
   *
   * @generated from enum value: DOMAIN_VERIFICATION_STATUS_EXPIRED = 2;
   */
  EXPIRED = 2,

  /**
   * Verification failed - DNS lookup failed or record mismatch
   *
   * @generated from enum value: DOMAIN_VERIFICATION_STATUS_FAILED = 3;
   */
  FAILED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DomainVerificationStatus)
proto3.util.setEnumType(DomainVerificationStatus, "svc.v1.DomainVerificationStatus", [
  { no: 0, name: "DOMAIN_VERIFICATION_STATUS_PENDING" },
  { no: 1, name: "DOMAIN_VERIFICATION_STATUS_VERIFIED" },
  { no: 2, name: "DOMAIN_VERIFICATION_STATUS_EXPIRED" },
  { no: 3, name: "DOMAIN_VERIFICATION_STATUS_FAILED" },
]);

/**
 * ServiceStatus represents the operational state of a service
 *
 * @generated from enum svc.v1.ServiceStatus
 */
export enum ServiceStatus {
  /**
   * Service is active and operational
   *
   * @generated from enum value: SERVICE_STATUS_ACTIVE = 0;
   */
  ACTIVE = 0,

  /**
   * Service is temporarily suspended
   *
   * @generated from enum value: SERVICE_STATUS_SUSPENDED = 1;
   */
  SUSPENDED = 1,

  /**
   * Service has been permanently revoked
   *
   * @generated from enum value: SERVICE_STATUS_REVOKED = 2;
   */
  REVOKED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceStatus)
proto3.util.setEnumType(ServiceStatus, "svc.v1.ServiceStatus", [
  { no: 0, name: "SERVICE_STATUS_ACTIVE" },
  { no: 1, name: "SERVICE_STATUS_SUSPENDED" },
  { no: 2, name: "SERVICE_STATUS_REVOKED" },
]);

/**
 * Service represents a registered service with domain binding and UCAN
 * capabilities
 *
 * @generated from message svc.v1.Service
 */
export class Service extends Message<Service> {
  /**
   * Unique identifier for the service
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * DNS-verified domain bound to this service
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * Owner address who registered the service
   *
   * @generated from field: string owner = 3;
   */
  owner = "";

  /**
   * IPFS CID of the UCAN root capability for this service
   *
   * @generated from field: string root_capability_cid = 4;
   */
  rootCapabilityCid = "";

  /**
   * List of permissions granted to this service
   *
   * @generated from field: repeated string permissions = 5;
   */
  permissions: string[] = [];

  /**
   * Current status of the service
   *
   * @generated from field: svc.v1.ServiceStatus status = 6;
   */
  status = ServiceStatus.ACTIVE;

  /**
   * Unix timestamp when the service was registered
   *
   * @generated from field: int64 created_at = 7;
   */
  createdAt = protoInt64.zero;

  /**
   * Unix timestamp of last update
   *
   * @generated from field: int64 updated_at = 8;
   */
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<Service>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.Service";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "root_capability_cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 7, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service {
    return new Service().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJsonString(jsonString, options);
  }

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean {
    return proto3.util.equals(Service, a, b);
  }
}

/**
 * DomainVerification represents a domain ownership verification record
 *
 * @generated from message svc.v1.DomainVerification
 */
export class DomainVerification extends Message<DomainVerification> {
  /**
   * The domain being verified (e.g., "example.com")
   *
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * The owner's address who initiated the verification
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * Unique verification token to be placed in DNS TXT record
   *
   * @generated from field: string verification_token = 3;
   */
  verificationToken = "";

  /**
   * Current status of domain verification
   *
   * @generated from field: svc.v1.DomainVerificationStatus status = 4;
   */
  status = DomainVerificationStatus.PENDING;

  /**
   * Unix timestamp when the verification expires if not completed
   *
   * @generated from field: int64 expires_at = 5;
   */
  expiresAt = protoInt64.zero;

  /**
   * Unix timestamp when the domain was verified (if applicable)
   *
   * @generated from field: int64 verified_at = 6;
   */
  verifiedAt = protoInt64.zero;

  constructor(data?: PartialMessage<DomainVerification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.DomainVerification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verification_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(DomainVerificationStatus) },
    { no: 5, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "verified_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainVerification {
    return new DomainVerification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainVerification {
    return new DomainVerification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainVerification {
    return new DomainVerification().fromJsonString(jsonString, options);
  }

  static equals(a: DomainVerification | PlainMessage<DomainVerification> | undefined, b: DomainVerification | PlainMessage<DomainVerification> | undefined): boolean {
    return proto3.util.equals(DomainVerification, a, b);
  }
}

/**
 * ServiceCapability represents a service-specific capability with permissions
 *
 * @generated from message svc.v1.ServiceCapability
 */
export class ServiceCapability extends Message<ServiceCapability> {
  /**
   * Unique identifier for the capability
   *
   * @generated from field: string capability_id = 1;
   */
  capabilityId = "";

  /**
   * Service ID this capability belongs to
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  /**
   * DNS domain associated with the capability
   *
   * @generated from field: string domain = 3;
   */
  domain = "";

  /**
   * List of abilities/actions granted by this capability
   *
   * @generated from field: repeated string abilities = 4;
   */
  abilities: string[] = [];

  /**
   * Owner address who holds this capability
   *
   * @generated from field: string owner = 5;
   */
  owner = "";

  /**
   * Unix timestamp when the capability was created
   *
   * @generated from field: int64 created_at = 6;
   */
  createdAt = protoInt64.zero;

  /**
   * Unix timestamp when the capability expires (0 for no expiration)
   *
   * @generated from field: int64 expires_at = 7;
   */
  expiresAt = protoInt64.zero;

  /**
   * Whether this capability has been revoked
   *
   * @generated from field: bool revoked = 8;
   */
  revoked = false;

  constructor(data?: PartialMessage<ServiceCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.ServiceCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capability_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "abilities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceCapability {
    return new ServiceCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceCapability {
    return new ServiceCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceCapability {
    return new ServiceCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceCapability | PlainMessage<ServiceCapability> | undefined, b: ServiceCapability | PlainMessage<ServiceCapability> | undefined): boolean {
    return proto3.util.equals(ServiceCapability, a, b);
  }
}

/**
 * ServiceResource represents a resource that can be accessed with capabilities
 *
 * @generated from message svc.v1.ServiceResource
 */
export class ServiceResource extends Message<ServiceResource> {
  /**
   * Unique identifier for the resource
   *
   * @generated from field: string resource_id = 1;
   */
  resourceId = "";

  /**
   * Service ID this resource belongs to
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  /**
   * Type of resource (e.g., "api", "data", "file")
   *
   * @generated from field: string resource_type = 3;
   */
  resourceType = "";

  /**
   * List of abilities that can be performed on this resource
   *
   * @generated from field: repeated string allowed_abilities = 4;
   */
  allowedAbilities: string[] = [];

  /**
   * Additional metadata for the resource
   *
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ServiceResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.ServiceResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allowed_abilities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceResource {
    return new ServiceResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceResource {
    return new ServiceResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceResource {
    return new ServiceResource().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceResource | PlainMessage<ServiceResource> | undefined, b: ServiceResource | PlainMessage<ServiceResource> | undefined): boolean {
    return proto3.util.equals(ServiceResource, a, b);
  }
}

/**
 * ServiceOIDCConfig represents OpenID Connect configuration for a service
 *
 * @generated from message svc.v1.ServiceOIDCConfig
 */
export class ServiceOIDCConfig extends Message<ServiceOIDCConfig> {
  /**
   * Service ID this OIDC config belongs to
   *
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  /**
   * OIDC issuer URL (must match the service's verified domain)
   *
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * Authorization endpoint URL
   *
   * @generated from field: string authorization_endpoint = 3;
   */
  authorizationEndpoint = "";

  /**
   * Token endpoint URL
   *
   * @generated from field: string token_endpoint = 4;
   */
  tokenEndpoint = "";

  /**
   * JWKS URI for public key retrieval
   *
   * @generated from field: string jwks_uri = 5;
   */
  jwksUri = "";

  /**
   * UserInfo endpoint URL
   *
   * @generated from field: string userinfo_endpoint = 6;
   */
  userinfoEndpoint = "";

  /**
   * Supported OIDC scopes for this service
   *
   * @generated from field: repeated string scopes_supported = 7;
   */
  scopesSupported: string[] = [];

  /**
   * Supported response types
   *
   * @generated from field: repeated string response_types_supported = 8;
   */
  responseTypesSupported: string[] = [];

  /**
   * Supported grant types
   *
   * @generated from field: repeated string grant_types_supported = 9;
   */
  grantTypesSupported: string[] = [];

  /**
   * ID token signing algorithm values supported
   *
   * @generated from field: repeated string id_token_signing_alg_values_supported = 10;
   */
  idTokenSigningAlgValuesSupported: string[] = [];

  /**
   * Subject types supported
   *
   * @generated from field: repeated string subject_types_supported = 11;
   */
  subjectTypesSupported: string[] = [];

  /**
   * Token endpoint auth methods supported
   *
   * @generated from field: repeated string token_endpoint_auth_methods_supported = 12;
   */
  tokenEndpointAuthMethodsSupported: string[] = [];

  /**
   * Claims supported in ID tokens
   *
   * @generated from field: repeated string claims_supported = 13;
   */
  claimsSupported: string[] = [];

  /**
   * Response modes supported
   *
   * @generated from field: repeated string response_modes_supported = 14;
   */
  responseModesSupported: string[] = [];

  /**
   * Additional OIDC metadata as key-value pairs
   *
   * @generated from field: map<string, string> metadata = 15;
   */
  metadata: { [key: string]: string } = {};

  /**
   * Unix timestamp when this config was created
   *
   * @generated from field: int64 created_at = 16;
   */
  createdAt = protoInt64.zero;

  /**
   * Unix timestamp when this config was last updated
   *
   * @generated from field: int64 updated_at = 17;
   */
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<ServiceOIDCConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.ServiceOIDCConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authorization_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "jwks_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "userinfo_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "scopes_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "response_types_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "grant_types_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "id_token_signing_alg_values_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "subject_types_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "token_endpoint_auth_methods_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "claims_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "response_modes_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 16, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceOIDCConfig {
    return new ServiceOIDCConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceOIDCConfig {
    return new ServiceOIDCConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceOIDCConfig {
    return new ServiceOIDCConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceOIDCConfig | PlainMessage<ServiceOIDCConfig> | undefined, b: ServiceOIDCConfig | PlainMessage<ServiceOIDCConfig> | undefined): boolean {
    return proto3.util.equals(ServiceOIDCConfig, a, b);
  }
}

/**
 * JWK represents a JSON Web Key for OIDC
 *
 * @generated from message svc.v1.JWK
 */
export class JWK extends Message<JWK> {
  /**
   * Key type (e.g., "RSA", "EC")
   *
   * @generated from field: string kty = 1;
   */
  kty = "";

  /**
   * Key use (e.g., "sig", "enc")
   *
   * @generated from field: string use = 2;
   */
  use = "";

  /**
   * Key ID
   *
   * @generated from field: string kid = 3;
   */
  kid = "";

  /**
   * Algorithm (e.g., "RS256", "ES256")
   *
   * @generated from field: string alg = 4;
   */
  alg = "";

  /**
   * RSA modulus (for RSA keys)
   *
   * @generated from field: string n = 5;
   */
  n = "";

  /**
   * RSA exponent (for RSA keys)
   *
   * @generated from field: string e = 6;
   */
  e = "";

  /**
   * Elliptic curve (for EC keys)
   *
   * @generated from field: string crv = 7;
   */
  crv = "";

  /**
   * X coordinate (for EC keys)
   *
   * @generated from field: string x = 8;
   */
  x = "";

  /**
   * Y coordinate (for EC keys)
   *
   * @generated from field: string y = 9;
   */
  y = "";

  constructor(data?: PartialMessage<JWK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.JWK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kty", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "use", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "alg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "n", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "e", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "crv", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "x", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "y", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWK {
    return new JWK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWK {
    return new JWK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWK {
    return new JWK().fromJsonString(jsonString, options);
  }

  static equals(a: JWK | PlainMessage<JWK> | undefined, b: JWK | PlainMessage<JWK> | undefined): boolean {
    return proto3.util.equals(JWK, a, b);
  }
}

/**
 * ServiceJWKS represents the JSON Web Key Set for a service
 *
 * @generated from message svc.v1.ServiceJWKS
 */
export class ServiceJWKS extends Message<ServiceJWKS> {
  /**
   * Service ID this JWKS belongs to
   *
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  /**
   * List of public keys
   *
   * @generated from field: repeated svc.v1.JWK keys = 2;
   */
  keys: JWK[] = [];

  /**
   * Unix timestamp when this JWKS was last rotated
   *
   * @generated from field: int64 rotated_at = 3;
   */
  rotatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<ServiceJWKS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.ServiceJWKS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "keys", kind: "message", T: JWK, repeated: true },
    { no: 3, name: "rotated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceJWKS {
    return new ServiceJWKS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceJWKS {
    return new ServiceJWKS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceJWKS {
    return new ServiceJWKS().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceJWKS | PlainMessage<ServiceJWKS> | undefined, b: ServiceJWKS | PlainMessage<ServiceJWKS> | undefined): boolean {
    return proto3.util.equals(ServiceJWKS, a, b);
  }
}

