// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file svc/v1/tx.proto (package svc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message svc.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: svc.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message svc.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgInitiateDomainVerification initiates domain ownership verification
 *
 * @generated from message svc.v1.MsgInitiateDomainVerification
 */
export class MsgInitiateDomainVerification extends Message<MsgInitiateDomainVerification> {
  /**
   * Address of the user initiating domain verification
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * Domain to be verified (e.g., "example.com")
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<MsgInitiateDomainVerification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgInitiateDomainVerification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInitiateDomainVerification {
    return new MsgInitiateDomainVerification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInitiateDomainVerification {
    return new MsgInitiateDomainVerification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInitiateDomainVerification {
    return new MsgInitiateDomainVerification().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInitiateDomainVerification | PlainMessage<MsgInitiateDomainVerification> | undefined, b: MsgInitiateDomainVerification | PlainMessage<MsgInitiateDomainVerification> | undefined): boolean {
    return proto3.util.equals(MsgInitiateDomainVerification, a, b);
  }
}

/**
 * MsgInitiateDomainVerificationResponse defines the response for domain
 * verification initiation
 *
 * @generated from message svc.v1.MsgInitiateDomainVerificationResponse
 */
export class MsgInitiateDomainVerificationResponse extends Message<MsgInitiateDomainVerificationResponse> {
  /**
   * Verification token to be placed in DNS TXT record
   *
   * @generated from field: string verification_token = 1;
   */
  verificationToken = "";

  /**
   * Instructions for DNS TXT record setup
   *
   * @generated from field: string dns_instruction = 2;
   */
  dnsInstruction = "";

  constructor(data?: PartialMessage<MsgInitiateDomainVerificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgInitiateDomainVerificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verification_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dns_instruction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInitiateDomainVerificationResponse {
    return new MsgInitiateDomainVerificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInitiateDomainVerificationResponse {
    return new MsgInitiateDomainVerificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInitiateDomainVerificationResponse {
    return new MsgInitiateDomainVerificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInitiateDomainVerificationResponse | PlainMessage<MsgInitiateDomainVerificationResponse> | undefined, b: MsgInitiateDomainVerificationResponse | PlainMessage<MsgInitiateDomainVerificationResponse> | undefined): boolean {
    return proto3.util.equals(MsgInitiateDomainVerificationResponse, a, b);
  }
}

/**
 * MsgVerifyDomain verifies domain ownership by checking DNS TXT records
 *
 * @generated from message svc.v1.MsgVerifyDomain
 */
export class MsgVerifyDomain extends Message<MsgVerifyDomain> {
  /**
   * Address of the user verifying domain ownership
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * Domain to be verified
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<MsgVerifyDomain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgVerifyDomain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVerifyDomain {
    return new MsgVerifyDomain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVerifyDomain {
    return new MsgVerifyDomain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVerifyDomain {
    return new MsgVerifyDomain().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVerifyDomain | PlainMessage<MsgVerifyDomain> | undefined, b: MsgVerifyDomain | PlainMessage<MsgVerifyDomain> | undefined): boolean {
    return proto3.util.equals(MsgVerifyDomain, a, b);
  }
}

/**
 * MsgVerifyDomainResponse defines the response for domain verification
 *
 * @generated from message svc.v1.MsgVerifyDomainResponse
 */
export class MsgVerifyDomainResponse extends Message<MsgVerifyDomainResponse> {
  /**
   * Whether verification was successful
   *
   * @generated from field: bool verified = 1;
   */
  verified = false;

  /**
   * Message describing verification result
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<MsgVerifyDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgVerifyDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVerifyDomainResponse {
    return new MsgVerifyDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVerifyDomainResponse {
    return new MsgVerifyDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVerifyDomainResponse {
    return new MsgVerifyDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVerifyDomainResponse | PlainMessage<MsgVerifyDomainResponse> | undefined, b: MsgVerifyDomainResponse | PlainMessage<MsgVerifyDomainResponse> | undefined): boolean {
    return proto3.util.equals(MsgVerifyDomainResponse, a, b);
  }
}

/**
 * MsgRegisterService registers a new service with verified domain binding
 *
 * @generated from message svc.v1.MsgRegisterService
 */
export class MsgRegisterService extends Message<MsgRegisterService> {
  /**
   * Address of the service owner
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * Unique identifier for the service
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  /**
   * Verified domain to bind to this service
   *
   * @generated from field: string domain = 3;
   */
  domain = "";

  /**
   * List of permissions requested for this service
   *
   * @generated from field: repeated string requested_permissions = 4;
   */
  requestedPermissions: string[] = [];

  /**
   * UCAN delegation chain for authorization (JWT-encoded)
   *
   * @generated from field: string ucan_delegation_chain = 5;
   */
  ucanDelegationChain = "";

  constructor(data?: PartialMessage<MsgRegisterService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgRegisterService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "requested_permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "ucan_delegation_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterService {
    return new MsgRegisterService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterService {
    return new MsgRegisterService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterService {
    return new MsgRegisterService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterService | PlainMessage<MsgRegisterService> | undefined, b: MsgRegisterService | PlainMessage<MsgRegisterService> | undefined): boolean {
    return proto3.util.equals(MsgRegisterService, a, b);
  }
}

/**
 * MsgRegisterServiceResponse defines the response for service registration
 *
 * @generated from message svc.v1.MsgRegisterServiceResponse
 */
export class MsgRegisterServiceResponse extends Message<MsgRegisterServiceResponse> {
  /**
   * IPFS CID of the generated root capability
   *
   * @generated from field: string root_capability_cid = 1;
   */
  rootCapabilityCid = "";

  /**
   * Service registration details
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  constructor(data?: PartialMessage<MsgRegisterServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.MsgRegisterServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root_capability_cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterServiceResponse {
    return new MsgRegisterServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterServiceResponse {
    return new MsgRegisterServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterServiceResponse {
    return new MsgRegisterServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterServiceResponse | PlainMessage<MsgRegisterServiceResponse> | undefined, b: MsgRegisterServiceResponse | PlainMessage<MsgRegisterServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterServiceResponse, a, b);
  }
}

