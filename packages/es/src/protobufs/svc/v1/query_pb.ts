// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file svc/v1/query.proto (package svc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { DomainVerification, JWK, Service, ServiceOIDCConfig, ServiceStatus } from "./state_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message svc.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message svc.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: svc.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryDomainVerificationRequest is the request type for the
 * Query/DomainVerification RPC method.
 *
 * @generated from message svc.v1.QueryDomainVerificationRequest
 */
export class QueryDomainVerificationRequest extends Message<QueryDomainVerificationRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<QueryDomainVerificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryDomainVerificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDomainVerificationRequest {
    return new QueryDomainVerificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDomainVerificationRequest {
    return new QueryDomainVerificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDomainVerificationRequest {
    return new QueryDomainVerificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDomainVerificationRequest | PlainMessage<QueryDomainVerificationRequest> | undefined, b: QueryDomainVerificationRequest | PlainMessage<QueryDomainVerificationRequest> | undefined): boolean {
    return proto3.util.equals(QueryDomainVerificationRequest, a, b);
  }
}

/**
 * QueryDomainVerificationResponse is the response type for the
 * Query/DomainVerification RPC method.
 *
 * @generated from message svc.v1.QueryDomainVerificationResponse
 */
export class QueryDomainVerificationResponse extends Message<QueryDomainVerificationResponse> {
  /**
   * @generated from field: svc.v1.DomainVerification domain_verification = 1;
   */
  domainVerification?: DomainVerification;

  constructor(data?: PartialMessage<QueryDomainVerificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryDomainVerificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain_verification", kind: "message", T: DomainVerification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDomainVerificationResponse {
    return new QueryDomainVerificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDomainVerificationResponse {
    return new QueryDomainVerificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDomainVerificationResponse {
    return new QueryDomainVerificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDomainVerificationResponse | PlainMessage<QueryDomainVerificationResponse> | undefined, b: QueryDomainVerificationResponse | PlainMessage<QueryDomainVerificationResponse> | undefined): boolean {
    return proto3.util.equals(QueryDomainVerificationResponse, a, b);
  }
}

/**
 * QueryServiceRequest is the request type for the Query/Service RPC method.
 *
 * @generated from message svc.v1.QueryServiceRequest
 */
export class QueryServiceRequest extends Message<QueryServiceRequest> {
  /**
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  constructor(data?: PartialMessage<QueryServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceRequest {
    return new QueryServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceRequest {
    return new QueryServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceRequest {
    return new QueryServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceRequest | PlainMessage<QueryServiceRequest> | undefined, b: QueryServiceRequest | PlainMessage<QueryServiceRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceRequest, a, b);
  }
}

/**
 * QueryServiceResponse is the response type for the Query/Service RPC method.
 *
 * @generated from message svc.v1.QueryServiceResponse
 */
export class QueryServiceResponse extends Message<QueryServiceResponse> {
  /**
   * @generated from field: svc.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<QueryServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceResponse {
    return new QueryServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceResponse {
    return new QueryServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceResponse {
    return new QueryServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceResponse | PlainMessage<QueryServiceResponse> | undefined, b: QueryServiceResponse | PlainMessage<QueryServiceResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceResponse, a, b);
  }
}

/**
 * QueryServicesByOwnerRequest is the request type for the Query/ServicesByOwner
 * RPC method.
 *
 * @generated from message svc.v1.QueryServicesByOwnerRequest
 */
export class QueryServicesByOwnerRequest extends Message<QueryServicesByOwnerRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  constructor(data?: PartialMessage<QueryServicesByOwnerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServicesByOwnerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServicesByOwnerRequest {
    return new QueryServicesByOwnerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServicesByOwnerRequest {
    return new QueryServicesByOwnerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServicesByOwnerRequest {
    return new QueryServicesByOwnerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServicesByOwnerRequest | PlainMessage<QueryServicesByOwnerRequest> | undefined, b: QueryServicesByOwnerRequest | PlainMessage<QueryServicesByOwnerRequest> | undefined): boolean {
    return proto3.util.equals(QueryServicesByOwnerRequest, a, b);
  }
}

/**
 * QueryServicesByOwnerResponse is the response type for the
 * Query/ServicesByOwner RPC method.
 *
 * @generated from message svc.v1.QueryServicesByOwnerResponse
 */
export class QueryServicesByOwnerResponse extends Message<QueryServicesByOwnerResponse> {
  /**
   * @generated from field: repeated svc.v1.Service services = 1;
   */
  services: Service[] = [];

  constructor(data?: PartialMessage<QueryServicesByOwnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServicesByOwnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServicesByOwnerResponse {
    return new QueryServicesByOwnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServicesByOwnerResponse {
    return new QueryServicesByOwnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServicesByOwnerResponse {
    return new QueryServicesByOwnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServicesByOwnerResponse | PlainMessage<QueryServicesByOwnerResponse> | undefined, b: QueryServicesByOwnerResponse | PlainMessage<QueryServicesByOwnerResponse> | undefined): boolean {
    return proto3.util.equals(QueryServicesByOwnerResponse, a, b);
  }
}

/**
 * QueryServicesByDomainRequest is the request type for the
 * Query/ServicesByDomain RPC method.
 *
 * @generated from message svc.v1.QueryServicesByDomainRequest
 */
export class QueryServicesByDomainRequest extends Message<QueryServicesByDomainRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<QueryServicesByDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServicesByDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServicesByDomainRequest {
    return new QueryServicesByDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServicesByDomainRequest {
    return new QueryServicesByDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServicesByDomainRequest {
    return new QueryServicesByDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServicesByDomainRequest | PlainMessage<QueryServicesByDomainRequest> | undefined, b: QueryServicesByDomainRequest | PlainMessage<QueryServicesByDomainRequest> | undefined): boolean {
    return proto3.util.equals(QueryServicesByDomainRequest, a, b);
  }
}

/**
 * QueryServicesByDomainResponse is the response type for the
 * Query/ServicesByDomain RPC method.
 *
 * @generated from message svc.v1.QueryServicesByDomainResponse
 */
export class QueryServicesByDomainResponse extends Message<QueryServicesByDomainResponse> {
  /**
   * @generated from field: repeated svc.v1.Service services = 1;
   */
  services: Service[] = [];

  constructor(data?: PartialMessage<QueryServicesByDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServicesByDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServicesByDomainResponse {
    return new QueryServicesByDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServicesByDomainResponse {
    return new QueryServicesByDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServicesByDomainResponse {
    return new QueryServicesByDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServicesByDomainResponse | PlainMessage<QueryServicesByDomainResponse> | undefined, b: QueryServicesByDomainResponse | PlainMessage<QueryServicesByDomainResponse> | undefined): boolean {
    return proto3.util.equals(QueryServicesByDomainResponse, a, b);
  }
}

/**
 * QueryServiceOIDCDiscoveryRequest is the request type for the
 * Query/ServiceOIDCDiscovery RPC method.
 *
 * @generated from message svc.v1.QueryServiceOIDCDiscoveryRequest
 */
export class QueryServiceOIDCDiscoveryRequest extends Message<QueryServiceOIDCDiscoveryRequest> {
  /**
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  constructor(data?: PartialMessage<QueryServiceOIDCDiscoveryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceOIDCDiscoveryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOIDCDiscoveryRequest {
    return new QueryServiceOIDCDiscoveryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOIDCDiscoveryRequest {
    return new QueryServiceOIDCDiscoveryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOIDCDiscoveryRequest {
    return new QueryServiceOIDCDiscoveryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOIDCDiscoveryRequest | PlainMessage<QueryServiceOIDCDiscoveryRequest> | undefined, b: QueryServiceOIDCDiscoveryRequest | PlainMessage<QueryServiceOIDCDiscoveryRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceOIDCDiscoveryRequest, a, b);
  }
}

/**
 * QueryServiceOIDCDiscoveryResponse is the response type for the
 * Query/ServiceOIDCDiscovery RPC method.
 * This response follows the OpenID Connect Discovery 1.0 specification
 *
 * @generated from message svc.v1.QueryServiceOIDCDiscoveryResponse
 */
export class QueryServiceOIDCDiscoveryResponse extends Message<QueryServiceOIDCDiscoveryResponse> {
  /**
   * The issuer identifier
   *
   * @generated from field: string issuer = 1;
   */
  issuer = "";

  /**
   * URL of the authorization endpoint
   *
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint = "";

  /**
   * URL of the token endpoint
   *
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint = "";

  /**
   * URL of the JSON Web Key Set
   *
   * @generated from field: string jwks_uri = 4;
   */
  jwksUri = "";

  /**
   * URL of the UserInfo endpoint
   *
   * @generated from field: string userinfo_endpoint = 5;
   */
  userinfoEndpoint = "";

  /**
   * URL for the registration endpoint
   *
   * @generated from field: string registration_endpoint = 6;
   */
  registrationEndpoint = "";

  /**
   * JSON array containing a list of the OAuth 2.0 scope values
   *
   * @generated from field: repeated string scopes_supported = 7;
   */
  scopesSupported: string[] = [];

  /**
   * JSON array containing a list of the OAuth 2.0 response_type values
   *
   * @generated from field: repeated string response_types_supported = 8;
   */
  responseTypesSupported: string[] = [];

  /**
   * JSON array containing a list of the OAuth 2.0 grant_type values
   *
   * @generated from field: repeated string grant_types_supported = 9;
   */
  grantTypesSupported: string[] = [];

  /**
   * JSON array containing a list of the JWS signing algorithms
   *
   * @generated from field: repeated string id_token_signing_alg_values_supported = 10;
   */
  idTokenSigningAlgValuesSupported: string[] = [];

  /**
   * JSON array containing a list of the Subject Identifier types
   *
   * @generated from field: repeated string subject_types_supported = 11;
   */
  subjectTypesSupported: string[] = [];

  /**
   * JSON array containing a list of client authentication methods
   *
   * @generated from field: repeated string token_endpoint_auth_methods_supported = 12;
   */
  tokenEndpointAuthMethodsSupported: string[] = [];

  /**
   * JSON array containing a list of the Claim Names
   *
   * @generated from field: repeated string claims_supported = 13;
   */
  claimsSupported: string[] = [];

  /**
   * JSON array containing a list of the OAuth 2.0 response_mode values
   *
   * @generated from field: repeated string response_modes_supported = 14;
   */
  responseModesSupported: string[] = [];

  /**
   * Service URL for documentation
   *
   * @generated from field: string service_documentation = 15;
   */
  serviceDocumentation = "";

  /**
   * Languages supported for the UI
   *
   * @generated from field: repeated string ui_locales_supported = 16;
   */
  uiLocalesSupported: string[] = [];

  /**
   * Languages supported for claims
   *
   * @generated from field: repeated string claims_locales_supported = 17;
   */
  claimsLocalesSupported: string[] = [];

  /**
   * Boolean value specifying whether the OP supports use of the request parameter
   *
   * @generated from field: bool request_parameter_supported = 18;
   */
  requestParameterSupported = false;

  /**
   * Boolean value specifying whether the OP supports use of the request_uri parameter
   *
   * @generated from field: bool request_uri_parameter_supported = 19;
   */
  requestUriParameterSupported = false;

  /**
   * Boolean value specifying whether the OP requires any request_uri values
   *
   * @generated from field: bool require_request_uri_registration = 20;
   */
  requireRequestUriRegistration = false;

  /**
   * URL that the OP provides to the person registering the Client
   *
   * @generated from field: string op_policy_uri = 21;
   */
  opPolicyUri = "";

  /**
   * URL that the OP provides to the person registering the Client
   *
   * @generated from field: string op_tos_uri = 22;
   */
  opTosUri = "";

  constructor(data?: PartialMessage<QueryServiceOIDCDiscoveryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceOIDCDiscoveryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authorization_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "jwks_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "userinfo_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "registration_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "scopes_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "response_types_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "grant_types_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "id_token_signing_alg_values_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "subject_types_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "token_endpoint_auth_methods_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "claims_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "response_modes_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "service_documentation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "ui_locales_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 17, name: "claims_locales_supported", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: "request_parameter_supported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "request_uri_parameter_supported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "require_request_uri_registration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "op_policy_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "op_tos_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOIDCDiscoveryResponse {
    return new QueryServiceOIDCDiscoveryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOIDCDiscoveryResponse {
    return new QueryServiceOIDCDiscoveryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOIDCDiscoveryResponse {
    return new QueryServiceOIDCDiscoveryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOIDCDiscoveryResponse | PlainMessage<QueryServiceOIDCDiscoveryResponse> | undefined, b: QueryServiceOIDCDiscoveryResponse | PlainMessage<QueryServiceOIDCDiscoveryResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceOIDCDiscoveryResponse, a, b);
  }
}

/**
 * QueryServiceOIDCJWKSRequest is the request type for the
 * Query/ServiceOIDCJWKS RPC method.
 *
 * @generated from message svc.v1.QueryServiceOIDCJWKSRequest
 */
export class QueryServiceOIDCJWKSRequest extends Message<QueryServiceOIDCJWKSRequest> {
  /**
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  constructor(data?: PartialMessage<QueryServiceOIDCJWKSRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceOIDCJWKSRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOIDCJWKSRequest {
    return new QueryServiceOIDCJWKSRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOIDCJWKSRequest {
    return new QueryServiceOIDCJWKSRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOIDCJWKSRequest {
    return new QueryServiceOIDCJWKSRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOIDCJWKSRequest | PlainMessage<QueryServiceOIDCJWKSRequest> | undefined, b: QueryServiceOIDCJWKSRequest | PlainMessage<QueryServiceOIDCJWKSRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceOIDCJWKSRequest, a, b);
  }
}

/**
 * QueryServiceOIDCJWKSResponse is the response type for the
 * Query/ServiceOIDCJWKS RPC method.
 * This response follows the JSON Web Key Set specification
 *
 * @generated from message svc.v1.QueryServiceOIDCJWKSResponse
 */
export class QueryServiceOIDCJWKSResponse extends Message<QueryServiceOIDCJWKSResponse> {
  /**
   * Array of JWK values
   *
   * @generated from field: repeated svc.v1.JWK keys = 1;
   */
  keys: JWK[] = [];

  constructor(data?: PartialMessage<QueryServiceOIDCJWKSResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceOIDCJWKSResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: JWK, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOIDCJWKSResponse {
    return new QueryServiceOIDCJWKSResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOIDCJWKSResponse {
    return new QueryServiceOIDCJWKSResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOIDCJWKSResponse {
    return new QueryServiceOIDCJWKSResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOIDCJWKSResponse | PlainMessage<QueryServiceOIDCJWKSResponse> | undefined, b: QueryServiceOIDCJWKSResponse | PlainMessage<QueryServiceOIDCJWKSResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceOIDCJWKSResponse, a, b);
  }
}

/**
 * QueryServiceOIDCMetadataRequest is the request type for the
 * Query/ServiceOIDCMetadata RPC method.
 *
 * @generated from message svc.v1.QueryServiceOIDCMetadataRequest
 */
export class QueryServiceOIDCMetadataRequest extends Message<QueryServiceOIDCMetadataRequest> {
  /**
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  constructor(data?: PartialMessage<QueryServiceOIDCMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceOIDCMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOIDCMetadataRequest {
    return new QueryServiceOIDCMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOIDCMetadataRequest {
    return new QueryServiceOIDCMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOIDCMetadataRequest {
    return new QueryServiceOIDCMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOIDCMetadataRequest | PlainMessage<QueryServiceOIDCMetadataRequest> | undefined, b: QueryServiceOIDCMetadataRequest | PlainMessage<QueryServiceOIDCMetadataRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceOIDCMetadataRequest, a, b);
  }
}

/**
 * QueryServiceOIDCMetadataResponse is the response type for the
 * Query/ServiceOIDCMetadata RPC method.
 *
 * @generated from message svc.v1.QueryServiceOIDCMetadataResponse
 */
export class QueryServiceOIDCMetadataResponse extends Message<QueryServiceOIDCMetadataResponse> {
  /**
   * Service-specific OIDC metadata
   *
   * @generated from field: svc.v1.ServiceOIDCConfig config = 1;
   */
  config?: ServiceOIDCConfig;

  /**
   * The verified domain of the service
   *
   * @generated from field: string verified_domain = 2;
   */
  verifiedDomain = "";

  /**
   * Service status
   *
   * @generated from field: svc.v1.ServiceStatus service_status = 3;
   */
  serviceStatus = ServiceStatus.ACTIVE;

  /**
   * Additional metadata as key-value pairs
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<QueryServiceOIDCMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.QueryServiceOIDCMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: ServiceOIDCConfig },
    { no: 2, name: "verified_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service_status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOIDCMetadataResponse {
    return new QueryServiceOIDCMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOIDCMetadataResponse {
    return new QueryServiceOIDCMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOIDCMetadataResponse {
    return new QueryServiceOIDCMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOIDCMetadataResponse | PlainMessage<QueryServiceOIDCMetadataResponse> | undefined, b: QueryServiceOIDCMetadataResponse | PlainMessage<QueryServiceOIDCMetadataResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceOIDCMetadataResponse, a, b);
  }
}

