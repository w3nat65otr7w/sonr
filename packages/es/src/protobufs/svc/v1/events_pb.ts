// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file svc/v1/events.proto (package svc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * EventDomainVerificationInitiated is emitted when domain verification is initiated
 *
 * @generated from message svc.v1.EventDomainVerificationInitiated
 */
export class EventDomainVerificationInitiated extends Message<EventDomainVerificationInitiated> {
  /**
   * Domain being verified
   *
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * Verification ID
   *
   * @generated from field: string verification_id = 2;
   */
  verificationId = "";

  /**
   * Verification challenge
   *
   * @generated from field: string challenge = 3;
   */
  challenge = "";

  /**
   * Initiator address
   *
   * @generated from field: string initiator = 4;
   */
  initiator = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventDomainVerificationInitiated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.EventDomainVerificationInitiated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "challenge", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "initiator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDomainVerificationInitiated {
    return new EventDomainVerificationInitiated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDomainVerificationInitiated {
    return new EventDomainVerificationInitiated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDomainVerificationInitiated {
    return new EventDomainVerificationInitiated().fromJsonString(jsonString, options);
  }

  static equals(a: EventDomainVerificationInitiated | PlainMessage<EventDomainVerificationInitiated> | undefined, b: EventDomainVerificationInitiated | PlainMessage<EventDomainVerificationInitiated> | undefined): boolean {
    return proto3.util.equals(EventDomainVerificationInitiated, a, b);
  }
}

/**
 * EventDomainVerified is emitted when a domain is successfully verified
 *
 * @generated from message svc.v1.EventDomainVerified
 */
export class EventDomainVerified extends Message<EventDomainVerified> {
  /**
   * Domain that was verified
   *
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * Verification ID
   *
   * @generated from field: string verification_id = 2;
   */
  verificationId = "";

  /**
   * Verifier address
   *
   * @generated from field: string verifier = 3;
   */
  verifier = "";

  /**
   * Verification timestamp
   *
   * @generated from field: google.protobuf.Timestamp verified_at = 4;
   */
  verifiedAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventDomainVerified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.EventDomainVerified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified_at", kind: "message", T: Timestamp },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDomainVerified {
    return new EventDomainVerified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDomainVerified {
    return new EventDomainVerified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDomainVerified {
    return new EventDomainVerified().fromJsonString(jsonString, options);
  }

  static equals(a: EventDomainVerified | PlainMessage<EventDomainVerified> | undefined, b: EventDomainVerified | PlainMessage<EventDomainVerified> | undefined): boolean {
    return proto3.util.equals(EventDomainVerified, a, b);
  }
}

/**
 * EventServiceRegistered is emitted when a service is registered
 *
 * @generated from message svc.v1.EventServiceRegistered
 */
export class EventServiceRegistered extends Message<EventServiceRegistered> {
  /**
   * Service ID
   *
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  /**
   * Associated domain
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * Owner DID
   *
   * @generated from field: string owner = 3;
   */
  owner = "";

  /**
   * Service endpoints
   *
   * @generated from field: repeated string endpoints = 4;
   */
  endpoints: string[] = [];

  /**
   * Service metadata (JSON string)
   *
   * @generated from field: string metadata = 5;
   */
  metadata = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 6;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventServiceRegistered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.v1.EventServiceRegistered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "endpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventServiceRegistered {
    return new EventServiceRegistered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventServiceRegistered {
    return new EventServiceRegistered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventServiceRegistered {
    return new EventServiceRegistered().fromJsonString(jsonString, options);
  }

  static equals(a: EventServiceRegistered | PlainMessage<EventServiceRegistered> | undefined, b: EventServiceRegistered | PlainMessage<EventServiceRegistered> | undefined): boolean {
    return proto3.util.equals(EventServiceRegistered, a, b);
  }
}

