// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dwn/v1/query.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { IPFSStatus, Params } from "./genesis_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { DWNPermission, DWNProtocol, DWNRecord, EncryptionMetadata, VaultState, VRFConsensusRound, VRFContribution } from "./state_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message dwn.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message dwn.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: dwn.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryIPFSRequest is the request type for the Query/IPFS RPC method.
 *
 * @generated from message dwn.v1.QueryIPFSRequest
 */
export class QueryIPFSRequest extends Message<QueryIPFSRequest> {
  constructor(data?: PartialMessage<QueryIPFSRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryIPFSRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIPFSRequest {
    return new QueryIPFSRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIPFSRequest {
    return new QueryIPFSRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIPFSRequest {
    return new QueryIPFSRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIPFSRequest | PlainMessage<QueryIPFSRequest> | undefined, b: QueryIPFSRequest | PlainMessage<QueryIPFSRequest> | undefined): boolean {
    return proto3.util.equals(QueryIPFSRequest, a, b);
  }
}

/**
 * QueryIPFSResponse is the response type for the Query/IPFS RPC method.
 *
 * @generated from message dwn.v1.QueryIPFSResponse
 */
export class QueryIPFSResponse extends Message<QueryIPFSResponse> {
  /**
   * IPFS status
   *
   * @generated from field: dwn.v1.IPFSStatus status = 1;
   */
  status?: IPFSStatus;

  constructor(data?: PartialMessage<QueryIPFSResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryIPFSResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: IPFSStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIPFSResponse {
    return new QueryIPFSResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIPFSResponse {
    return new QueryIPFSResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIPFSResponse {
    return new QueryIPFSResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIPFSResponse | PlainMessage<QueryIPFSResponse> | undefined, b: QueryIPFSResponse | PlainMessage<QueryIPFSResponse> | undefined): boolean {
    return proto3.util.equals(QueryIPFSResponse, a, b);
  }
}

/**
 * QueryCIDRequest is the request type for the Query/CID RPC method.
 *
 * @generated from message dwn.v1.QueryCIDRequest
 */
export class QueryCIDRequest extends Message<QueryCIDRequest> {
  /**
   * CID to query
   *
   * @generated from field: string cid = 1;
   */
  cid = "";

  constructor(data?: PartialMessage<QueryCIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryCIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCIDRequest {
    return new QueryCIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCIDRequest {
    return new QueryCIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCIDRequest {
    return new QueryCIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCIDRequest | PlainMessage<QueryCIDRequest> | undefined, b: QueryCIDRequest | PlainMessage<QueryCIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryCIDRequest, a, b);
  }
}

/**
 * QueryCIDResponse is the response type for the Query/CID RPC method.
 *
 * @generated from message dwn.v1.QueryCIDResponse
 */
export class QueryCIDResponse extends Message<QueryCIDResponse> {
  /**
   * Status code
   *
   * @generated from field: int32 status_code = 1;
   */
  statusCode = 0;

  /**
   * CID data
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryCIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryCIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCIDResponse {
    return new QueryCIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCIDResponse {
    return new QueryCIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCIDResponse {
    return new QueryCIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCIDResponse | PlainMessage<QueryCIDResponse> | undefined, b: QueryCIDResponse | PlainMessage<QueryCIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryCIDResponse, a, b);
  }
}

/**
 * QueryRecordsRequest is the request type for querying DWN records
 *
 * @generated from message dwn.v1.QueryRecordsRequest
 */
export class QueryRecordsRequest extends Message<QueryRecordsRequest> {
  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Optional protocol filter
   *
   * @generated from field: string protocol = 2;
   */
  protocol = "";

  /**
   * Optional schema filter
   *
   * @generated from field: string schema = 3;
   */
  schema = "";

  /**
   * Optional parent ID filter
   *
   * @generated from field: string parent_id = 4;
   */
  parentId = "";

  /**
   * Filter by published status
   *
   * @generated from field: bool published_only = 5;
   */
  publishedOnly = false;

  /**
   * Pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 6;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "published_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRecordsRequest {
    return new QueryRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRecordsRequest {
    return new QueryRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRecordsRequest {
    return new QueryRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRecordsRequest | PlainMessage<QueryRecordsRequest> | undefined, b: QueryRecordsRequest | PlainMessage<QueryRecordsRequest> | undefined): boolean {
    return proto3.util.equals(QueryRecordsRequest, a, b);
  }
}

/**
 * QueryRecordsResponse is the response type for querying DWN records
 *
 * @generated from message dwn.v1.QueryRecordsResponse
 */
export class QueryRecordsResponse extends Message<QueryRecordsResponse> {
  /**
   * List of records
   *
   * @generated from field: repeated dwn.v1.DWNRecord records = 1;
   */
  records: DWNRecord[] = [];

  /**
   * Pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: DWNRecord, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRecordsResponse {
    return new QueryRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRecordsResponse {
    return new QueryRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRecordsResponse {
    return new QueryRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRecordsResponse | PlainMessage<QueryRecordsResponse> | undefined, b: QueryRecordsResponse | PlainMessage<QueryRecordsResponse> | undefined): boolean {
    return proto3.util.equals(QueryRecordsResponse, a, b);
  }
}

/**
 * QueryRecordRequest is the request type for querying a specific DWN record
 *
 * @generated from message dwn.v1.QueryRecordRequest
 */
export class QueryRecordRequest extends Message<QueryRecordRequest> {
  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Record ID
   *
   * @generated from field: string record_id = 2;
   */
  recordId = "";

  constructor(data?: PartialMessage<QueryRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRecordRequest {
    return new QueryRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRecordRequest {
    return new QueryRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRecordRequest {
    return new QueryRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRecordRequest | PlainMessage<QueryRecordRequest> | undefined, b: QueryRecordRequest | PlainMessage<QueryRecordRequest> | undefined): boolean {
    return proto3.util.equals(QueryRecordRequest, a, b);
  }
}

/**
 * QueryRecordResponse is the response type for querying a specific DWN record
 *
 * @generated from message dwn.v1.QueryRecordResponse
 */
export class QueryRecordResponse extends Message<QueryRecordResponse> {
  /**
   * The record
   *
   * @generated from field: dwn.v1.DWNRecord record = 1;
   */
  record?: DWNRecord;

  constructor(data?: PartialMessage<QueryRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: DWNRecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRecordResponse {
    return new QueryRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRecordResponse {
    return new QueryRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRecordResponse {
    return new QueryRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRecordResponse | PlainMessage<QueryRecordResponse> | undefined, b: QueryRecordResponse | PlainMessage<QueryRecordResponse> | undefined): boolean {
    return proto3.util.equals(QueryRecordResponse, a, b);
  }
}

/**
 * QueryProtocolsRequest is the request type for querying DWN protocols
 *
 * @generated from message dwn.v1.QueryProtocolsRequest
 */
export class QueryProtocolsRequest extends Message<QueryProtocolsRequest> {
  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Filter by published status
   *
   * @generated from field: bool published_only = 2;
   */
  publishedOnly = false;

  /**
   * Pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryProtocolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryProtocolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "published_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProtocolsRequest {
    return new QueryProtocolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProtocolsRequest {
    return new QueryProtocolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProtocolsRequest {
    return new QueryProtocolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProtocolsRequest | PlainMessage<QueryProtocolsRequest> | undefined, b: QueryProtocolsRequest | PlainMessage<QueryProtocolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryProtocolsRequest, a, b);
  }
}

/**
 * QueryProtocolsResponse is the response type for querying DWN protocols
 *
 * @generated from message dwn.v1.QueryProtocolsResponse
 */
export class QueryProtocolsResponse extends Message<QueryProtocolsResponse> {
  /**
   * List of protocols
   *
   * @generated from field: repeated dwn.v1.DWNProtocol protocols = 1;
   */
  protocols: DWNProtocol[] = [];

  /**
   * Pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryProtocolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryProtocolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocols", kind: "message", T: DWNProtocol, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProtocolsResponse {
    return new QueryProtocolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProtocolsResponse {
    return new QueryProtocolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProtocolsResponse {
    return new QueryProtocolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProtocolsResponse | PlainMessage<QueryProtocolsResponse> | undefined, b: QueryProtocolsResponse | PlainMessage<QueryProtocolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryProtocolsResponse, a, b);
  }
}

/**
 * QueryProtocolRequest is the request type for querying a specific DWN protocol
 *
 * @generated from message dwn.v1.QueryProtocolRequest
 */
export class QueryProtocolRequest extends Message<QueryProtocolRequest> {
  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Protocol URI
   *
   * @generated from field: string protocol_uri = 2;
   */
  protocolUri = "";

  constructor(data?: PartialMessage<QueryProtocolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryProtocolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "protocol_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProtocolRequest {
    return new QueryProtocolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProtocolRequest {
    return new QueryProtocolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProtocolRequest {
    return new QueryProtocolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProtocolRequest | PlainMessage<QueryProtocolRequest> | undefined, b: QueryProtocolRequest | PlainMessage<QueryProtocolRequest> | undefined): boolean {
    return proto3.util.equals(QueryProtocolRequest, a, b);
  }
}

/**
 * QueryProtocolResponse is the response type for querying a specific DWN protocol
 *
 * @generated from message dwn.v1.QueryProtocolResponse
 */
export class QueryProtocolResponse extends Message<QueryProtocolResponse> {
  /**
   * The protocol
   *
   * @generated from field: dwn.v1.DWNProtocol protocol = 1;
   */
  protocol?: DWNProtocol;

  constructor(data?: PartialMessage<QueryProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryProtocolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol", kind: "message", T: DWNProtocol },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProtocolResponse {
    return new QueryProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProtocolResponse {
    return new QueryProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProtocolResponse {
    return new QueryProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProtocolResponse | PlainMessage<QueryProtocolResponse> | undefined, b: QueryProtocolResponse | PlainMessage<QueryProtocolResponse> | undefined): boolean {
    return proto3.util.equals(QueryProtocolResponse, a, b);
  }
}

/**
 * QueryPermissionsRequest is the request type for querying DWN permissions
 *
 * @generated from message dwn.v1.QueryPermissionsRequest
 */
export class QueryPermissionsRequest extends Message<QueryPermissionsRequest> {
  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Optional grantor filter
   *
   * @generated from field: string grantor = 2;
   */
  grantor = "";

  /**
   * Optional grantee filter
   *
   * @generated from field: string grantee = 3;
   */
  grantee = "";

  /**
   * Optional interface filter
   *
   * @generated from field: string interface_name = 4;
   */
  interfaceName = "";

  /**
   * Optional method filter
   *
   * @generated from field: string method = 5;
   */
  method = "";

  /**
   * Include revoked permissions
   *
   * @generated from field: bool include_revoked = 6;
   */
  includeRevoked = false;

  /**
   * Pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 7;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "interface_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "include_revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPermissionsRequest {
    return new QueryPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPermissionsRequest {
    return new QueryPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPermissionsRequest {
    return new QueryPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPermissionsRequest | PlainMessage<QueryPermissionsRequest> | undefined, b: QueryPermissionsRequest | PlainMessage<QueryPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPermissionsRequest, a, b);
  }
}

/**
 * QueryPermissionsResponse is the response type for querying DWN permissions
 *
 * @generated from message dwn.v1.QueryPermissionsResponse
 */
export class QueryPermissionsResponse extends Message<QueryPermissionsResponse> {
  /**
   * List of permissions
   *
   * @generated from field: repeated dwn.v1.DWNPermission permissions = 1;
   */
  permissions: DWNPermission[] = [];

  /**
   * Pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: DWNPermission, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPermissionsResponse {
    return new QueryPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPermissionsResponse {
    return new QueryPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPermissionsResponse {
    return new QueryPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPermissionsResponse | PlainMessage<QueryPermissionsResponse> | undefined, b: QueryPermissionsResponse | PlainMessage<QueryPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPermissionsResponse, a, b);
  }
}

/**
 * QueryVaultRequest is the request type for querying a specific vault
 *
 * @generated from message dwn.v1.QueryVaultRequest
 */
export class QueryVaultRequest extends Message<QueryVaultRequest> {
  /**
   * Vault ID
   *
   * @generated from field: string vault_id = 1;
   */
  vaultId = "";

  constructor(data?: PartialMessage<QueryVaultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryVaultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultRequest {
    return new QueryVaultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultRequest {
    return new QueryVaultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultRequest {
    return new QueryVaultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultRequest | PlainMessage<QueryVaultRequest> | undefined, b: QueryVaultRequest | PlainMessage<QueryVaultRequest> | undefined): boolean {
    return proto3.util.equals(QueryVaultRequest, a, b);
  }
}

/**
 * QueryVaultResponse is the response type for querying a specific vault
 *
 * @generated from message dwn.v1.QueryVaultResponse
 */
export class QueryVaultResponse extends Message<QueryVaultResponse> {
  /**
   * The vault
   *
   * @generated from field: dwn.v1.VaultState vault = 1;
   */
  vault?: VaultState;

  constructor(data?: PartialMessage<QueryVaultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryVaultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault", kind: "message", T: VaultState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultResponse {
    return new QueryVaultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultResponse {
    return new QueryVaultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultResponse {
    return new QueryVaultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultResponse | PlainMessage<QueryVaultResponse> | undefined, b: QueryVaultResponse | PlainMessage<QueryVaultResponse> | undefined): boolean {
    return proto3.util.equals(QueryVaultResponse, a, b);
  }
}

/**
 * QueryVaultsRequest is the request type for querying vaults by owner
 *
 * @generated from message dwn.v1.QueryVaultsRequest
 */
export class QueryVaultsRequest extends Message<QueryVaultsRequest> {
  /**
   * Optional owner filter
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * Pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVaultsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryVaultsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultsRequest {
    return new QueryVaultsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultsRequest {
    return new QueryVaultsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultsRequest {
    return new QueryVaultsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultsRequest | PlainMessage<QueryVaultsRequest> | undefined, b: QueryVaultsRequest | PlainMessage<QueryVaultsRequest> | undefined): boolean {
    return proto3.util.equals(QueryVaultsRequest, a, b);
  }
}

/**
 * QueryVaultsResponse is the response type for querying vaults
 *
 * @generated from message dwn.v1.QueryVaultsResponse
 */
export class QueryVaultsResponse extends Message<QueryVaultsResponse> {
  /**
   * List of vaults
   *
   * @generated from field: repeated dwn.v1.VaultState vaults = 1;
   */
  vaults: VaultState[] = [];

  /**
   * Pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVaultsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryVaultsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vaults", kind: "message", T: VaultState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultsResponse {
    return new QueryVaultsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultsResponse {
    return new QueryVaultsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultsResponse {
    return new QueryVaultsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultsResponse | PlainMessage<QueryVaultsResponse> | undefined, b: QueryVaultsResponse | PlainMessage<QueryVaultsResponse> | undefined): boolean {
    return proto3.util.equals(QueryVaultsResponse, a, b);
  }
}

/**
 * QueryEncryptedRecordRequest is the request type for querying encrypted records
 *
 * @generated from message dwn.v1.QueryEncryptedRecordRequest
 */
export class QueryEncryptedRecordRequest extends Message<QueryEncryptedRecordRequest> {
  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Record ID
   *
   * @generated from field: string record_id = 2;
   */
  recordId = "";

  /**
   * Optional: return encrypted data instead of decrypting
   *
   * @generated from field: bool return_encrypted = 3;
   */
  returnEncrypted = false;

  constructor(data?: PartialMessage<QueryEncryptedRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryEncryptedRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "return_encrypted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEncryptedRecordRequest {
    return new QueryEncryptedRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEncryptedRecordRequest {
    return new QueryEncryptedRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEncryptedRecordRequest {
    return new QueryEncryptedRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEncryptedRecordRequest | PlainMessage<QueryEncryptedRecordRequest> | undefined, b: QueryEncryptedRecordRequest | PlainMessage<QueryEncryptedRecordRequest> | undefined): boolean {
    return proto3.util.equals(QueryEncryptedRecordRequest, a, b);
  }
}

/**
 * QueryEncryptedRecordResponse is the response type for querying encrypted records
 *
 * @generated from message dwn.v1.QueryEncryptedRecordResponse
 */
export class QueryEncryptedRecordResponse extends Message<QueryEncryptedRecordResponse> {
  /**
   * The record with decrypted data (if requested)
   *
   * @generated from field: dwn.v1.DWNRecord record = 1;
   */
  record?: DWNRecord;

  /**
   * Encryption metadata for the record
   *
   * @generated from field: dwn.v1.EncryptionMetadata encryption_metadata = 2;
   */
  encryptionMetadata?: EncryptionMetadata;

  /**
   * Whether data was decrypted
   *
   * @generated from field: bool was_decrypted = 3;
   */
  wasDecrypted = false;

  constructor(data?: PartialMessage<QueryEncryptedRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryEncryptedRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: DWNRecord },
    { no: 2, name: "encryption_metadata", kind: "message", T: EncryptionMetadata },
    { no: 3, name: "was_decrypted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEncryptedRecordResponse {
    return new QueryEncryptedRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEncryptedRecordResponse {
    return new QueryEncryptedRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEncryptedRecordResponse {
    return new QueryEncryptedRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEncryptedRecordResponse | PlainMessage<QueryEncryptedRecordResponse> | undefined, b: QueryEncryptedRecordResponse | PlainMessage<QueryEncryptedRecordResponse> | undefined): boolean {
    return proto3.util.equals(QueryEncryptedRecordResponse, a, b);
  }
}

/**
 * QueryEncryptionStatusRequest is the request type for querying encryption status
 *
 * @generated from message dwn.v1.QueryEncryptionStatusRequest
 */
export class QueryEncryptionStatusRequest extends Message<QueryEncryptionStatusRequest> {
  constructor(data?: PartialMessage<QueryEncryptionStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryEncryptionStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEncryptionStatusRequest {
    return new QueryEncryptionStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEncryptionStatusRequest {
    return new QueryEncryptionStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEncryptionStatusRequest {
    return new QueryEncryptionStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEncryptionStatusRequest | PlainMessage<QueryEncryptionStatusRequest> | undefined, b: QueryEncryptionStatusRequest | PlainMessage<QueryEncryptionStatusRequest> | undefined): boolean {
    return proto3.util.equals(QueryEncryptionStatusRequest, a, b);
  }
}

/**
 * QueryEncryptionStatusResponse is the response type for querying encryption status
 *
 * @generated from message dwn.v1.QueryEncryptionStatusResponse
 */
export class QueryEncryptionStatusResponse extends Message<QueryEncryptionStatusResponse> {
  /**
   * Current encryption key version
   *
   * @generated from field: uint64 current_key_version = 1;
   */
  currentKeyVersion = protoInt64.zero;

  /**
   * Current validator set participating in consensus
   *
   * @generated from field: repeated string validator_set = 2;
   */
  validatorSet: string[] = [];

  /**
   * Whether running in single-node mode
   *
   * @generated from field: bool single_node_mode = 3;
   */
  singleNodeMode = false;

  /**
   * Last key rotation timestamp
   *
   * @generated from field: int64 last_rotation = 4;
   */
  lastRotation = protoInt64.zero;

  /**
   * Next scheduled rotation timestamp
   *
   * @generated from field: int64 next_rotation = 5;
   */
  nextRotation = protoInt64.zero;

  /**
   * Total encrypted records in the system
   *
   * @generated from field: uint64 total_encrypted_records = 6;
   */
  totalEncryptedRecords = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEncryptionStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryEncryptionStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_key_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "validator_set", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "single_node_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "last_rotation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "next_rotation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "total_encrypted_records", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEncryptionStatusResponse {
    return new QueryEncryptionStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEncryptionStatusResponse {
    return new QueryEncryptionStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEncryptionStatusResponse {
    return new QueryEncryptionStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEncryptionStatusResponse | PlainMessage<QueryEncryptionStatusResponse> | undefined, b: QueryEncryptionStatusResponse | PlainMessage<QueryEncryptionStatusResponse> | undefined): boolean {
    return proto3.util.equals(QueryEncryptionStatusResponse, a, b);
  }
}

/**
 * QueryVRFContributionsRequest is the request type for querying VRF contributions
 *
 * @generated from message dwn.v1.QueryVRFContributionsRequest
 */
export class QueryVRFContributionsRequest extends Message<QueryVRFContributionsRequest> {
  /**
   * Optional: filter by validator address
   *
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * Optional: filter by block height
   *
   * @generated from field: int64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * Pagination
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVRFContributionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryVRFContributionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVRFContributionsRequest {
    return new QueryVRFContributionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVRFContributionsRequest {
    return new QueryVRFContributionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVRFContributionsRequest {
    return new QueryVRFContributionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVRFContributionsRequest | PlainMessage<QueryVRFContributionsRequest> | undefined, b: QueryVRFContributionsRequest | PlainMessage<QueryVRFContributionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryVRFContributionsRequest, a, b);
  }
}

/**
 * QueryVRFContributionsResponse is the response type for querying VRF contributions
 *
 * @generated from message dwn.v1.QueryVRFContributionsResponse
 */
export class QueryVRFContributionsResponse extends Message<QueryVRFContributionsResponse> {
  /**
   * List of VRF contributions
   *
   * @generated from field: repeated dwn.v1.VRFContribution contributions = 1;
   */
  contributions: VRFContribution[] = [];

  /**
   * Current consensus round information
   *
   * @generated from field: dwn.v1.VRFConsensusRound current_round = 2;
   */
  currentRound?: VRFConsensusRound;

  /**
   * Pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 3;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVRFContributionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.QueryVRFContributionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contributions", kind: "message", T: VRFContribution, repeated: true },
    { no: 2, name: "current_round", kind: "message", T: VRFConsensusRound },
    { no: 3, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVRFContributionsResponse {
    return new QueryVRFContributionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVRFContributionsResponse {
    return new QueryVRFContributionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVRFContributionsResponse {
    return new QueryVRFContributionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVRFContributionsResponse | PlainMessage<QueryVRFContributionsResponse> | undefined, b: QueryVRFContributionsResponse | PlainMessage<QueryVRFContributionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryVRFContributionsResponse, a, b);
  }
}

