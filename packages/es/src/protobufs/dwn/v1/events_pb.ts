// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dwn/v1/events.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * EventRecordWritten is emitted when a record is written to DWN
 *
 * @generated from message dwn.v1.EventRecordWritten
 */
export class EventRecordWritten extends Message<EventRecordWritten> {
  /**
   * Record ID
   *
   * @generated from field: string record_id = 1;
   */
  recordId = "";

  /**
   * Target DID
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * Protocol URI
   *
   * @generated from field: string protocol = 3;
   */
  protocol = "";

  /**
   * Schema URI
   *
   * @generated from field: string schema = 4;
   */
  schema = "";

  /**
   * Data CID
   *
   * @generated from field: string data_cid = 5;
   */
  dataCid = "";

  /**
   * Data size in bytes
   *
   * @generated from field: uint64 data_size = 6;
   */
  dataSize = protoInt64.zero;

  /**
   * Whether data is encrypted
   *
   * @generated from field: bool encrypted = 7;
   */
  encrypted = false;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 8;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventRecordWritten>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventRecordWritten";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "data_cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "encrypted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRecordWritten {
    return new EventRecordWritten().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRecordWritten {
    return new EventRecordWritten().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRecordWritten {
    return new EventRecordWritten().fromJsonString(jsonString, options);
  }

  static equals(a: EventRecordWritten | PlainMessage<EventRecordWritten> | undefined, b: EventRecordWritten | PlainMessage<EventRecordWritten> | undefined): boolean {
    return proto3.util.equals(EventRecordWritten, a, b);
  }
}

/**
 * EventRecordDeleted is emitted when a record is deleted from DWN
 *
 * @generated from message dwn.v1.EventRecordDeleted
 */
export class EventRecordDeleted extends Message<EventRecordDeleted> {
  /**
   * Record ID
   *
   * @generated from field: string record_id = 1;
   */
  recordId = "";

  /**
   * Target DID
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * Deleter address
   *
   * @generated from field: string deleter = 3;
   */
  deleter = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventRecordDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventRecordDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deleter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRecordDeleted {
    return new EventRecordDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRecordDeleted {
    return new EventRecordDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRecordDeleted {
    return new EventRecordDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: EventRecordDeleted | PlainMessage<EventRecordDeleted> | undefined, b: EventRecordDeleted | PlainMessage<EventRecordDeleted> | undefined): boolean {
    return proto3.util.equals(EventRecordDeleted, a, b);
  }
}

/**
 * EventProtocolConfigured is emitted when a protocol is configured
 *
 * @generated from message dwn.v1.EventProtocolConfigured
 */
export class EventProtocolConfigured extends Message<EventProtocolConfigured> {
  /**
   * Target DID
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Protocol URI
   *
   * @generated from field: string protocol_uri = 2;
   */
  protocolUri = "";

  /**
   * Whether protocol is published
   *
   * @generated from field: bool published = 3;
   */
  published = false;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventProtocolConfigured>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventProtocolConfigured";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "protocol_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "published", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProtocolConfigured {
    return new EventProtocolConfigured().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProtocolConfigured {
    return new EventProtocolConfigured().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProtocolConfigured {
    return new EventProtocolConfigured().fromJsonString(jsonString, options);
  }

  static equals(a: EventProtocolConfigured | PlainMessage<EventProtocolConfigured> | undefined, b: EventProtocolConfigured | PlainMessage<EventProtocolConfigured> | undefined): boolean {
    return proto3.util.equals(EventProtocolConfigured, a, b);
  }
}

/**
 * EventPermissionGranted is emitted when a permission is granted
 *
 * @generated from message dwn.v1.EventPermissionGranted
 */
export class EventPermissionGranted extends Message<EventPermissionGranted> {
  /**
   * Permission ID
   *
   * @generated from field: string permission_id = 1;
   */
  permissionId = "";

  /**
   * Grantor DID
   *
   * @generated from field: string grantor = 2;
   */
  grantor = "";

  /**
   * Grantee DID
   *
   * @generated from field: string grantee = 3;
   */
  grantee = "";

  /**
   * Interface name
   *
   * @generated from field: string interface_name = 4;
   */
  interfaceName = "";

  /**
   * Method name
   *
   * @generated from field: string method = 5;
   */
  method = "";

  /**
   * Expiration timestamp
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 6;
   */
  expiresAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 7;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventPermissionGranted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventPermissionGranted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "interface_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "expires_at", kind: "message", T: Timestamp },
    { no: 7, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPermissionGranted {
    return new EventPermissionGranted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPermissionGranted {
    return new EventPermissionGranted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPermissionGranted {
    return new EventPermissionGranted().fromJsonString(jsonString, options);
  }

  static equals(a: EventPermissionGranted | PlainMessage<EventPermissionGranted> | undefined, b: EventPermissionGranted | PlainMessage<EventPermissionGranted> | undefined): boolean {
    return proto3.util.equals(EventPermissionGranted, a, b);
  }
}

/**
 * EventPermissionRevoked is emitted when a permission is revoked
 *
 * @generated from message dwn.v1.EventPermissionRevoked
 */
export class EventPermissionRevoked extends Message<EventPermissionRevoked> {
  /**
   * Permission ID
   *
   * @generated from field: string permission_id = 1;
   */
  permissionId = "";

  /**
   * Revoker DID
   *
   * @generated from field: string revoker = 2;
   */
  revoker = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventPermissionRevoked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventPermissionRevoked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revoker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPermissionRevoked {
    return new EventPermissionRevoked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPermissionRevoked {
    return new EventPermissionRevoked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPermissionRevoked {
    return new EventPermissionRevoked().fromJsonString(jsonString, options);
  }

  static equals(a: EventPermissionRevoked | PlainMessage<EventPermissionRevoked> | undefined, b: EventPermissionRevoked | PlainMessage<EventPermissionRevoked> | undefined): boolean {
    return proto3.util.equals(EventPermissionRevoked, a, b);
  }
}

/**
 * EventVaultCreated is emitted when a vault is created
 *
 * @generated from message dwn.v1.EventVaultCreated
 */
export class EventVaultCreated extends Message<EventVaultCreated> {
  /**
   * Vault ID
   *
   * @generated from field: string vault_id = 1;
   */
  vaultId = "";

  /**
   * Owner DID
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * Vault public key
   *
   * @generated from field: string public_key = 3;
   */
  publicKey = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventVaultCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventVaultCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVaultCreated {
    return new EventVaultCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVaultCreated {
    return new EventVaultCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVaultCreated {
    return new EventVaultCreated().fromJsonString(jsonString, options);
  }

  static equals(a: EventVaultCreated | PlainMessage<EventVaultCreated> | undefined, b: EventVaultCreated | PlainMessage<EventVaultCreated> | undefined): boolean {
    return proto3.util.equals(EventVaultCreated, a, b);
  }
}

/**
 * EventVaultKeysRotated is emitted when vault keys are rotated
 *
 * @generated from message dwn.v1.EventVaultKeysRotated
 */
export class EventVaultKeysRotated extends Message<EventVaultKeysRotated> {
  /**
   * Vault ID
   *
   * @generated from field: string vault_id = 1;
   */
  vaultId = "";

  /**
   * Owner DID
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * New public key
   *
   * @generated from field: string new_public_key = 3;
   */
  newPublicKey = "";

  /**
   * Rotation height
   *
   * @generated from field: uint64 rotation_height = 4;
   */
  rotationHeight = protoInt64.zero;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventVaultKeysRotated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventVaultKeysRotated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rotation_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVaultKeysRotated {
    return new EventVaultKeysRotated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVaultKeysRotated {
    return new EventVaultKeysRotated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVaultKeysRotated {
    return new EventVaultKeysRotated().fromJsonString(jsonString, options);
  }

  static equals(a: EventVaultKeysRotated | PlainMessage<EventVaultKeysRotated> | undefined, b: EventVaultKeysRotated | PlainMessage<EventVaultKeysRotated> | undefined): boolean {
    return proto3.util.equals(EventVaultKeysRotated, a, b);
  }
}

/**
 * EventKeyRotation is emitted when encryption keys are rotated
 *
 * @generated from message dwn.v1.EventKeyRotation
 */
export class EventKeyRotation extends Message<EventKeyRotation> {
  /**
   * Previous key version (0 if first rotation)
   *
   * @generated from field: uint64 old_key_version = 1;
   */
  oldKeyVersion = protoInt64.zero;

  /**
   * New key version
   *
   * @generated from field: uint64 new_key_version = 2;
   */
  newKeyVersion = protoInt64.zero;

  /**
   * Reason for rotation
   *
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * Block height when rotation occurred
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  /**
   * Whether running in single node mode
   *
   * @generated from field: bool single_node_mode = 5;
   */
  singleNodeMode = false;

  /**
   * Number of validators at time of rotation
   *
   * @generated from field: uint32 validator_count = 6;
   */
  validatorCount = 0;

  constructor(data?: PartialMessage<EventKeyRotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.EventKeyRotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_key_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "new_key_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "single_node_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "validator_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventKeyRotation {
    return new EventKeyRotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventKeyRotation {
    return new EventKeyRotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventKeyRotation {
    return new EventKeyRotation().fromJsonString(jsonString, options);
  }

  static equals(a: EventKeyRotation | PlainMessage<EventKeyRotation> | undefined, b: EventKeyRotation | PlainMessage<EventKeyRotation> | undefined): boolean {
    return proto3.util.equals(EventKeyRotation, a, b);
  }
}

