// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dwn/v1/genesis.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DWNPermission, DWNProtocol, DWNRecord, VaultState } from "./state_pb.js";

/**
 * GenesisState defines the module genesis state
 *
 * @generated from message dwn.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params defines all the parameters of the module.
   *
   * @generated from field: dwn.v1.Params params = 1;
   */
  params?: Params;

  /**
   * DWN Records
   *
   * @generated from field: repeated dwn.v1.DWNRecord records = 2;
   */
  records: DWNRecord[] = [];

  /**
   * DWN Protocols
   *
   * @generated from field: repeated dwn.v1.DWNProtocol protocols = 3;
   */
  protocols: DWNProtocol[] = [];

  /**
   * DWN Permissions
   *
   * @generated from field: repeated dwn.v1.DWNPermission permissions = 4;
   */
  permissions: DWNPermission[] = [];

  /**
   * Vaults
   *
   * @generated from field: repeated dwn.v1.VaultState vaults = 5;
   */
  vaults: VaultState[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "records", kind: "message", T: DWNRecord, repeated: true },
    { no: 3, name: "protocols", kind: "message", T: DWNProtocol, repeated: true },
    { no: 4, name: "permissions", kind: "message", T: DWNPermission, repeated: true },
    { no: 5, name: "vaults", kind: "message", T: VaultState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the set of module parameters.
 *
 * @generated from message dwn.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * Maximum size for DWN record data in bytes
   *
   * @generated from field: uint64 max_record_size = 1;
   */
  maxRecordSize = protoInt64.zero;

  /**
   * Maximum number of protocols per DWN
   *
   * @generated from field: uint32 max_protocols_per_dwn = 2;
   */
  maxProtocolsPerDwn = 0;

  /**
   * Maximum number of permissions per DWN
   *
   * @generated from field: uint32 max_permissions_per_dwn = 3;
   */
  maxPermissionsPerDwn = 0;

  /**
   * Enable vault creation
   *
   * @generated from field: bool vault_creation_enabled = 4;
   */
  vaultCreationEnabled = false;

  /**
   * Minimum vault refresh interval in blocks
   *
   * @generated from field: uint64 min_vault_refresh_interval = 5;
   */
  minVaultRefreshInterval = protoInt64.zero;

  /**
   * Encryption configuration
   *
   * @generated from field: bool encryption_enabled = 6;
   */
  encryptionEnabled = false;

  /**
   * Key rotation interval in days
   *
   * @generated from field: uint32 key_rotation_days = 7;
   */
  keyRotationDays = 0;

  /**
   * Minimum validators required for key generation (percentage of active set)
   *
   * @generated from field: uint32 min_validators_for_key_gen = 8;
   */
  minValidatorsForKeyGen = 0;

  /**
   * Protocols that require encryption
   *
   * @generated from field: repeated string encrypted_protocols = 9;
   */
  encryptedProtocols: string[] = [];

  /**
   * Schemas that require encryption
   *
   * @generated from field: repeated string encrypted_schemas = 10;
   */
  encryptedSchemas: string[] = [];

  /**
   * Enable single-node fallback for development
   *
   * @generated from field: bool single_node_fallback = 11;
   */
  singleNodeFallback = false;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_record_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_protocols_per_dwn", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max_permissions_per_dwn", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "vault_creation_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "min_vault_refresh_interval", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "encryption_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "key_rotation_days", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "min_validators_for_key_gen", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "encrypted_protocols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "encrypted_schemas", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "single_node_fallback", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message dwn.v1.IPFSStatus
 */
export class IPFSStatus extends Message<IPFSStatus> {
  /**
   * @generated from field: string peer_id = 1;
   */
  peerId = "";

  /**
   * @generated from field: string peer_name = 2;
   */
  peerName = "";

  /**
   * @generated from field: string peer_type = 3;
   */
  peerType = "";

  /**
   * @generated from field: string version = 4;
   */
  version = "";

  constructor(data?: PartialMessage<IPFSStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.IPFSStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "peer_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "peer_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPFSStatus {
    return new IPFSStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPFSStatus {
    return new IPFSStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPFSStatus {
    return new IPFSStatus().fromJsonString(jsonString, options);
  }

  static equals(a: IPFSStatus | PlainMessage<IPFSStatus> | undefined, b: IPFSStatus | PlainMessage<IPFSStatus> | undefined): boolean {
    return proto3.util.equals(IPFSStatus, a, b);
  }
}

