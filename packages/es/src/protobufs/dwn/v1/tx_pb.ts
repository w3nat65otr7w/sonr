// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dwn/v1/tx.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { DWNMessageDescriptor } from "./state_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message dwn.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the parameters to update.
   *
   * @generated from field: dwn.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message dwn.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgRecordsWrite creates or updates a record in the DWN
 *
 * @generated from message dwn.v1.MsgRecordsWrite
 */
export class MsgRecordsWrite extends Message<MsgRecordsWrite> {
  /**
   * Author of the record (DID or cosmos address)
   *
   * @generated from field: string author = 1;
   */
  author = "";

  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * Message descriptor
   *
   * @generated from field: dwn.v1.DWNMessageDescriptor descriptor = 3;
   */
  descriptor?: DWNMessageDescriptor;

  /**
   * Authorization JWT/signature
   *
   * @generated from field: string authorization = 4;
   */
  authorization = "";

  /**
   * Record data
   *
   * @generated from field: bytes data = 5;
   */
  data = new Uint8Array(0);

  /**
   * Optional protocol URI
   *
   * @generated from field: string protocol = 6;
   */
  protocol = "";

  /**
   * Optional protocol path
   *
   * @generated from field: string protocol_path = 7;
   */
  protocolPath = "";

  /**
   * Optional schema URI
   *
   * @generated from field: string schema = 8;
   */
  schema = "";

  /**
   * Optional parent record ID
   *
   * @generated from field: string parent_id = 9;
   */
  parentId = "";

  /**
   * Published flag
   *
   * @generated from field: bool published = 10;
   */
  published = false;

  /**
   * Optional encryption details
   *
   * @generated from field: string encryption = 11;
   */
  encryption = "";

  /**
   * Optional attestation
   *
   * @generated from field: string attestation = 12;
   */
  attestation = "";

  constructor(data?: PartialMessage<MsgRecordsWrite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgRecordsWrite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "descriptor", kind: "message", T: DWNMessageDescriptor },
    { no: 4, name: "authorization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "protocol_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "published", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "encryption", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "attestation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecordsWrite {
    return new MsgRecordsWrite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecordsWrite {
    return new MsgRecordsWrite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecordsWrite {
    return new MsgRecordsWrite().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecordsWrite | PlainMessage<MsgRecordsWrite> | undefined, b: MsgRecordsWrite | PlainMessage<MsgRecordsWrite> | undefined): boolean {
    return proto3.util.equals(MsgRecordsWrite, a, b);
  }
}

/**
 * MsgRecordsWriteResponse defines the response for RecordsWrite
 *
 * @generated from message dwn.v1.MsgRecordsWriteResponse
 */
export class MsgRecordsWriteResponse extends Message<MsgRecordsWriteResponse> {
  /**
   * Record ID of the created/updated record
   *
   * @generated from field: string record_id = 1;
   */
  recordId = "";

  /**
   * CID of the data
   *
   * @generated from field: string data_cid = 2;
   */
  dataCid = "";

  constructor(data?: PartialMessage<MsgRecordsWriteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgRecordsWriteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data_cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecordsWriteResponse {
    return new MsgRecordsWriteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecordsWriteResponse {
    return new MsgRecordsWriteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecordsWriteResponse {
    return new MsgRecordsWriteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecordsWriteResponse | PlainMessage<MsgRecordsWriteResponse> | undefined, b: MsgRecordsWriteResponse | PlainMessage<MsgRecordsWriteResponse> | undefined): boolean {
    return proto3.util.equals(MsgRecordsWriteResponse, a, b);
  }
}

/**
 * MsgRecordsDelete deletes a record from the DWN
 *
 * @generated from message dwn.v1.MsgRecordsDelete
 */
export class MsgRecordsDelete extends Message<MsgRecordsDelete> {
  /**
   * Author requesting deletion (DID or cosmos address)
   *
   * @generated from field: string author = 1;
   */
  author = "";

  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * Record ID to delete
   *
   * @generated from field: string record_id = 3;
   */
  recordId = "";

  /**
   * Message descriptor
   *
   * @generated from field: dwn.v1.DWNMessageDescriptor descriptor = 4;
   */
  descriptor?: DWNMessageDescriptor;

  /**
   * Authorization JWT/signature
   *
   * @generated from field: string authorization = 5;
   */
  authorization = "";

  /**
   * Prune descendants flag
   *
   * @generated from field: bool prune = 6;
   */
  prune = false;

  constructor(data?: PartialMessage<MsgRecordsDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgRecordsDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "descriptor", kind: "message", T: DWNMessageDescriptor },
    { no: 5, name: "authorization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "prune", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecordsDelete {
    return new MsgRecordsDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecordsDelete {
    return new MsgRecordsDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecordsDelete {
    return new MsgRecordsDelete().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecordsDelete | PlainMessage<MsgRecordsDelete> | undefined, b: MsgRecordsDelete | PlainMessage<MsgRecordsDelete> | undefined): boolean {
    return proto3.util.equals(MsgRecordsDelete, a, b);
  }
}

/**
 * MsgRecordsDeleteResponse defines the response for RecordsDelete
 *
 * @generated from message dwn.v1.MsgRecordsDeleteResponse
 */
export class MsgRecordsDeleteResponse extends Message<MsgRecordsDeleteResponse> {
  /**
   * Success flag
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Number of records deleted (including pruned)
   *
   * @generated from field: int32 deleted_count = 2;
   */
  deletedCount = 0;

  constructor(data?: PartialMessage<MsgRecordsDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgRecordsDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "deleted_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecordsDeleteResponse {
    return new MsgRecordsDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecordsDeleteResponse {
    return new MsgRecordsDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecordsDeleteResponse {
    return new MsgRecordsDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecordsDeleteResponse | PlainMessage<MsgRecordsDeleteResponse> | undefined, b: MsgRecordsDeleteResponse | PlainMessage<MsgRecordsDeleteResponse> | undefined): boolean {
    return proto3.util.equals(MsgRecordsDeleteResponse, a, b);
  }
}

/**
 * MsgProtocolsConfigure configures a protocol in the DWN
 *
 * @generated from message dwn.v1.MsgProtocolsConfigure
 */
export class MsgProtocolsConfigure extends Message<MsgProtocolsConfigure> {
  /**
   * Author configuring the protocol (DID or cosmos address)
   *
   * @generated from field: string author = 1;
   */
  author = "";

  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * Message descriptor
   *
   * @generated from field: dwn.v1.DWNMessageDescriptor descriptor = 3;
   */
  descriptor?: DWNMessageDescriptor;

  /**
   * Authorization JWT/signature
   *
   * @generated from field: string authorization = 4;
   */
  authorization = "";

  /**
   * Protocol URI
   *
   * @generated from field: string protocol_uri = 5;
   */
  protocolUri = "";

  /**
   * Protocol definition JSON
   *
   * @generated from field: bytes definition = 6;
   */
  definition = new Uint8Array(0);

  /**
   * Published flag
   *
   * @generated from field: bool published = 7;
   */
  published = false;

  constructor(data?: PartialMessage<MsgProtocolsConfigure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgProtocolsConfigure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "descriptor", kind: "message", T: DWNMessageDescriptor },
    { no: 4, name: "authorization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "protocol_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "definition", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "published", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgProtocolsConfigure {
    return new MsgProtocolsConfigure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgProtocolsConfigure {
    return new MsgProtocolsConfigure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgProtocolsConfigure {
    return new MsgProtocolsConfigure().fromJsonString(jsonString, options);
  }

  static equals(a: MsgProtocolsConfigure | PlainMessage<MsgProtocolsConfigure> | undefined, b: MsgProtocolsConfigure | PlainMessage<MsgProtocolsConfigure> | undefined): boolean {
    return proto3.util.equals(MsgProtocolsConfigure, a, b);
  }
}

/**
 * MsgProtocolsConfigureResponse defines the response for ProtocolsConfigure
 *
 * @generated from message dwn.v1.MsgProtocolsConfigureResponse
 */
export class MsgProtocolsConfigureResponse extends Message<MsgProtocolsConfigureResponse> {
  /**
   * Protocol URI that was configured
   *
   * @generated from field: string protocol_uri = 1;
   */
  protocolUri = "";

  /**
   * Success flag
   *
   * @generated from field: bool success = 2;
   */
  success = false;

  constructor(data?: PartialMessage<MsgProtocolsConfigureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgProtocolsConfigureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgProtocolsConfigureResponse {
    return new MsgProtocolsConfigureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgProtocolsConfigureResponse {
    return new MsgProtocolsConfigureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgProtocolsConfigureResponse {
    return new MsgProtocolsConfigureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgProtocolsConfigureResponse | PlainMessage<MsgProtocolsConfigureResponse> | undefined, b: MsgProtocolsConfigureResponse | PlainMessage<MsgProtocolsConfigureResponse> | undefined): boolean {
    return proto3.util.equals(MsgProtocolsConfigureResponse, a, b);
  }
}

/**
 * MsgPermissionsGrant grants permissions in the DWN
 *
 * @generated from message dwn.v1.MsgPermissionsGrant
 */
export class MsgPermissionsGrant extends Message<MsgPermissionsGrant> {
  /**
   * Grantor of the permission (DID or cosmos address)
   *
   * @generated from field: string grantor = 1;
   */
  grantor = "";

  /**
   * Grantee receiving the permission (DID)
   *
   * @generated from field: string grantee = 2;
   */
  grantee = "";

  /**
   * Target DWN (DID)
   *
   * @generated from field: string target = 3;
   */
  target = "";

  /**
   * Message descriptor
   *
   * @generated from field: dwn.v1.DWNMessageDescriptor descriptor = 4;
   */
  descriptor?: DWNMessageDescriptor;

  /**
   * Authorization JWT/signature
   *
   * @generated from field: string authorization = 5;
   */
  authorization = "";

  /**
   * Interface scope
   *
   * @generated from field: string interface_name = 6;
   */
  interfaceName = "";

  /**
   * Method scope
   *
   * @generated from field: string method = 7;
   */
  method = "";

  /**
   * Optional protocol scope
   *
   * @generated from field: string protocol = 8;
   */
  protocol = "";

  /**
   * Optional record scope
   *
   * @generated from field: string record_id = 9;
   */
  recordId = "";

  /**
   * Permission conditions JSON
   *
   * @generated from field: bytes conditions = 10;
   */
  conditions = new Uint8Array(0);

  /**
   * Expiration timestamp (Unix timestamp)
   *
   * @generated from field: int64 expires_at = 11;
   */
  expiresAt = protoInt64.zero;

  constructor(data?: PartialMessage<MsgPermissionsGrant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgPermissionsGrant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grantor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "descriptor", kind: "message", T: DWNMessageDescriptor },
    { no: 5, name: "authorization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "interface_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "record_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "conditions", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPermissionsGrant {
    return new MsgPermissionsGrant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPermissionsGrant {
    return new MsgPermissionsGrant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPermissionsGrant {
    return new MsgPermissionsGrant().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPermissionsGrant | PlainMessage<MsgPermissionsGrant> | undefined, b: MsgPermissionsGrant | PlainMessage<MsgPermissionsGrant> | undefined): boolean {
    return proto3.util.equals(MsgPermissionsGrant, a, b);
  }
}

/**
 * MsgPermissionsGrantResponse defines the response for PermissionsGrant
 *
 * @generated from message dwn.v1.MsgPermissionsGrantResponse
 */
export class MsgPermissionsGrantResponse extends Message<MsgPermissionsGrantResponse> {
  /**
   * Permission ID of the created grant
   *
   * @generated from field: string permission_id = 1;
   */
  permissionId = "";

  constructor(data?: PartialMessage<MsgPermissionsGrantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgPermissionsGrantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPermissionsGrantResponse {
    return new MsgPermissionsGrantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPermissionsGrantResponse {
    return new MsgPermissionsGrantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPermissionsGrantResponse {
    return new MsgPermissionsGrantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPermissionsGrantResponse | PlainMessage<MsgPermissionsGrantResponse> | undefined, b: MsgPermissionsGrantResponse | PlainMessage<MsgPermissionsGrantResponse> | undefined): boolean {
    return proto3.util.equals(MsgPermissionsGrantResponse, a, b);
  }
}

/**
 * MsgPermissionsRevoke revokes permissions in the DWN
 *
 * @generated from message dwn.v1.MsgPermissionsRevoke
 */
export class MsgPermissionsRevoke extends Message<MsgPermissionsRevoke> {
  /**
   * Grantor revoking the permission (DID or cosmos address)
   *
   * @generated from field: string grantor = 1;
   */
  grantor = "";

  /**
   * Permission ID to revoke
   *
   * @generated from field: string permission_id = 2;
   */
  permissionId = "";

  /**
   * Message descriptor
   *
   * @generated from field: dwn.v1.DWNMessageDescriptor descriptor = 3;
   */
  descriptor?: DWNMessageDescriptor;

  /**
   * Authorization JWT/signature
   *
   * @generated from field: string authorization = 4;
   */
  authorization = "";

  constructor(data?: PartialMessage<MsgPermissionsRevoke>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgPermissionsRevoke";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grantor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "descriptor", kind: "message", T: DWNMessageDescriptor },
    { no: 4, name: "authorization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPermissionsRevoke {
    return new MsgPermissionsRevoke().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPermissionsRevoke {
    return new MsgPermissionsRevoke().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPermissionsRevoke {
    return new MsgPermissionsRevoke().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPermissionsRevoke | PlainMessage<MsgPermissionsRevoke> | undefined, b: MsgPermissionsRevoke | PlainMessage<MsgPermissionsRevoke> | undefined): boolean {
    return proto3.util.equals(MsgPermissionsRevoke, a, b);
  }
}

/**
 * MsgPermissionsRevokeResponse defines the response for PermissionsRevoke
 *
 * @generated from message dwn.v1.MsgPermissionsRevokeResponse
 */
export class MsgPermissionsRevokeResponse extends Message<MsgPermissionsRevokeResponse> {
  /**
   * Success flag
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<MsgPermissionsRevokeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgPermissionsRevokeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPermissionsRevokeResponse {
    return new MsgPermissionsRevokeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPermissionsRevokeResponse {
    return new MsgPermissionsRevokeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPermissionsRevokeResponse {
    return new MsgPermissionsRevokeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPermissionsRevokeResponse | PlainMessage<MsgPermissionsRevokeResponse> | undefined, b: MsgPermissionsRevokeResponse | PlainMessage<MsgPermissionsRevokeResponse> | undefined): boolean {
    return proto3.util.equals(MsgPermissionsRevokeResponse, a, b);
  }
}

/**
 * MsgRotateVaultKeys rotates encryption keys for existing vaults
 *
 * @generated from message dwn.v1.MsgRotateVaultKeys
 */
export class MsgRotateVaultKeys extends Message<MsgRotateVaultKeys> {
  /**
   * Authority performing the rotation (governance or validator)
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Vault ID to rotate keys for (empty means all vaults)
   *
   * @generated from field: string vault_id = 2;
   */
  vaultId = "";

  /**
   * Reason for rotation
   *
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * Force rotation even if not due
   *
   * @generated from field: bool force = 4;
   */
  force = false;

  constructor(data?: PartialMessage<MsgRotateVaultKeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgRotateVaultKeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRotateVaultKeys {
    return new MsgRotateVaultKeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRotateVaultKeys {
    return new MsgRotateVaultKeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRotateVaultKeys {
    return new MsgRotateVaultKeys().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRotateVaultKeys | PlainMessage<MsgRotateVaultKeys> | undefined, b: MsgRotateVaultKeys | PlainMessage<MsgRotateVaultKeys> | undefined): boolean {
    return proto3.util.equals(MsgRotateVaultKeys, a, b);
  }
}

/**
 * MsgRotateVaultKeysResponse defines the response for RotateVaultKeys
 *
 * @generated from message dwn.v1.MsgRotateVaultKeysResponse
 */
export class MsgRotateVaultKeysResponse extends Message<MsgRotateVaultKeysResponse> {
  /**
   * Number of vaults affected
   *
   * @generated from field: uint32 vaults_rotated = 1;
   */
  vaultsRotated = 0;

  /**
   * New key version after rotation
   *
   * @generated from field: uint64 new_key_version = 2;
   */
  newKeyVersion = protoInt64.zero;

  /**
   * Success flag
   *
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<MsgRotateVaultKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.MsgRotateVaultKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vaults_rotated", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "new_key_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRotateVaultKeysResponse {
    return new MsgRotateVaultKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRotateVaultKeysResponse {
    return new MsgRotateVaultKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRotateVaultKeysResponse {
    return new MsgRotateVaultKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRotateVaultKeysResponse | PlainMessage<MsgRotateVaultKeysResponse> | undefined, b: MsgRotateVaultKeysResponse | PlainMessage<MsgRotateVaultKeysResponse> | undefined): boolean {
    return proto3.util.equals(MsgRotateVaultKeysResponse, a, b);
  }
}

