// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file dwn/v1/query.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryCIDRequest, QueryCIDResponse, QueryEncryptedRecordRequest, QueryEncryptedRecordResponse, QueryEncryptionStatusRequest, QueryEncryptionStatusResponse, QueryIPFSRequest, QueryIPFSResponse, QueryParamsRequest, QueryParamsResponse, QueryPermissionsRequest, QueryPermissionsResponse, QueryProtocolRequest, QueryProtocolResponse, QueryProtocolsRequest, QueryProtocolsResponse, QueryRecordRequest, QueryRecordResponse, QueryRecordsRequest, QueryRecordsResponse, QueryVaultRequest, QueryVaultResponse, QueryVaultsRequest, QueryVaultsResponse, QueryVRFContributionsRequest, QueryVRFContributionsResponse } from "./query_pb.js";

const TYPE_NAME = "dwn.v1.Query";

/**
 * Params queries all parameters of the module.
 *
 * @generated from rpc dwn.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * IPFS queries the status of the IPFS node
 *
 * @generated from rpc dwn.v1.Query.IPFS
 */
export const QueryIPFSService = {
  typeName: TYPE_NAME,
  method: "IPFS",
  Request: QueryIPFSRequest,
  Response: QueryIPFSResponse,
} as const;

/**
 * CID returns the data for a given CID
 *
 * @generated from rpc dwn.v1.Query.CID
 */
export const QueryCIDService = {
  typeName: TYPE_NAME,
  method: "CID",
  Request: QueryCIDRequest,
  Response: QueryCIDResponse,
} as const;

/**
 * Records queries DWN records with filters
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "dwn_docs.md"}}
 *
 * @generated from rpc dwn.v1.Query.Records
 */
export const QueryRecordsService = {
  typeName: TYPE_NAME,
  method: "Records",
  Request: QueryRecordsRequest,
  Response: QueryRecordsResponse,
} as const;

/**
 * Record queries a specific DWN record by ID
 *
 * @generated from rpc dwn.v1.Query.Record
 */
export const QueryRecordService = {
  typeName: TYPE_NAME,
  method: "Record",
  Request: QueryRecordRequest,
  Response: QueryRecordResponse,
} as const;

/**
 * Protocols queries DWN protocols
 *
 * @generated from rpc dwn.v1.Query.Protocols
 */
export const QueryProtocolsService = {
  typeName: TYPE_NAME,
  method: "Protocols",
  Request: QueryProtocolsRequest,
  Response: QueryProtocolsResponse,
} as const;

/**
 * Protocol queries a specific DWN protocol
 *
 * @generated from rpc dwn.v1.Query.Protocol
 */
export const QueryProtocolService = {
  typeName: TYPE_NAME,
  method: "Protocol",
  Request: QueryProtocolRequest,
  Response: QueryProtocolResponse,
} as const;

/**
 * Permissions queries DWN permissions
 *
 * @generated from rpc dwn.v1.Query.Permissions
 */
export const QueryPermissionsService = {
  typeName: TYPE_NAME,
  method: "Permissions",
  Request: QueryPermissionsRequest,
  Response: QueryPermissionsResponse,
} as const;

/**
 * Vault queries a specific vault
 *
 * @generated from rpc dwn.v1.Query.Vault
 */
export const QueryVaultService = {
  typeName: TYPE_NAME,
  method: "Vault",
  Request: QueryVaultRequest,
  Response: QueryVaultResponse,
} as const;

/**
 * Vaults queries vaults by owner
 *
 * @generated from rpc dwn.v1.Query.Vaults
 */
export const QueryVaultsService = {
  typeName: TYPE_NAME,
  method: "Vaults",
  Request: QueryVaultsRequest,
  Response: QueryVaultsResponse,
} as const;

/**
 * EncryptedRecord queries a specific encrypted record with automatic decryption
 *
 * @generated from rpc dwn.v1.Query.EncryptedRecord
 */
export const QueryEncryptedRecordService = {
  typeName: TYPE_NAME,
  method: "EncryptedRecord",
  Request: QueryEncryptedRecordRequest,
  Response: QueryEncryptedRecordResponse,
} as const;

/**
 * EncryptionStatus queries current encryption key state and version
 *
 * @generated from rpc dwn.v1.Query.EncryptionStatus
 */
export const QueryEncryptionStatusService = {
  typeName: TYPE_NAME,
  method: "EncryptionStatus",
  Request: QueryEncryptionStatusRequest,
  Response: QueryEncryptionStatusResponse,
} as const;

/**
 * VRFContributions lists VRF contributions for current consensus round
 *
 * @generated from rpc dwn.v1.Query.VRFContributions
 */
export const QueryVRFContributionsService = {
  typeName: TYPE_NAME,
  method: "VRFContributions",
  Request: QueryVRFContributionsRequest,
  Response: QueryVRFContributionsResponse,
} as const;

