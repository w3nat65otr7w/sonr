// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/query.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessConfig, ContractCodeHistoryEntry, ContractInfo, Model, Params } from "./types_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryContractInfoRequest is the request type for the Query/ContractInfo RPC
 * method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractInfoRequest
 */
export class QueryContractInfoRequest extends Message<QueryContractInfoRequest> {
  /**
   * address is the address of the contract to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryContractInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractInfoRequest {
    return new QueryContractInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractInfoRequest {
    return new QueryContractInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractInfoRequest {
    return new QueryContractInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractInfoRequest | PlainMessage<QueryContractInfoRequest> | undefined, b: QueryContractInfoRequest | PlainMessage<QueryContractInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryContractInfoRequest, a, b);
  }
}

/**
 * QueryContractInfoResponse is the response type for the Query/ContractInfo RPC
 * method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractInfoResponse
 */
export class QueryContractInfoResponse extends Message<QueryContractInfoResponse> {
  /**
   * address is the address of the contract
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmwasm.wasm.v1.ContractInfo contract_info = 2;
   */
  contractInfo?: ContractInfo;

  constructor(data?: PartialMessage<QueryContractInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_info", kind: "message", T: ContractInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractInfoResponse {
    return new QueryContractInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractInfoResponse {
    return new QueryContractInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractInfoResponse {
    return new QueryContractInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractInfoResponse | PlainMessage<QueryContractInfoResponse> | undefined, b: QueryContractInfoResponse | PlainMessage<QueryContractInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryContractInfoResponse, a, b);
  }
}

/**
 * QueryContractHistoryRequest is the request type for the Query/ContractHistory
 * RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractHistoryRequest
 */
export class QueryContractHistoryRequest extends Message<QueryContractHistoryRequest> {
  /**
   * address is the address of the contract to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryContractHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractHistoryRequest {
    return new QueryContractHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractHistoryRequest {
    return new QueryContractHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractHistoryRequest {
    return new QueryContractHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractHistoryRequest | PlainMessage<QueryContractHistoryRequest> | undefined, b: QueryContractHistoryRequest | PlainMessage<QueryContractHistoryRequest> | undefined): boolean {
    return proto3.util.equals(QueryContractHistoryRequest, a, b);
  }
}

/**
 * QueryContractHistoryResponse is the response type for the
 * Query/ContractHistory RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractHistoryResponse
 */
export class QueryContractHistoryResponse extends Message<QueryContractHistoryResponse> {
  /**
   * @generated from field: repeated cosmwasm.wasm.v1.ContractCodeHistoryEntry entries = 1;
   */
  entries: ContractCodeHistoryEntry[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryContractHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: ContractCodeHistoryEntry, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractHistoryResponse {
    return new QueryContractHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractHistoryResponse {
    return new QueryContractHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractHistoryResponse {
    return new QueryContractHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractHistoryResponse | PlainMessage<QueryContractHistoryResponse> | undefined, b: QueryContractHistoryResponse | PlainMessage<QueryContractHistoryResponse> | undefined): boolean {
    return proto3.util.equals(QueryContractHistoryResponse, a, b);
  }
}

/**
 * QueryContractsByCodeRequest is the request type for the Query/ContractsByCode
 * RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractsByCodeRequest
 */
export class QueryContractsByCodeRequest extends Message<QueryContractsByCodeRequest> {
  /**
   * grpc-gateway_out does not support Go style CodeID
   *
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryContractsByCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractsByCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractsByCodeRequest {
    return new QueryContractsByCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractsByCodeRequest {
    return new QueryContractsByCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractsByCodeRequest {
    return new QueryContractsByCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractsByCodeRequest | PlainMessage<QueryContractsByCodeRequest> | undefined, b: QueryContractsByCodeRequest | PlainMessage<QueryContractsByCodeRequest> | undefined): boolean {
    return proto3.util.equals(QueryContractsByCodeRequest, a, b);
  }
}

/**
 * QueryContractsByCodeResponse is the response type for the
 * Query/ContractsByCode RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractsByCodeResponse
 */
export class QueryContractsByCodeResponse extends Message<QueryContractsByCodeResponse> {
  /**
   * contracts are a set of contract addresses
   *
   * @generated from field: repeated string contracts = 1;
   */
  contracts: string[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryContractsByCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractsByCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contracts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractsByCodeResponse {
    return new QueryContractsByCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractsByCodeResponse {
    return new QueryContractsByCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractsByCodeResponse {
    return new QueryContractsByCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractsByCodeResponse | PlainMessage<QueryContractsByCodeResponse> | undefined, b: QueryContractsByCodeResponse | PlainMessage<QueryContractsByCodeResponse> | undefined): boolean {
    return proto3.util.equals(QueryContractsByCodeResponse, a, b);
  }
}

/**
 * QueryAllContractStateRequest is the request type for the
 * Query/AllContractState RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryAllContractStateRequest
 */
export class QueryAllContractStateRequest extends Message<QueryAllContractStateRequest> {
  /**
   * address is the address of the contract
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllContractStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryAllContractStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllContractStateRequest {
    return new QueryAllContractStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllContractStateRequest {
    return new QueryAllContractStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllContractStateRequest {
    return new QueryAllContractStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllContractStateRequest | PlainMessage<QueryAllContractStateRequest> | undefined, b: QueryAllContractStateRequest | PlainMessage<QueryAllContractStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllContractStateRequest, a, b);
  }
}

/**
 * QueryAllContractStateResponse is the response type for the
 * Query/AllContractState RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryAllContractStateResponse
 */
export class QueryAllContractStateResponse extends Message<QueryAllContractStateResponse> {
  /**
   * @generated from field: repeated cosmwasm.wasm.v1.Model models = 1;
   */
  models: Model[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllContractStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryAllContractStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "message", T: Model, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllContractStateResponse {
    return new QueryAllContractStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllContractStateResponse {
    return new QueryAllContractStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllContractStateResponse {
    return new QueryAllContractStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllContractStateResponse | PlainMessage<QueryAllContractStateResponse> | undefined, b: QueryAllContractStateResponse | PlainMessage<QueryAllContractStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllContractStateResponse, a, b);
  }
}

/**
 * QueryRawContractStateRequest is the request type for the
 * Query/RawContractState RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryRawContractStateRequest
 */
export class QueryRawContractStateRequest extends Message<QueryRawContractStateRequest> {
  /**
   * address is the address of the contract
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bytes query_data = 2;
   */
  queryData = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryRawContractStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryRawContractStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRawContractStateRequest {
    return new QueryRawContractStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRawContractStateRequest {
    return new QueryRawContractStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRawContractStateRequest {
    return new QueryRawContractStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRawContractStateRequest | PlainMessage<QueryRawContractStateRequest> | undefined, b: QueryRawContractStateRequest | PlainMessage<QueryRawContractStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryRawContractStateRequest, a, b);
  }
}

/**
 * QueryRawContractStateResponse is the response type for the
 * Query/RawContractState RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryRawContractStateResponse
 */
export class QueryRawContractStateResponse extends Message<QueryRawContractStateResponse> {
  /**
   * Data contains the raw store data
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryRawContractStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryRawContractStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRawContractStateResponse {
    return new QueryRawContractStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRawContractStateResponse {
    return new QueryRawContractStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRawContractStateResponse {
    return new QueryRawContractStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRawContractStateResponse | PlainMessage<QueryRawContractStateResponse> | undefined, b: QueryRawContractStateResponse | PlainMessage<QueryRawContractStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryRawContractStateResponse, a, b);
  }
}

/**
 * QuerySmartContractStateRequest is the request type for the
 * Query/SmartContractState RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QuerySmartContractStateRequest
 */
export class QuerySmartContractStateRequest extends Message<QuerySmartContractStateRequest> {
  /**
   * address is the address of the contract
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * QueryData contains the query data passed to the contract
   *
   * @generated from field: bytes query_data = 2;
   */
  queryData = new Uint8Array(0);

  constructor(data?: PartialMessage<QuerySmartContractStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QuerySmartContractStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySmartContractStateRequest {
    return new QuerySmartContractStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySmartContractStateRequest {
    return new QuerySmartContractStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySmartContractStateRequest {
    return new QuerySmartContractStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySmartContractStateRequest | PlainMessage<QuerySmartContractStateRequest> | undefined, b: QuerySmartContractStateRequest | PlainMessage<QuerySmartContractStateRequest> | undefined): boolean {
    return proto3.util.equals(QuerySmartContractStateRequest, a, b);
  }
}

/**
 * QuerySmartContractStateResponse is the response type for the
 * Query/SmartContractState RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QuerySmartContractStateResponse
 */
export class QuerySmartContractStateResponse extends Message<QuerySmartContractStateResponse> {
  /**
   * Data contains the json data returned from the smart contract
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<QuerySmartContractStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QuerySmartContractStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySmartContractStateResponse {
    return new QuerySmartContractStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySmartContractStateResponse {
    return new QuerySmartContractStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySmartContractStateResponse {
    return new QuerySmartContractStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySmartContractStateResponse | PlainMessage<QuerySmartContractStateResponse> | undefined, b: QuerySmartContractStateResponse | PlainMessage<QuerySmartContractStateResponse> | undefined): boolean {
    return proto3.util.equals(QuerySmartContractStateResponse, a, b);
  }
}

/**
 * QueryCodeRequest is the request type for the Query/Code RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryCodeRequest
 */
export class QueryCodeRequest extends Message<QueryCodeRequest> {
  /**
   * grpc-gateway_out does not support Go style CodeID
   *
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCodeRequest {
    return new QueryCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCodeRequest {
    return new QueryCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCodeRequest {
    return new QueryCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCodeRequest | PlainMessage<QueryCodeRequest> | undefined, b: QueryCodeRequest | PlainMessage<QueryCodeRequest> | undefined): boolean {
    return proto3.util.equals(QueryCodeRequest, a, b);
  }
}

/**
 * QueryCodeInfoRequest is the request type for the Query/CodeInfo RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryCodeInfoRequest
 */
export class QueryCodeInfoRequest extends Message<QueryCodeInfoRequest> {
  /**
   * grpc-gateway_out does not support Go style CodeID
   *
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryCodeInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryCodeInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCodeInfoRequest {
    return new QueryCodeInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCodeInfoRequest {
    return new QueryCodeInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCodeInfoRequest {
    return new QueryCodeInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCodeInfoRequest | PlainMessage<QueryCodeInfoRequest> | undefined, b: QueryCodeInfoRequest | PlainMessage<QueryCodeInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryCodeInfoRequest, a, b);
  }
}

/**
 * QueryCodeInfoResponse is the response type for the Query/CodeInfo RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryCodeInfoResponse
 */
export class QueryCodeInfoResponse extends Message<QueryCodeInfoResponse> {
  /**
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: bytes checksum = 3;
   */
  checksum = new Uint8Array(0);

  /**
   * @generated from field: cosmwasm.wasm.v1.AccessConfig instantiate_permission = 4;
   */
  instantiatePermission?: AccessConfig;

  constructor(data?: PartialMessage<QueryCodeInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryCodeInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "checksum", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "instantiate_permission", kind: "message", T: AccessConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCodeInfoResponse {
    return new QueryCodeInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCodeInfoResponse {
    return new QueryCodeInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCodeInfoResponse {
    return new QueryCodeInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCodeInfoResponse | PlainMessage<QueryCodeInfoResponse> | undefined, b: QueryCodeInfoResponse | PlainMessage<QueryCodeInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryCodeInfoResponse, a, b);
  }
}

/**
 * CodeInfoResponse contains code meta data from CodeInfo
 *
 * @generated from message cosmwasm.wasm.v1.CodeInfoResponse
 */
export class CodeInfoResponse extends Message<CodeInfoResponse> {
  /**
   * id for legacy support
   *
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: bytes data_hash = 3;
   */
  dataHash = new Uint8Array(0);

  /**
   * @generated from field: cosmwasm.wasm.v1.AccessConfig instantiate_permission = 6;
   */
  instantiatePermission?: AccessConfig;

  constructor(data?: PartialMessage<CodeInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.CodeInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "instantiate_permission", kind: "message", T: AccessConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeInfoResponse {
    return new CodeInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeInfoResponse {
    return new CodeInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeInfoResponse {
    return new CodeInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CodeInfoResponse | PlainMessage<CodeInfoResponse> | undefined, b: CodeInfoResponse | PlainMessage<CodeInfoResponse> | undefined): boolean {
    return proto3.util.equals(CodeInfoResponse, a, b);
  }
}

/**
 * QueryCodeResponse is the response type for the Query/Code RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryCodeResponse
 */
export class QueryCodeResponse extends Message<QueryCodeResponse> {
  /**
   * @generated from field: cosmwasm.wasm.v1.CodeInfoResponse code_info = 1;
   */
  codeInfo?: CodeInfoResponse;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_info", kind: "message", T: CodeInfoResponse },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCodeResponse {
    return new QueryCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCodeResponse {
    return new QueryCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCodeResponse {
    return new QueryCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCodeResponse | PlainMessage<QueryCodeResponse> | undefined, b: QueryCodeResponse | PlainMessage<QueryCodeResponse> | undefined): boolean {
    return proto3.util.equals(QueryCodeResponse, a, b);
  }
}

/**
 * QueryCodesRequest is the request type for the Query/Codes RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryCodesRequest
 */
export class QueryCodesRequest extends Message<QueryCodesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryCodesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryCodesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCodesRequest {
    return new QueryCodesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCodesRequest {
    return new QueryCodesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCodesRequest {
    return new QueryCodesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCodesRequest | PlainMessage<QueryCodesRequest> | undefined, b: QueryCodesRequest | PlainMessage<QueryCodesRequest> | undefined): boolean {
    return proto3.util.equals(QueryCodesRequest, a, b);
  }
}

/**
 * QueryCodesResponse is the response type for the Query/Codes RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryCodesResponse
 */
export class QueryCodesResponse extends Message<QueryCodesResponse> {
  /**
   * @generated from field: repeated cosmwasm.wasm.v1.CodeInfoResponse code_infos = 1;
   */
  codeInfos: CodeInfoResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryCodesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryCodesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_infos", kind: "message", T: CodeInfoResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCodesResponse {
    return new QueryCodesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCodesResponse {
    return new QueryCodesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCodesResponse {
    return new QueryCodesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCodesResponse | PlainMessage<QueryCodesResponse> | undefined, b: QueryCodesResponse | PlainMessage<QueryCodesResponse> | undefined): boolean {
    return proto3.util.equals(QueryCodesResponse, a, b);
  }
}

/**
 * QueryPinnedCodesRequest is the request type for the Query/PinnedCodes
 * RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryPinnedCodesRequest
 */
export class QueryPinnedCodesRequest extends Message<QueryPinnedCodesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPinnedCodesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryPinnedCodesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPinnedCodesRequest {
    return new QueryPinnedCodesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPinnedCodesRequest {
    return new QueryPinnedCodesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPinnedCodesRequest {
    return new QueryPinnedCodesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPinnedCodesRequest | PlainMessage<QueryPinnedCodesRequest> | undefined, b: QueryPinnedCodesRequest | PlainMessage<QueryPinnedCodesRequest> | undefined): boolean {
    return proto3.util.equals(QueryPinnedCodesRequest, a, b);
  }
}

/**
 * QueryPinnedCodesResponse is the response type for the
 * Query/PinnedCodes RPC method
 *
 * @generated from message cosmwasm.wasm.v1.QueryPinnedCodesResponse
 */
export class QueryPinnedCodesResponse extends Message<QueryPinnedCodesResponse> {
  /**
   * @generated from field: repeated uint64 code_ids = 1;
   */
  codeIds: bigint[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPinnedCodesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryPinnedCodesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPinnedCodesResponse {
    return new QueryPinnedCodesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPinnedCodesResponse {
    return new QueryPinnedCodesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPinnedCodesResponse {
    return new QueryPinnedCodesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPinnedCodesResponse | PlainMessage<QueryPinnedCodesResponse> | undefined, b: QueryPinnedCodesResponse | PlainMessage<QueryPinnedCodesResponse> | undefined): boolean {
    return proto3.util.equals(QueryPinnedCodesResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: cosmwasm.wasm.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryContractsByCreatorRequest is the request type for the
 * Query/ContractsByCreator RPC method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractsByCreatorRequest
 */
export class QueryContractsByCreatorRequest extends Message<QueryContractsByCreatorRequest> {
  /**
   * CreatorAddress is the address of contract creator
   *
   * @generated from field: string creator_address = 1;
   */
  creatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryContractsByCreatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractsByCreatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractsByCreatorRequest {
    return new QueryContractsByCreatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractsByCreatorRequest {
    return new QueryContractsByCreatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractsByCreatorRequest {
    return new QueryContractsByCreatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractsByCreatorRequest | PlainMessage<QueryContractsByCreatorRequest> | undefined, b: QueryContractsByCreatorRequest | PlainMessage<QueryContractsByCreatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryContractsByCreatorRequest, a, b);
  }
}

/**
 * QueryContractsByCreatorResponse is the response type for the
 * Query/ContractsByCreator RPC method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractsByCreatorResponse
 */
export class QueryContractsByCreatorResponse extends Message<QueryContractsByCreatorResponse> {
  /**
   * ContractAddresses result set
   *
   * @generated from field: repeated string contract_addresses = 1;
   */
  contractAddresses: string[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryContractsByCreatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractsByCreatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractsByCreatorResponse {
    return new QueryContractsByCreatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractsByCreatorResponse {
    return new QueryContractsByCreatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractsByCreatorResponse {
    return new QueryContractsByCreatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractsByCreatorResponse | PlainMessage<QueryContractsByCreatorResponse> | undefined, b: QueryContractsByCreatorResponse | PlainMessage<QueryContractsByCreatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryContractsByCreatorResponse, a, b);
  }
}

/**
 * QueryWasmLimitsConfigRequest is the request type for the
 * Query/WasmLimitsConfig RPC method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryWasmLimitsConfigRequest
 */
export class QueryWasmLimitsConfigRequest extends Message<QueryWasmLimitsConfigRequest> {
  constructor(data?: PartialMessage<QueryWasmLimitsConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryWasmLimitsConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWasmLimitsConfigRequest {
    return new QueryWasmLimitsConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWasmLimitsConfigRequest {
    return new QueryWasmLimitsConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWasmLimitsConfigRequest {
    return new QueryWasmLimitsConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWasmLimitsConfigRequest | PlainMessage<QueryWasmLimitsConfigRequest> | undefined, b: QueryWasmLimitsConfigRequest | PlainMessage<QueryWasmLimitsConfigRequest> | undefined): boolean {
    return proto3.util.equals(QueryWasmLimitsConfigRequest, a, b);
  }
}

/**
 * QueryWasmLimitsConfigResponse is the response type for the
 * Query/WasmLimitsConfig RPC method. It contains the JSON encoded limits for
 * static validation of Wasm files.
 *
 * @generated from message cosmwasm.wasm.v1.QueryWasmLimitsConfigResponse
 */
export class QueryWasmLimitsConfigResponse extends Message<QueryWasmLimitsConfigResponse> {
  /**
   * @generated from field: string config = 1;
   */
  config = "";

  constructor(data?: PartialMessage<QueryWasmLimitsConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryWasmLimitsConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWasmLimitsConfigResponse {
    return new QueryWasmLimitsConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWasmLimitsConfigResponse {
    return new QueryWasmLimitsConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWasmLimitsConfigResponse {
    return new QueryWasmLimitsConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWasmLimitsConfigResponse | PlainMessage<QueryWasmLimitsConfigResponse> | undefined, b: QueryWasmLimitsConfigResponse | PlainMessage<QueryWasmLimitsConfigResponse> | undefined): boolean {
    return proto3.util.equals(QueryWasmLimitsConfigResponse, a, b);
  }
}

/**
 * QueryBuildAddressRequest is the request type for the Query/BuildAddress RPC
 * method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryBuildAddressRequest
 */
export class QueryBuildAddressRequest extends Message<QueryBuildAddressRequest> {
  /**
   * CodeHash is the hash of the code
   *
   * @generated from field: string code_hash = 1;
   */
  codeHash = "";

  /**
   * CreatorAddress is the address of the contract instantiator
   *
   * @generated from field: string creator_address = 2;
   */
  creatorAddress = "";

  /**
   * Salt is a hex encoded salt
   *
   * @generated from field: string salt = 3;
   */
  salt = "";

  /**
   * InitArgs are optional json encoded init args to be used in contract address
   * building if provided
   *
   * @generated from field: bytes init_args = 4;
   */
  initArgs = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryBuildAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryBuildAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "salt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "init_args", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBuildAddressRequest {
    return new QueryBuildAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBuildAddressRequest {
    return new QueryBuildAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBuildAddressRequest {
    return new QueryBuildAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBuildAddressRequest | PlainMessage<QueryBuildAddressRequest> | undefined, b: QueryBuildAddressRequest | PlainMessage<QueryBuildAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryBuildAddressRequest, a, b);
  }
}

/**
 * QueryBuildAddressResponse is the response type for the Query/BuildAddress RPC
 * method.
 *
 * @generated from message cosmwasm.wasm.v1.QueryBuildAddressResponse
 */
export class QueryBuildAddressResponse extends Message<QueryBuildAddressResponse> {
  /**
   * Address is the contract address
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryBuildAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryBuildAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBuildAddressResponse {
    return new QueryBuildAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBuildAddressResponse {
    return new QueryBuildAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBuildAddressResponse {
    return new QueryBuildAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBuildAddressResponse | PlainMessage<QueryBuildAddressResponse> | undefined, b: QueryBuildAddressResponse | PlainMessage<QueryBuildAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryBuildAddressResponse, a, b);
  }
}

