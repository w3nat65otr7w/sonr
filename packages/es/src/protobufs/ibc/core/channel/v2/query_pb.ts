// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/channel/v2/query.proto (package ibc.core.channel.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Height } from "../../client/v1/client_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { PacketState } from "./genesis_pb.js";

/**
 * QueryNextSequenceSendRequest is the request type for the Query/QueryNextSequenceSend RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryNextSequenceSendRequest
 */
export class QueryNextSequenceSendRequest extends Message<QueryNextSequenceSendRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  constructor(data?: PartialMessage<QueryNextSequenceSendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryNextSequenceSendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextSequenceSendRequest {
    return new QueryNextSequenceSendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextSequenceSendRequest {
    return new QueryNextSequenceSendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextSequenceSendRequest {
    return new QueryNextSequenceSendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextSequenceSendRequest | PlainMessage<QueryNextSequenceSendRequest> | undefined, b: QueryNextSequenceSendRequest | PlainMessage<QueryNextSequenceSendRequest> | undefined): boolean {
    return proto3.util.equals(QueryNextSequenceSendRequest, a, b);
  }
}

/**
 * QueryNextSequenceSendResponse is the response type for the Query/QueryNextSequenceSend RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryNextSequenceSendResponse
 */
export class QueryNextSequenceSendResponse extends Message<QueryNextSequenceSendResponse> {
  /**
   * next sequence send number
   *
   * @generated from field: uint64 next_sequence_send = 1;
   */
  nextSequenceSend = protoInt64.zero;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryNextSequenceSendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryNextSequenceSendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_sequence_send", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextSequenceSendResponse {
    return new QueryNextSequenceSendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextSequenceSendResponse {
    return new QueryNextSequenceSendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextSequenceSendResponse {
    return new QueryNextSequenceSendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextSequenceSendResponse | PlainMessage<QueryNextSequenceSendResponse> | undefined, b: QueryNextSequenceSendResponse | PlainMessage<QueryNextSequenceSendResponse> | undefined): boolean {
    return proto3.util.equals(QueryNextSequenceSendResponse, a, b);
  }
}

/**
 * QueryPacketCommitmentRequest is the request type for the Query/PacketCommitment RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketCommitmentRequest
 */
export class QueryPacketCommitmentRequest extends Message<QueryPacketCommitmentRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * packet sequence
   *
   * @generated from field: uint64 sequence = 2;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPacketCommitmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketCommitmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentRequest {
    return new QueryPacketCommitmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentRequest {
    return new QueryPacketCommitmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentRequest {
    return new QueryPacketCommitmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentRequest | PlainMessage<QueryPacketCommitmentRequest> | undefined, b: QueryPacketCommitmentRequest | PlainMessage<QueryPacketCommitmentRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentRequest, a, b);
  }
}

/**
 * QueryPacketCommitmentResponse is the response type for the Query/PacketCommitment RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketCommitmentResponse
 */
export class QueryPacketCommitmentResponse extends Message<QueryPacketCommitmentResponse> {
  /**
   * packet associated with the request fields
   *
   * @generated from field: bytes commitment = 1;
   */
  commitment = new Uint8Array(0);

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryPacketCommitmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketCommitmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentResponse {
    return new QueryPacketCommitmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentResponse {
    return new QueryPacketCommitmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentResponse {
    return new QueryPacketCommitmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentResponse | PlainMessage<QueryPacketCommitmentResponse> | undefined, b: QueryPacketCommitmentResponse | PlainMessage<QueryPacketCommitmentResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentResponse, a, b);
  }
}

/**
 * QueryPacketCommitmentsRequest is the request type for the Query/PacketCommitments RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketCommitmentsRequest
 */
export class QueryPacketCommitmentsRequest extends Message<QueryPacketCommitmentsRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * pagination request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPacketCommitmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketCommitmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentsRequest {
    return new QueryPacketCommitmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsRequest {
    return new QueryPacketCommitmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsRequest {
    return new QueryPacketCommitmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentsRequest | PlainMessage<QueryPacketCommitmentsRequest> | undefined, b: QueryPacketCommitmentsRequest | PlainMessage<QueryPacketCommitmentsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentsRequest, a, b);
  }
}

/**
 * QueryPacketCommitmentResponse is the response type for the Query/PacketCommitment RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketCommitmentsResponse
 */
export class QueryPacketCommitmentsResponse extends Message<QueryPacketCommitmentsResponse> {
  /**
   * collection of packet commitments for the requested channel identifier.
   *
   * @generated from field: repeated ibc.core.channel.v2.PacketState commitments = 1;
   */
  commitments: PacketState[] = [];

  /**
   * pagination response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height.
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryPacketCommitmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketCommitmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitments", kind: "message", T: PacketState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentsResponse {
    return new QueryPacketCommitmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsResponse {
    return new QueryPacketCommitmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsResponse {
    return new QueryPacketCommitmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentsResponse | PlainMessage<QueryPacketCommitmentsResponse> | undefined, b: QueryPacketCommitmentsResponse | PlainMessage<QueryPacketCommitmentsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentsResponse, a, b);
  }
}

/**
 * QueryPacketAcknowledgementRequest is the request type for the Query/PacketAcknowledgement RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketAcknowledgementRequest
 */
export class QueryPacketAcknowledgementRequest extends Message<QueryPacketAcknowledgementRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * packet sequence
   *
   * @generated from field: uint64 sequence = 2;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPacketAcknowledgementRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketAcknowledgementRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementRequest {
    return new QueryPacketAcknowledgementRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementRequest {
    return new QueryPacketAcknowledgementRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementRequest {
    return new QueryPacketAcknowledgementRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementRequest | PlainMessage<QueryPacketAcknowledgementRequest> | undefined, b: QueryPacketAcknowledgementRequest | PlainMessage<QueryPacketAcknowledgementRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementRequest, a, b);
  }
}

/**
 * QueryPacketAcknowledgementResponse is the response type for the Query/PacketAcknowledgement RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketAcknowledgementResponse
 */
export class QueryPacketAcknowledgementResponse extends Message<QueryPacketAcknowledgementResponse> {
  /**
   * acknowledgement associated with the request fields
   *
   * @generated from field: bytes acknowledgement = 1;
   */
  acknowledgement = new Uint8Array(0);

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryPacketAcknowledgementResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketAcknowledgementResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "acknowledgement", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementResponse {
    return new QueryPacketAcknowledgementResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementResponse {
    return new QueryPacketAcknowledgementResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementResponse {
    return new QueryPacketAcknowledgementResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementResponse | PlainMessage<QueryPacketAcknowledgementResponse> | undefined, b: QueryPacketAcknowledgementResponse | PlainMessage<QueryPacketAcknowledgementResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementResponse, a, b);
  }
}

/**
 * QueryPacketAcknowledgementsRequest is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryPacketAcknowledgementsRequest
 */
export class QueryPacketAcknowledgementsRequest extends Message<QueryPacketAcknowledgementsRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * pagination request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  /**
   * list of packet sequences
   *
   * @generated from field: repeated uint64 packet_commitment_sequences = 3;
   */
  packetCommitmentSequences: bigint[] = [];

  constructor(data?: PartialMessage<QueryPacketAcknowledgementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketAcknowledgementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
    { no: 3, name: "packet_commitment_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementsRequest {
    return new QueryPacketAcknowledgementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsRequest {
    return new QueryPacketAcknowledgementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsRequest {
    return new QueryPacketAcknowledgementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementsRequest | PlainMessage<QueryPacketAcknowledgementsRequest> | undefined, b: QueryPacketAcknowledgementsRequest | PlainMessage<QueryPacketAcknowledgementsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementsRequest, a, b);
  }
}

/**
 * QueryPacketAcknowledgemetsResponse is the request type for the
 * Query/QueryPacketAcknowledgements RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryPacketAcknowledgementsResponse
 */
export class QueryPacketAcknowledgementsResponse extends Message<QueryPacketAcknowledgementsResponse> {
  /**
   * @generated from field: repeated ibc.core.channel.v2.PacketState acknowledgements = 1;
   */
  acknowledgements: PacketState[] = [];

  /**
   * pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryPacketAcknowledgementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketAcknowledgementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "acknowledgements", kind: "message", T: PacketState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementsResponse {
    return new QueryPacketAcknowledgementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsResponse {
    return new QueryPacketAcknowledgementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsResponse {
    return new QueryPacketAcknowledgementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementsResponse | PlainMessage<QueryPacketAcknowledgementsResponse> | undefined, b: QueryPacketAcknowledgementsResponse | PlainMessage<QueryPacketAcknowledgementsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementsResponse, a, b);
  }
}

/**
 * QueryPacketReceiptRequest is the request type for the Query/PacketReceipt RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketReceiptRequest
 */
export class QueryPacketReceiptRequest extends Message<QueryPacketReceiptRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * packet sequence
   *
   * @generated from field: uint64 sequence = 2;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPacketReceiptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketReceiptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketReceiptRequest {
    return new QueryPacketReceiptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketReceiptRequest {
    return new QueryPacketReceiptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketReceiptRequest {
    return new QueryPacketReceiptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketReceiptRequest | PlainMessage<QueryPacketReceiptRequest> | undefined, b: QueryPacketReceiptRequest | PlainMessage<QueryPacketReceiptRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketReceiptRequest, a, b);
  }
}

/**
 * QueryPacketReceiptResponse is the response type for the Query/PacketReceipt RPC method.
 *
 * @generated from message ibc.core.channel.v2.QueryPacketReceiptResponse
 */
export class QueryPacketReceiptResponse extends Message<QueryPacketReceiptResponse> {
  /**
   * success flag for if receipt exists
   *
   * @generated from field: bool received = 2;
   */
  received = false;

  /**
   * merkle proof of existence or absence
   *
   * @generated from field: bytes proof = 3;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryPacketReceiptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryPacketReceiptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "received", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketReceiptResponse {
    return new QueryPacketReceiptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketReceiptResponse {
    return new QueryPacketReceiptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketReceiptResponse {
    return new QueryPacketReceiptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketReceiptResponse | PlainMessage<QueryPacketReceiptResponse> | undefined, b: QueryPacketReceiptResponse | PlainMessage<QueryPacketReceiptResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketReceiptResponse, a, b);
  }
}

/**
 * QueryUnreceivedPacketsRequest is the request type for the Query/UnreceivedPackets RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryUnreceivedPacketsRequest
 */
export class QueryUnreceivedPacketsRequest extends Message<QueryUnreceivedPacketsRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * list of packet sequences
   *
   * @generated from field: repeated uint64 sequences = 2;
   */
  sequences: bigint[] = [];

  constructor(data?: PartialMessage<QueryUnreceivedPacketsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryUnreceivedPacketsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedPacketsRequest {
    return new QueryUnreceivedPacketsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsRequest {
    return new QueryUnreceivedPacketsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsRequest {
    return new QueryUnreceivedPacketsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedPacketsRequest | PlainMessage<QueryUnreceivedPacketsRequest> | undefined, b: QueryUnreceivedPacketsRequest | PlainMessage<QueryUnreceivedPacketsRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedPacketsRequest, a, b);
  }
}

/**
 * QueryUnreceivedPacketsResponse is the response type for the Query/UnreceivedPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryUnreceivedPacketsResponse
 */
export class QueryUnreceivedPacketsResponse extends Message<QueryUnreceivedPacketsResponse> {
  /**
   * list of unreceived packet sequences
   *
   * @generated from field: repeated uint64 sequences = 1;
   */
  sequences: bigint[] = [];

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 2;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryUnreceivedPacketsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryUnreceivedPacketsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedPacketsResponse {
    return new QueryUnreceivedPacketsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsResponse {
    return new QueryUnreceivedPacketsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsResponse {
    return new QueryUnreceivedPacketsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedPacketsResponse | PlainMessage<QueryUnreceivedPacketsResponse> | undefined, b: QueryUnreceivedPacketsResponse | PlainMessage<QueryUnreceivedPacketsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedPacketsResponse, a, b);
  }
}

/**
 * QueryUnreceivedAcks is the request type for the
 * Query/UnreceivedAcks RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryUnreceivedAcksRequest
 */
export class QueryUnreceivedAcksRequest extends Message<QueryUnreceivedAcksRequest> {
  /**
   * client unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * list of acknowledgement sequences
   *
   * @generated from field: repeated uint64 packet_ack_sequences = 2;
   */
  packetAckSequences: bigint[] = [];

  constructor(data?: PartialMessage<QueryUnreceivedAcksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryUnreceivedAcksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "packet_ack_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedAcksRequest {
    return new QueryUnreceivedAcksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksRequest {
    return new QueryUnreceivedAcksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksRequest {
    return new QueryUnreceivedAcksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedAcksRequest | PlainMessage<QueryUnreceivedAcksRequest> | undefined, b: QueryUnreceivedAcksRequest | PlainMessage<QueryUnreceivedAcksRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedAcksRequest, a, b);
  }
}

/**
 * QueryUnreceivedAcksResponse is the response type for the
 * Query/UnreceivedAcks RPC method
 *
 * @generated from message ibc.core.channel.v2.QueryUnreceivedAcksResponse
 */
export class QueryUnreceivedAcksResponse extends Message<QueryUnreceivedAcksResponse> {
  /**
   * list of unreceived acknowledgement sequences
   *
   * @generated from field: repeated uint64 sequences = 1;
   */
  sequences: bigint[] = [];

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 2;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryUnreceivedAcksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.QueryUnreceivedAcksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedAcksResponse {
    return new QueryUnreceivedAcksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksResponse {
    return new QueryUnreceivedAcksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksResponse {
    return new QueryUnreceivedAcksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedAcksResponse | PlainMessage<QueryUnreceivedAcksResponse> | undefined, b: QueryUnreceivedAcksResponse | PlainMessage<QueryUnreceivedAcksResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedAcksResponse, a, b);
  }
}

