// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file ibc/core/channel/v2/query.proto (package ibc.core.channel.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryNextSequenceSendRequest, QueryNextSequenceSendResponse, QueryPacketAcknowledgementRequest, QueryPacketAcknowledgementResponse, QueryPacketAcknowledgementsRequest, QueryPacketAcknowledgementsResponse, QueryPacketCommitmentRequest, QueryPacketCommitmentResponse, QueryPacketCommitmentsRequest, QueryPacketCommitmentsResponse, QueryPacketReceiptRequest, QueryPacketReceiptResponse, QueryUnreceivedAcksRequest, QueryUnreceivedAcksResponse, QueryUnreceivedPacketsRequest, QueryUnreceivedPacketsResponse } from "./query_pb.js";

const TYPE_NAME = "ibc.core.channel.v2.Query";

/**
 * NextSequenceSend returns the next send sequence for a given channel.
 *
 * @generated from rpc ibc.core.channel.v2.Query.NextSequenceSend
 */
export const QueryNextSequenceSendService = {
  typeName: TYPE_NAME,
  method: "NextSequenceSend",
  Request: QueryNextSequenceSendRequest,
  Response: QueryNextSequenceSendResponse,
} as const;

/**
 * PacketCommitment queries a stored packet commitment hash.
 *
 * @generated from rpc ibc.core.channel.v2.Query.PacketCommitment
 */
export const QueryPacketCommitmentService = {
  typeName: TYPE_NAME,
  method: "PacketCommitment",
  Request: QueryPacketCommitmentRequest,
  Response: QueryPacketCommitmentResponse,
} as const;

/**
 * PacketCommitments queries a stored packet commitment hash.
 *
 * @generated from rpc ibc.core.channel.v2.Query.PacketCommitments
 */
export const QueryPacketCommitmentsService = {
  typeName: TYPE_NAME,
  method: "PacketCommitments",
  Request: QueryPacketCommitmentsRequest,
  Response: QueryPacketCommitmentsResponse,
} as const;

/**
 * PacketAcknowledgement queries a stored acknowledgement commitment hash.
 *
 * @generated from rpc ibc.core.channel.v2.Query.PacketAcknowledgement
 */
export const QueryPacketAcknowledgementService = {
  typeName: TYPE_NAME,
  method: "PacketAcknowledgement",
  Request: QueryPacketAcknowledgementRequest,
  Response: QueryPacketAcknowledgementResponse,
} as const;

/**
 * PacketAcknowledgements returns all packet acknowledgements associated with a channel.
 *
 * @generated from rpc ibc.core.channel.v2.Query.PacketAcknowledgements
 */
export const QueryPacketAcknowledgementsService = {
  typeName: TYPE_NAME,
  method: "PacketAcknowledgements",
  Request: QueryPacketAcknowledgementsRequest,
  Response: QueryPacketAcknowledgementsResponse,
} as const;

/**
 * PacketReceipt queries a stored packet receipt.
 *
 * @generated from rpc ibc.core.channel.v2.Query.PacketReceipt
 */
export const QueryPacketReceiptService = {
  typeName: TYPE_NAME,
  method: "PacketReceipt",
  Request: QueryPacketReceiptRequest,
  Response: QueryPacketReceiptResponse,
} as const;

/**
 * UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
 *
 * @generated from rpc ibc.core.channel.v2.Query.UnreceivedPackets
 */
export const QueryUnreceivedPacketsService = {
  typeName: TYPE_NAME,
  method: "UnreceivedPackets",
  Request: QueryUnreceivedPacketsRequest,
  Response: QueryUnreceivedPacketsResponse,
} as const;

/**
 * UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
 *
 * @generated from rpc ibc.core.channel.v2.Query.UnreceivedAcks
 */
export const QueryUnreceivedAcksService = {
  typeName: TYPE_NAME,
  method: "UnreceivedAcks",
  Request: QueryUnreceivedAcksRequest,
  Response: QueryUnreceivedAcksResponse,
} as const;

