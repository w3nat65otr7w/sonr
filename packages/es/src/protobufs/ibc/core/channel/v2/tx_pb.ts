// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/channel/v2/tx.proto (package ibc.core.channel.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Acknowledgement, Packet, Payload } from "./packet_pb.js";
import { Height } from "../../client/v1/client_pb.js";

/**
 * ResponseResultType defines the possible outcomes of the execution of a message
 *
 * @generated from enum ibc.core.channel.v2.ResponseResultType
 */
export enum ResponseResultType {
  /**
   * Default zero value enumeration
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_NOOP = 1;
   */
  NOOP = 1,

  /**
   * The message was executed successfully
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * The message was executed unsuccessfully
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_FAILURE = 3;
   */
  FAILURE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseResultType)
proto3.util.setEnumType(ResponseResultType, "ibc.core.channel.v2.ResponseResultType", [
  { no: 0, name: "RESPONSE_RESULT_TYPE_UNSPECIFIED" },
  { no: 1, name: "RESPONSE_RESULT_TYPE_NOOP" },
  { no: 2, name: "RESPONSE_RESULT_TYPE_SUCCESS" },
  { no: 3, name: "RESPONSE_RESULT_TYPE_FAILURE" },
]);

/**
 * MsgSendPacket sends an outgoing IBC packet.
 *
 * @generated from message ibc.core.channel.v2.MsgSendPacket
 */
export class MsgSendPacket extends Message<MsgSendPacket> {
  /**
   * @generated from field: string source_client = 1;
   */
  sourceClient = "";

  /**
   * @generated from field: uint64 timeout_timestamp = 2;
   */
  timeoutTimestamp = protoInt64.zero;

  /**
   * @generated from field: repeated ibc.core.channel.v2.Payload payloads = 3;
   */
  payloads: Payload[] = [];

  /**
   * @generated from field: string signer = 4;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgSendPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgSendPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_client", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeout_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "payloads", kind: "message", T: Payload, repeated: true },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendPacket {
    return new MsgSendPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendPacket {
    return new MsgSendPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendPacket {
    return new MsgSendPacket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendPacket | PlainMessage<MsgSendPacket> | undefined, b: MsgSendPacket | PlainMessage<MsgSendPacket> | undefined): boolean {
    return proto3.util.equals(MsgSendPacket, a, b);
  }
}

/**
 * MsgSendPacketResponse defines the Msg/SendPacket response type.
 *
 * @generated from message ibc.core.channel.v2.MsgSendPacketResponse
 */
export class MsgSendPacketResponse extends Message<MsgSendPacketResponse> {
  /**
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSendPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgSendPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendPacketResponse {
    return new MsgSendPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendPacketResponse {
    return new MsgSendPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendPacketResponse {
    return new MsgSendPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendPacketResponse | PlainMessage<MsgSendPacketResponse> | undefined, b: MsgSendPacketResponse | PlainMessage<MsgSendPacketResponse> | undefined): boolean {
    return proto3.util.equals(MsgSendPacketResponse, a, b);
  }
}

/**
 * MsgRecvPacket receives an incoming IBC packet.
 *
 * @generated from message ibc.core.channel.v2.MsgRecvPacket
 */
export class MsgRecvPacket extends Message<MsgRecvPacket> {
  /**
   * @generated from field: ibc.core.channel.v2.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: bytes proof_commitment = 2;
   */
  proofCommitment = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 4;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgRecvPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgRecvPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecvPacket {
    return new MsgRecvPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecvPacket {
    return new MsgRecvPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecvPacket {
    return new MsgRecvPacket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecvPacket | PlainMessage<MsgRecvPacket> | undefined, b: MsgRecvPacket | PlainMessage<MsgRecvPacket> | undefined): boolean {
    return proto3.util.equals(MsgRecvPacket, a, b);
  }
}

/**
 * MsgRecvPacketResponse defines the Msg/RecvPacket response type.
 *
 * @generated from message ibc.core.channel.v2.MsgRecvPacketResponse
 */
export class MsgRecvPacketResponse extends Message<MsgRecvPacketResponse> {
  /**
   * @generated from field: ibc.core.channel.v2.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgRecvPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgRecvPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecvPacketResponse {
    return new MsgRecvPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecvPacketResponse {
    return new MsgRecvPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecvPacketResponse {
    return new MsgRecvPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecvPacketResponse | PlainMessage<MsgRecvPacketResponse> | undefined, b: MsgRecvPacketResponse | PlainMessage<MsgRecvPacketResponse> | undefined): boolean {
    return proto3.util.equals(MsgRecvPacketResponse, a, b);
  }
}

/**
 * MsgTimeout receives timed-out packet
 *
 * @generated from message ibc.core.channel.v2.MsgTimeout
 */
export class MsgTimeout extends Message<MsgTimeout> {
  /**
   * @generated from field: ibc.core.channel.v2.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: bytes proof_unreceived = 2;
   */
  proofUnreceived = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 5;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgTimeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgTimeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTimeout {
    return new MsgTimeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTimeout {
    return new MsgTimeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTimeout {
    return new MsgTimeout().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTimeout | PlainMessage<MsgTimeout> | undefined, b: MsgTimeout | PlainMessage<MsgTimeout> | undefined): boolean {
    return proto3.util.equals(MsgTimeout, a, b);
  }
}

/**
 * MsgTimeoutResponse defines the Msg/Timeout response type.
 *
 * @generated from message ibc.core.channel.v2.MsgTimeoutResponse
 */
export class MsgTimeoutResponse extends Message<MsgTimeoutResponse> {
  /**
   * @generated from field: ibc.core.channel.v2.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgTimeoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgTimeoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTimeoutResponse {
    return new MsgTimeoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTimeoutResponse {
    return new MsgTimeoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTimeoutResponse {
    return new MsgTimeoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTimeoutResponse | PlainMessage<MsgTimeoutResponse> | undefined, b: MsgTimeoutResponse | PlainMessage<MsgTimeoutResponse> | undefined): boolean {
    return proto3.util.equals(MsgTimeoutResponse, a, b);
  }
}

/**
 * MsgAcknowledgement receives incoming IBC acknowledgement.
 *
 * @generated from message ibc.core.channel.v2.MsgAcknowledgement
 */
export class MsgAcknowledgement extends Message<MsgAcknowledgement> {
  /**
   * @generated from field: ibc.core.channel.v2.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: ibc.core.channel.v2.Acknowledgement acknowledgement = 2;
   */
  acknowledgement?: Acknowledgement;

  /**
   * @generated from field: bytes proof_acked = 3;
   */
  proofAcked = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 5;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgAcknowledgement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgAcknowledgement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "acknowledgement", kind: "message", T: Acknowledgement },
    { no: 3, name: "proof_acked", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAcknowledgement {
    return new MsgAcknowledgement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAcknowledgement {
    return new MsgAcknowledgement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAcknowledgement {
    return new MsgAcknowledgement().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAcknowledgement | PlainMessage<MsgAcknowledgement> | undefined, b: MsgAcknowledgement | PlainMessage<MsgAcknowledgement> | undefined): boolean {
    return proto3.util.equals(MsgAcknowledgement, a, b);
  }
}

/**
 * MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
 *
 * @generated from message ibc.core.channel.v2.MsgAcknowledgementResponse
 */
export class MsgAcknowledgementResponse extends Message<MsgAcknowledgementResponse> {
  /**
   * @generated from field: ibc.core.channel.v2.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgAcknowledgementResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v2.MsgAcknowledgementResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAcknowledgementResponse {
    return new MsgAcknowledgementResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAcknowledgementResponse {
    return new MsgAcknowledgementResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAcknowledgementResponse {
    return new MsgAcknowledgementResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAcknowledgementResponse | PlainMessage<MsgAcknowledgementResponse> | undefined, b: MsgAcknowledgementResponse | PlainMessage<MsgAcknowledgementResponse> | undefined): boolean {
    return proto3.util.equals(MsgAcknowledgementResponse, a, b);
  }
}

