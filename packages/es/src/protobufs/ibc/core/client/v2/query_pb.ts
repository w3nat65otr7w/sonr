// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/client/v2/query.proto (package ibc.core.client.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CounterpartyInfo } from "./counterparty_pb.js";
import { Config } from "./config_pb.js";

/**
 * QueryCounterpartyInfoRequest is the request type for the Query/CounterpartyInfo RPC
 * method
 *
 * @generated from message ibc.core.client.v2.QueryCounterpartyInfoRequest
 */
export class QueryCounterpartyInfoRequest extends Message<QueryCounterpartyInfoRequest> {
  /**
   * client state unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  constructor(data?: PartialMessage<QueryCounterpartyInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.QueryCounterpartyInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCounterpartyInfoRequest {
    return new QueryCounterpartyInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCounterpartyInfoRequest {
    return new QueryCounterpartyInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCounterpartyInfoRequest {
    return new QueryCounterpartyInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCounterpartyInfoRequest | PlainMessage<QueryCounterpartyInfoRequest> | undefined, b: QueryCounterpartyInfoRequest | PlainMessage<QueryCounterpartyInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryCounterpartyInfoRequest, a, b);
  }
}

/**
 * QueryCounterpartyInfoResponse is the response type for the
 * Query/CounterpartyInfo RPC method.
 *
 * @generated from message ibc.core.client.v2.QueryCounterpartyInfoResponse
 */
export class QueryCounterpartyInfoResponse extends Message<QueryCounterpartyInfoResponse> {
  /**
   * @generated from field: ibc.core.client.v2.CounterpartyInfo counterparty_info = 1;
   */
  counterpartyInfo?: CounterpartyInfo;

  constructor(data?: PartialMessage<QueryCounterpartyInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.QueryCounterpartyInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "counterparty_info", kind: "message", T: CounterpartyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCounterpartyInfoResponse {
    return new QueryCounterpartyInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCounterpartyInfoResponse {
    return new QueryCounterpartyInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCounterpartyInfoResponse {
    return new QueryCounterpartyInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCounterpartyInfoResponse | PlainMessage<QueryCounterpartyInfoResponse> | undefined, b: QueryCounterpartyInfoResponse | PlainMessage<QueryCounterpartyInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryCounterpartyInfoResponse, a, b);
  }
}

/**
 * QueryConfigRequest is the request type for the Query/Config RPC method
 *
 * @generated from message ibc.core.client.v2.QueryConfigRequest
 */
export class QueryConfigRequest extends Message<QueryConfigRequest> {
  /**
   * client state unique identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  constructor(data?: PartialMessage<QueryConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.QueryConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConfigRequest {
    return new QueryConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConfigRequest {
    return new QueryConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConfigRequest {
    return new QueryConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConfigRequest | PlainMessage<QueryConfigRequest> | undefined, b: QueryConfigRequest | PlainMessage<QueryConfigRequest> | undefined): boolean {
    return proto3.util.equals(QueryConfigRequest, a, b);
  }
}

/**
 * QueryConfigResponse is the response type for the Query/Config RPC method
 *
 * @generated from message ibc.core.client.v2.QueryConfigResponse
 */
export class QueryConfigResponse extends Message<QueryConfigResponse> {
  /**
   * @generated from field: ibc.core.client.v2.Config config = 1;
   */
  config?: Config;

  constructor(data?: PartialMessage<QueryConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.QueryConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: Config },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConfigResponse {
    return new QueryConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConfigResponse {
    return new QueryConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConfigResponse {
    return new QueryConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConfigResponse | PlainMessage<QueryConfigResponse> | undefined, b: QueryConfigResponse | PlainMessage<QueryConfigResponse> | undefined): boolean {
    return proto3.util.equals(QueryConfigResponse, a, b);
  }
}

