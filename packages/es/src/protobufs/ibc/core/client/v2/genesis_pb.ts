// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/client/v2/genesis.proto (package ibc.core.client.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CounterpartyInfo } from "./counterparty_pb.js";

/**
 * GenesisCounterpartyInfo defines the state associating a client with a counterparty.
 *
 * @generated from message ibc.core.client.v2.GenesisCounterpartyInfo
 */
export class GenesisCounterpartyInfo extends Message<GenesisCounterpartyInfo> {
  /**
   * ClientId is the ID of the given client.
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * CounterpartyInfo is the counterparty info of the given client.
   *
   * @generated from field: ibc.core.client.v2.CounterpartyInfo counterparty_info = 2;
   */
  counterpartyInfo?: CounterpartyInfo;

  constructor(data?: PartialMessage<GenesisCounterpartyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.GenesisCounterpartyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "counterparty_info", kind: "message", T: CounterpartyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisCounterpartyInfo {
    return new GenesisCounterpartyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisCounterpartyInfo {
    return new GenesisCounterpartyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisCounterpartyInfo {
    return new GenesisCounterpartyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisCounterpartyInfo | PlainMessage<GenesisCounterpartyInfo> | undefined, b: GenesisCounterpartyInfo | PlainMessage<GenesisCounterpartyInfo> | undefined): boolean {
    return proto3.util.equals(GenesisCounterpartyInfo, a, b);
  }
}

/**
 * GenesisState defines the ibc client v2 submodule's genesis state.
 *
 * @generated from message ibc.core.client.v2.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * counterparty info for each client
   *
   * @generated from field: repeated ibc.core.client.v2.GenesisCounterpartyInfo counterparty_infos = 1;
   */
  counterpartyInfos: GenesisCounterpartyInfo[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "counterparty_infos", kind: "message", T: GenesisCounterpartyInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

