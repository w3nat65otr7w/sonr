// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/client/v2/tx.proto (package ibc.core.client.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Config } from "./config_pb.js";

/**
 * MsgRegisterCounterparty defines a message to register a counterparty on a client
 *
 * @generated from message ibc.core.client.v2.MsgRegisterCounterparty
 */
export class MsgRegisterCounterparty extends Message<MsgRegisterCounterparty> {
  /**
   * client identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * counterparty merkle prefix
   *
   * @generated from field: repeated bytes counterparty_merkle_prefix = 2;
   */
  counterpartyMerklePrefix: Uint8Array[] = [];

  /**
   * counterparty client identifier
   *
   * @generated from field: string counterparty_client_id = 3;
   */
  counterpartyClientId = "";

  /**
   * signer address
   *
   * @generated from field: string signer = 4;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgRegisterCounterparty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.MsgRegisterCounterparty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "counterparty_merkle_prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "counterparty_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterCounterparty {
    return new MsgRegisterCounterparty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterCounterparty {
    return new MsgRegisterCounterparty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterCounterparty {
    return new MsgRegisterCounterparty().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterCounterparty | PlainMessage<MsgRegisterCounterparty> | undefined, b: MsgRegisterCounterparty | PlainMessage<MsgRegisterCounterparty> | undefined): boolean {
    return proto3.util.equals(MsgRegisterCounterparty, a, b);
  }
}

/**
 * MsgRegisterCounterpartyResponse defines the Msg/RegisterCounterparty response type.
 *
 * @generated from message ibc.core.client.v2.MsgRegisterCounterpartyResponse
 */
export class MsgRegisterCounterpartyResponse extends Message<MsgRegisterCounterpartyResponse> {
  constructor(data?: PartialMessage<MsgRegisterCounterpartyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.MsgRegisterCounterpartyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterCounterpartyResponse {
    return new MsgRegisterCounterpartyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterCounterpartyResponse {
    return new MsgRegisterCounterpartyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterCounterpartyResponse {
    return new MsgRegisterCounterpartyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterCounterpartyResponse | PlainMessage<MsgRegisterCounterpartyResponse> | undefined, b: MsgRegisterCounterpartyResponse | PlainMessage<MsgRegisterCounterpartyResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterCounterpartyResponse, a, b);
  }
}

/**
 * MsgUpdateClientConfig defines the sdk.Msg type to update the configuration for a given client
 *
 * @generated from message ibc.core.client.v2.MsgUpdateClientConfig
 */
export class MsgUpdateClientConfig extends Message<MsgUpdateClientConfig> {
  /**
   * client identifier
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * allowed relayers
   *
   * NOTE: All fields in the config must be supplied.
   *
   * @generated from field: ibc.core.client.v2.Config config = 2;
   */
  config?: Config;

  /**
   * signer address
   *
   * @generated from field: string signer = 3;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgUpdateClientConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.MsgUpdateClientConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Config },
    { no: 3, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateClientConfig {
    return new MsgUpdateClientConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateClientConfig {
    return new MsgUpdateClientConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateClientConfig {
    return new MsgUpdateClientConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateClientConfig | PlainMessage<MsgUpdateClientConfig> | undefined, b: MsgUpdateClientConfig | PlainMessage<MsgUpdateClientConfig> | undefined): boolean {
    return proto3.util.equals(MsgUpdateClientConfig, a, b);
  }
}

/**
 * MsgUpdateClientConfigResponse defines the MsgUpdateClientConfig response type.
 *
 * @generated from message ibc.core.client.v2.MsgUpdateClientConfigResponse
 */
export class MsgUpdateClientConfigResponse extends Message<MsgUpdateClientConfigResponse> {
  constructor(data?: PartialMessage<MsgUpdateClientConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.client.v2.MsgUpdateClientConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateClientConfigResponse {
    return new MsgUpdateClientConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateClientConfigResponse {
    return new MsgUpdateClientConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateClientConfigResponse {
    return new MsgUpdateClientConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateClientConfigResponse | PlainMessage<MsgUpdateClientConfigResponse> | undefined, b: MsgUpdateClientConfigResponse | PlainMessage<MsgUpdateClientConfigResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateClientConfigResponse, a, b);
  }
}

