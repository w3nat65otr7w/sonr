// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/lightclients/wasm/v1/tx.proto (package ibc.lightclients.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgStoreCode defines the request type for the StoreCode rpc.
 *
 * @generated from message ibc.lightclients.wasm.v1.MsgStoreCode
 */
export class MsgStoreCode extends Message<MsgStoreCode> {
  /**
   * signer address
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * wasm byte code of light client contract. It can be raw or gzip compressed
   *
   * @generated from field: bytes wasm_byte_code = 2;
   */
  wasmByteCode = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgStoreCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.wasm.v1.MsgStoreCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStoreCode {
    return new MsgStoreCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStoreCode {
    return new MsgStoreCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStoreCode {
    return new MsgStoreCode().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStoreCode | PlainMessage<MsgStoreCode> | undefined, b: MsgStoreCode | PlainMessage<MsgStoreCode> | undefined): boolean {
    return proto3.util.equals(MsgStoreCode, a, b);
  }
}

/**
 * MsgStoreCodeResponse defines the response type for the StoreCode rpc
 *
 * @generated from message ibc.lightclients.wasm.v1.MsgStoreCodeResponse
 */
export class MsgStoreCodeResponse extends Message<MsgStoreCodeResponse> {
  /**
   * checksum is the sha256 hash of the stored code
   *
   * @generated from field: bytes checksum = 1;
   */
  checksum = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgStoreCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.wasm.v1.MsgStoreCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "checksum", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStoreCodeResponse {
    return new MsgStoreCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStoreCodeResponse {
    return new MsgStoreCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStoreCodeResponse {
    return new MsgStoreCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStoreCodeResponse | PlainMessage<MsgStoreCodeResponse> | undefined, b: MsgStoreCodeResponse | PlainMessage<MsgStoreCodeResponse> | undefined): boolean {
    return proto3.util.equals(MsgStoreCodeResponse, a, b);
  }
}

/**
 * MsgRemoveChecksum defines the request type for the MsgRemoveChecksum rpc.
 *
 * @generated from message ibc.lightclients.wasm.v1.MsgRemoveChecksum
 */
export class MsgRemoveChecksum extends Message<MsgRemoveChecksum> {
  /**
   * signer address
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * checksum is the sha256 hash to be removed from the store
   *
   * @generated from field: bytes checksum = 2;
   */
  checksum = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgRemoveChecksum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.wasm.v1.MsgRemoveChecksum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "checksum", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveChecksum {
    return new MsgRemoveChecksum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveChecksum {
    return new MsgRemoveChecksum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveChecksum {
    return new MsgRemoveChecksum().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveChecksum | PlainMessage<MsgRemoveChecksum> | undefined, b: MsgRemoveChecksum | PlainMessage<MsgRemoveChecksum> | undefined): boolean {
    return proto3.util.equals(MsgRemoveChecksum, a, b);
  }
}

/**
 * MsgStoreChecksumResponse defines the response type for the StoreCode rpc
 *
 * @generated from message ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse
 */
export class MsgRemoveChecksumResponse extends Message<MsgRemoveChecksumResponse> {
  constructor(data?: PartialMessage<MsgRemoveChecksumResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveChecksumResponse {
    return new MsgRemoveChecksumResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveChecksumResponse {
    return new MsgRemoveChecksumResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveChecksumResponse {
    return new MsgRemoveChecksumResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveChecksumResponse | PlainMessage<MsgRemoveChecksumResponse> | undefined, b: MsgRemoveChecksumResponse | PlainMessage<MsgRemoveChecksumResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveChecksumResponse, a, b);
  }
}

/**
 * MsgMigrateContract defines the request type for the MigrateContract rpc.
 *
 * @generated from message ibc.lightclients.wasm.v1.MsgMigrateContract
 */
export class MsgMigrateContract extends Message<MsgMigrateContract> {
  /**
   * signer address
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * the client id of the contract
   *
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * checksum is the sha256 hash of the new wasm byte code for the contract
   *
   * @generated from field: bytes checksum = 3;
   */
  checksum = new Uint8Array(0);

  /**
   * the json encoded message to be passed to the contract on migration
   *
   * @generated from field: bytes msg = 4;
   */
  msg = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgMigrateContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.wasm.v1.MsgMigrateContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "checksum", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMigrateContract {
    return new MsgMigrateContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMigrateContract {
    return new MsgMigrateContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMigrateContract {
    return new MsgMigrateContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMigrateContract | PlainMessage<MsgMigrateContract> | undefined, b: MsgMigrateContract | PlainMessage<MsgMigrateContract> | undefined): boolean {
    return proto3.util.equals(MsgMigrateContract, a, b);
  }
}

/**
 * MsgMigrateContractResponse defines the response type for the MigrateContract rpc
 *
 * @generated from message ibc.lightclients.wasm.v1.MsgMigrateContractResponse
 */
export class MsgMigrateContractResponse extends Message<MsgMigrateContractResponse> {
  constructor(data?: PartialMessage<MsgMigrateContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.wasm.v1.MsgMigrateContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMigrateContractResponse {
    return new MsgMigrateContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMigrateContractResponse {
    return new MsgMigrateContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMigrateContractResponse {
    return new MsgMigrateContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMigrateContractResponse | PlainMessage<MsgMigrateContractResponse> | undefined, b: MsgMigrateContractResponse | PlainMessage<MsgMigrateContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgMigrateContractResponse, a, b);
  }
}

