// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/rate_limiting/v1/query.proto (package ibc.applications.rate_limiting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { RateLimit, WhitelistedAddressPair } from "./rate_limiting_pb.js";

/**
 * Queries all rate limits
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryAllRateLimitsRequest
 */
export class QueryAllRateLimitsRequest extends Message<QueryAllRateLimitsRequest> {
  constructor(data?: PartialMessage<QueryAllRateLimitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryAllRateLimitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllRateLimitsRequest {
    return new QueryAllRateLimitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllRateLimitsRequest {
    return new QueryAllRateLimitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllRateLimitsRequest {
    return new QueryAllRateLimitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllRateLimitsRequest | PlainMessage<QueryAllRateLimitsRequest> | undefined, b: QueryAllRateLimitsRequest | PlainMessage<QueryAllRateLimitsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllRateLimitsRequest, a, b);
  }
}

/**
 * QueryAllRateLimitsResponse returns all the rate limits stored on the chain.
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryAllRateLimitsResponse
 */
export class QueryAllRateLimitsResponse extends Message<QueryAllRateLimitsResponse> {
  /**
   * @generated from field: repeated ibc.applications.rate_limiting.v1.RateLimit rate_limits = 1;
   */
  rateLimits: RateLimit[] = [];

  constructor(data?: PartialMessage<QueryAllRateLimitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryAllRateLimitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate_limits", kind: "message", T: RateLimit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllRateLimitsResponse {
    return new QueryAllRateLimitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllRateLimitsResponse {
    return new QueryAllRateLimitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllRateLimitsResponse {
    return new QueryAllRateLimitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllRateLimitsResponse | PlainMessage<QueryAllRateLimitsResponse> | undefined, b: QueryAllRateLimitsResponse | PlainMessage<QueryAllRateLimitsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllRateLimitsResponse, a, b);
  }
}

/**
 * Queries a specific rate limit by channel ID and denom
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryRateLimitRequest
 */
export class QueryRateLimitRequest extends Message<QueryRateLimitRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string channel_or_client_id = 2;
   */
  channelOrClientId = "";

  constructor(data?: PartialMessage<QueryRateLimitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryRateLimitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_or_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRateLimitRequest {
    return new QueryRateLimitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRateLimitRequest {
    return new QueryRateLimitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRateLimitRequest {
    return new QueryRateLimitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRateLimitRequest | PlainMessage<QueryRateLimitRequest> | undefined, b: QueryRateLimitRequest | PlainMessage<QueryRateLimitRequest> | undefined): boolean {
    return proto3.util.equals(QueryRateLimitRequest, a, b);
  }
}

/**
 * QueryRateLimitResponse returns a rate limit by denom and channel_or_client_id combination.
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryRateLimitResponse
 */
export class QueryRateLimitResponse extends Message<QueryRateLimitResponse> {
  /**
   * @generated from field: ibc.applications.rate_limiting.v1.RateLimit rate_limit = 1;
   */
  rateLimit?: RateLimit;

  constructor(data?: PartialMessage<QueryRateLimitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryRateLimitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate_limit", kind: "message", T: RateLimit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRateLimitResponse {
    return new QueryRateLimitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRateLimitResponse {
    return new QueryRateLimitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRateLimitResponse {
    return new QueryRateLimitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRateLimitResponse | PlainMessage<QueryRateLimitResponse> | undefined, b: QueryRateLimitResponse | PlainMessage<QueryRateLimitResponse> | undefined): boolean {
    return proto3.util.equals(QueryRateLimitResponse, a, b);
  }
}

/**
 * Queries all the rate limits for a given chain
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryRateLimitsByChainIDRequest
 */
export class QueryRateLimitsByChainIDRequest extends Message<QueryRateLimitsByChainIDRequest> {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  constructor(data?: PartialMessage<QueryRateLimitsByChainIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryRateLimitsByChainIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRateLimitsByChainIDRequest {
    return new QueryRateLimitsByChainIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRateLimitsByChainIDRequest {
    return new QueryRateLimitsByChainIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRateLimitsByChainIDRequest {
    return new QueryRateLimitsByChainIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRateLimitsByChainIDRequest | PlainMessage<QueryRateLimitsByChainIDRequest> | undefined, b: QueryRateLimitsByChainIDRequest | PlainMessage<QueryRateLimitsByChainIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryRateLimitsByChainIDRequest, a, b);
  }
}

/**
 * QueryRateLimitsByChainIDResponse returns all rate-limits by a chain.
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryRateLimitsByChainIDResponse
 */
export class QueryRateLimitsByChainIDResponse extends Message<QueryRateLimitsByChainIDResponse> {
  /**
   * @generated from field: repeated ibc.applications.rate_limiting.v1.RateLimit rate_limits = 1;
   */
  rateLimits: RateLimit[] = [];

  constructor(data?: PartialMessage<QueryRateLimitsByChainIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryRateLimitsByChainIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate_limits", kind: "message", T: RateLimit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRateLimitsByChainIDResponse {
    return new QueryRateLimitsByChainIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRateLimitsByChainIDResponse {
    return new QueryRateLimitsByChainIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRateLimitsByChainIDResponse {
    return new QueryRateLimitsByChainIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRateLimitsByChainIDResponse | PlainMessage<QueryRateLimitsByChainIDResponse> | undefined, b: QueryRateLimitsByChainIDResponse | PlainMessage<QueryRateLimitsByChainIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryRateLimitsByChainIDResponse, a, b);
  }
}

/**
 * Queries all the rate limits for a given channel or client ID
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryRateLimitsByChannelOrClientIDRequest
 */
export class QueryRateLimitsByChannelOrClientIDRequest extends Message<QueryRateLimitsByChannelOrClientIDRequest> {
  /**
   * @generated from field: string channel_or_client_id = 1;
   */
  channelOrClientId = "";

  constructor(data?: PartialMessage<QueryRateLimitsByChannelOrClientIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryRateLimitsByChannelOrClientIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_or_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRateLimitsByChannelOrClientIDRequest {
    return new QueryRateLimitsByChannelOrClientIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRateLimitsByChannelOrClientIDRequest {
    return new QueryRateLimitsByChannelOrClientIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRateLimitsByChannelOrClientIDRequest {
    return new QueryRateLimitsByChannelOrClientIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRateLimitsByChannelOrClientIDRequest | PlainMessage<QueryRateLimitsByChannelOrClientIDRequest> | undefined, b: QueryRateLimitsByChannelOrClientIDRequest | PlainMessage<QueryRateLimitsByChannelOrClientIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryRateLimitsByChannelOrClientIDRequest, a, b);
  }
}

/**
 * QueryRateLimitsByChannelOrClientIDResponse returns all rate-limits by a channel or client id.
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryRateLimitsByChannelOrClientIDResponse
 */
export class QueryRateLimitsByChannelOrClientIDResponse extends Message<QueryRateLimitsByChannelOrClientIDResponse> {
  /**
   * @generated from field: repeated ibc.applications.rate_limiting.v1.RateLimit rate_limits = 1;
   */
  rateLimits: RateLimit[] = [];

  constructor(data?: PartialMessage<QueryRateLimitsByChannelOrClientIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryRateLimitsByChannelOrClientIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate_limits", kind: "message", T: RateLimit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRateLimitsByChannelOrClientIDResponse {
    return new QueryRateLimitsByChannelOrClientIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRateLimitsByChannelOrClientIDResponse {
    return new QueryRateLimitsByChannelOrClientIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRateLimitsByChannelOrClientIDResponse {
    return new QueryRateLimitsByChannelOrClientIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRateLimitsByChannelOrClientIDResponse | PlainMessage<QueryRateLimitsByChannelOrClientIDResponse> | undefined, b: QueryRateLimitsByChannelOrClientIDResponse | PlainMessage<QueryRateLimitsByChannelOrClientIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryRateLimitsByChannelOrClientIDResponse, a, b);
  }
}

/**
 * Queries all blacklisted denoms
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryAllBlacklistedDenomsRequest
 */
export class QueryAllBlacklistedDenomsRequest extends Message<QueryAllBlacklistedDenomsRequest> {
  constructor(data?: PartialMessage<QueryAllBlacklistedDenomsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryAllBlacklistedDenomsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllBlacklistedDenomsRequest {
    return new QueryAllBlacklistedDenomsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllBlacklistedDenomsRequest {
    return new QueryAllBlacklistedDenomsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllBlacklistedDenomsRequest {
    return new QueryAllBlacklistedDenomsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllBlacklistedDenomsRequest | PlainMessage<QueryAllBlacklistedDenomsRequest> | undefined, b: QueryAllBlacklistedDenomsRequest | PlainMessage<QueryAllBlacklistedDenomsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllBlacklistedDenomsRequest, a, b);
  }
}

/**
 * QueryAllBlacklistedDenomsResponse returns all the blacklisted denosm.
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryAllBlacklistedDenomsResponse
 */
export class QueryAllBlacklistedDenomsResponse extends Message<QueryAllBlacklistedDenomsResponse> {
  /**
   * @generated from field: repeated string denoms = 1;
   */
  denoms: string[] = [];

  constructor(data?: PartialMessage<QueryAllBlacklistedDenomsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryAllBlacklistedDenomsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllBlacklistedDenomsResponse {
    return new QueryAllBlacklistedDenomsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllBlacklistedDenomsResponse {
    return new QueryAllBlacklistedDenomsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllBlacklistedDenomsResponse {
    return new QueryAllBlacklistedDenomsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllBlacklistedDenomsResponse | PlainMessage<QueryAllBlacklistedDenomsResponse> | undefined, b: QueryAllBlacklistedDenomsResponse | PlainMessage<QueryAllBlacklistedDenomsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllBlacklistedDenomsResponse, a, b);
  }
}

/**
 * Queries all whitelisted address pairs
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryAllWhitelistedAddressesRequest
 */
export class QueryAllWhitelistedAddressesRequest extends Message<QueryAllWhitelistedAddressesRequest> {
  constructor(data?: PartialMessage<QueryAllWhitelistedAddressesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryAllWhitelistedAddressesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllWhitelistedAddressesRequest {
    return new QueryAllWhitelistedAddressesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllWhitelistedAddressesRequest {
    return new QueryAllWhitelistedAddressesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllWhitelistedAddressesRequest {
    return new QueryAllWhitelistedAddressesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllWhitelistedAddressesRequest | PlainMessage<QueryAllWhitelistedAddressesRequest> | undefined, b: QueryAllWhitelistedAddressesRequest | PlainMessage<QueryAllWhitelistedAddressesRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllWhitelistedAddressesRequest, a, b);
  }
}

/**
 * QueryAllWhitelistedAddressesResponse returns all whitelisted pairs.
 *
 * @generated from message ibc.applications.rate_limiting.v1.QueryAllWhitelistedAddressesResponse
 */
export class QueryAllWhitelistedAddressesResponse extends Message<QueryAllWhitelistedAddressesResponse> {
  /**
   * @generated from field: repeated ibc.applications.rate_limiting.v1.WhitelistedAddressPair address_pairs = 1;
   */
  addressPairs: WhitelistedAddressPair[] = [];

  constructor(data?: PartialMessage<QueryAllWhitelistedAddressesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.QueryAllWhitelistedAddressesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address_pairs", kind: "message", T: WhitelistedAddressPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllWhitelistedAddressesResponse {
    return new QueryAllWhitelistedAddressesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllWhitelistedAddressesResponse {
    return new QueryAllWhitelistedAddressesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllWhitelistedAddressesResponse {
    return new QueryAllWhitelistedAddressesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllWhitelistedAddressesResponse | PlainMessage<QueryAllWhitelistedAddressesResponse> | undefined, b: QueryAllWhitelistedAddressesResponse | PlainMessage<QueryAllWhitelistedAddressesResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllWhitelistedAddressesResponse, a, b);
  }
}

