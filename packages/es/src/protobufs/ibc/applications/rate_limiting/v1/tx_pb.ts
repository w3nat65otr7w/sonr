// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/rate_limiting/v1/tx.proto (package ibc.applications.rate_limiting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Gov tx to add a new rate limit
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgAddRateLimit
 */
export class MsgAddRateLimit extends Message<MsgAddRateLimit> {
  /**
   * signer defines the x/gov module account address or other authority signing the message
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * ChannelId for the rate limit, on the side of the rate limited chain
   *
   * @generated from field: string channel_or_client_id = 3;
   */
  channelOrClientId = "";

  /**
   * MaxPercentSend defines the threshold for outflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   *
   * @generated from field: string max_percent_send = 4;
   */
  maxPercentSend = "";

  /**
   * MaxPercentSend defines the threshold for inflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   *
   * @generated from field: string max_percent_recv = 5;
   */
  maxPercentRecv = "";

  /**
   * DurationHours specifies the number of hours before the rate limit
   * is reset (e.g. 24 indicates that the rate limit is reset each day)
   *
   * @generated from field: uint64 duration_hours = 6;
   */
  durationHours = protoInt64.zero;

  constructor(data?: PartialMessage<MsgAddRateLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgAddRateLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_or_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "max_percent_send", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "max_percent_recv", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "duration_hours", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddRateLimit {
    return new MsgAddRateLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddRateLimit {
    return new MsgAddRateLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddRateLimit {
    return new MsgAddRateLimit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddRateLimit | PlainMessage<MsgAddRateLimit> | undefined, b: MsgAddRateLimit | PlainMessage<MsgAddRateLimit> | undefined): boolean {
    return proto3.util.equals(MsgAddRateLimit, a, b);
  }
}

/**
 * MsgAddRateLimitResponse is the return type for AddRateLimit function.
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgAddRateLimitResponse
 */
export class MsgAddRateLimitResponse extends Message<MsgAddRateLimitResponse> {
  constructor(data?: PartialMessage<MsgAddRateLimitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgAddRateLimitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddRateLimitResponse {
    return new MsgAddRateLimitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddRateLimitResponse {
    return new MsgAddRateLimitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddRateLimitResponse {
    return new MsgAddRateLimitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddRateLimitResponse | PlainMessage<MsgAddRateLimitResponse> | undefined, b: MsgAddRateLimitResponse | PlainMessage<MsgAddRateLimitResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddRateLimitResponse, a, b);
  }
}

/**
 * Gov tx to update an existing rate limit
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgUpdateRateLimit
 */
export class MsgUpdateRateLimit extends Message<MsgUpdateRateLimit> {
  /**
   * signer defines the x/gov module account address or other authority signing the message
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * ChannelId for the rate limit, on the side of the rate limited chain
   *
   * @generated from field: string channel_or_client_id = 3;
   */
  channelOrClientId = "";

  /**
   * MaxPercentSend defines the threshold for outflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   *
   * @generated from field: string max_percent_send = 4;
   */
  maxPercentSend = "";

  /**
   * MaxPercentSend defines the threshold for inflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   *
   * @generated from field: string max_percent_recv = 5;
   */
  maxPercentRecv = "";

  /**
   * DurationHours specifies the number of hours before the rate limit
   * is reset (e.g. 24 indicates that the rate limit is reset each day)
   *
   * @generated from field: uint64 duration_hours = 6;
   */
  durationHours = protoInt64.zero;

  constructor(data?: PartialMessage<MsgUpdateRateLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgUpdateRateLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_or_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "max_percent_send", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "max_percent_recv", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "duration_hours", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateRateLimit {
    return new MsgUpdateRateLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateRateLimit {
    return new MsgUpdateRateLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateRateLimit {
    return new MsgUpdateRateLimit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateRateLimit | PlainMessage<MsgUpdateRateLimit> | undefined, b: MsgUpdateRateLimit | PlainMessage<MsgUpdateRateLimit> | undefined): boolean {
    return proto3.util.equals(MsgUpdateRateLimit, a, b);
  }
}

/**
 * MsgUpdateRateLimitResponse is the return type for UpdateRateLimit.
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgUpdateRateLimitResponse
 */
export class MsgUpdateRateLimitResponse extends Message<MsgUpdateRateLimitResponse> {
  constructor(data?: PartialMessage<MsgUpdateRateLimitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgUpdateRateLimitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateRateLimitResponse {
    return new MsgUpdateRateLimitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateRateLimitResponse {
    return new MsgUpdateRateLimitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateRateLimitResponse {
    return new MsgUpdateRateLimitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateRateLimitResponse | PlainMessage<MsgUpdateRateLimitResponse> | undefined, b: MsgUpdateRateLimitResponse | PlainMessage<MsgUpdateRateLimitResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateRateLimitResponse, a, b);
  }
}

/**
 * Gov tx to remove a rate limit
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgRemoveRateLimit
 */
export class MsgRemoveRateLimit extends Message<MsgRemoveRateLimit> {
  /**
   * signer defines the x/gov module account address or other authority signing the message
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * ChannelId for the rate limit, on the side of the rate limited chain
   *
   * @generated from field: string channel_or_client_id = 3;
   */
  channelOrClientId = "";

  constructor(data?: PartialMessage<MsgRemoveRateLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgRemoveRateLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_or_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveRateLimit {
    return new MsgRemoveRateLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveRateLimit {
    return new MsgRemoveRateLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveRateLimit {
    return new MsgRemoveRateLimit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveRateLimit | PlainMessage<MsgRemoveRateLimit> | undefined, b: MsgRemoveRateLimit | PlainMessage<MsgRemoveRateLimit> | undefined): boolean {
    return proto3.util.equals(MsgRemoveRateLimit, a, b);
  }
}

/**
 * MsgRemoveRateLimitResponse is the response type for RemoveRateLimit
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgRemoveRateLimitResponse
 */
export class MsgRemoveRateLimitResponse extends Message<MsgRemoveRateLimitResponse> {
  constructor(data?: PartialMessage<MsgRemoveRateLimitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgRemoveRateLimitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveRateLimitResponse {
    return new MsgRemoveRateLimitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveRateLimitResponse {
    return new MsgRemoveRateLimitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveRateLimitResponse {
    return new MsgRemoveRateLimitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveRateLimitResponse | PlainMessage<MsgRemoveRateLimitResponse> | undefined, b: MsgRemoveRateLimitResponse | PlainMessage<MsgRemoveRateLimitResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveRateLimitResponse, a, b);
  }
}

/**
 * Gov tx to reset the flow on a rate limit
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgResetRateLimit
 */
export class MsgResetRateLimit extends Message<MsgResetRateLimit> {
  /**
   * signer defines the x/gov module account address or other authority signing the message
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * ChannelId for the rate limit, on the side of the rate limited chain
   *
   * @generated from field: string channel_or_client_id = 3;
   */
  channelOrClientId = "";

  constructor(data?: PartialMessage<MsgResetRateLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgResetRateLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_or_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgResetRateLimit {
    return new MsgResetRateLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgResetRateLimit {
    return new MsgResetRateLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgResetRateLimit {
    return new MsgResetRateLimit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgResetRateLimit | PlainMessage<MsgResetRateLimit> | undefined, b: MsgResetRateLimit | PlainMessage<MsgResetRateLimit> | undefined): boolean {
    return proto3.util.equals(MsgResetRateLimit, a, b);
  }
}

/**
 * MsgResetRateLimitResponse is the response type for ResetRateLimit.
 *
 * @generated from message ibc.applications.rate_limiting.v1.MsgResetRateLimitResponse
 */
export class MsgResetRateLimitResponse extends Message<MsgResetRateLimitResponse> {
  constructor(data?: PartialMessage<MsgResetRateLimitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.rate_limiting.v1.MsgResetRateLimitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgResetRateLimitResponse {
    return new MsgResetRateLimitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgResetRateLimitResponse {
    return new MsgResetRateLimitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgResetRateLimitResponse {
    return new MsgResetRateLimitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgResetRateLimitResponse | PlainMessage<MsgResetRateLimitResponse> | undefined, b: MsgResetRateLimitResponse | PlainMessage<MsgResetRateLimitResponse> | undefined): boolean {
    return proto3.util.equals(MsgResetRateLimitResponse, a, b);
  }
}

