// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/packet_forward_middleware/v1/genesis.proto (package ibc.applications.packet_forward_middleware.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * GenesisState defines the packetforward genesis state
 *
 * @generated from message ibc.applications.packet_forward_middleware.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * key - information about forwarded packet: src_channel
   * (parsedReceiver.Channel), src_port (parsedReceiver.Port), sequence value -
   * information about original packet for refunding if necessary: retries,
   * srcPacketSender, srcPacket.DestinationChannel, srcPacket.DestinationPort
   *
   * @generated from field: map<string, ibc.applications.packet_forward_middleware.v1.InFlightPacket> in_flight_packets = 2;
   */
  inFlightPackets: { [key: string]: InFlightPacket } = {};

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.packet_forward_middleware.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "in_flight_packets", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: InFlightPacket} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * InFlightPacket contains information about original packet for
 * writing the acknowledgement and refunding if necessary.
 *
 * @generated from message ibc.applications.packet_forward_middleware.v1.InFlightPacket
 */
export class InFlightPacket extends Message<InFlightPacket> {
  /**
   * @generated from field: string original_sender_address = 1;
   */
  originalSenderAddress = "";

  /**
   * @generated from field: string refund_channel_id = 2;
   */
  refundChannelId = "";

  /**
   * @generated from field: string refund_port_id = 3;
   */
  refundPortId = "";

  /**
   * @generated from field: string packet_src_channel_id = 4;
   */
  packetSrcChannelId = "";

  /**
   * @generated from field: string packet_src_port_id = 5;
   */
  packetSrcPortId = "";

  /**
   * @generated from field: uint64 packet_timeout_timestamp = 6;
   */
  packetTimeoutTimestamp = protoInt64.zero;

  /**
   * @generated from field: string packet_timeout_height = 7;
   */
  packetTimeoutHeight = "";

  /**
   * @generated from field: bytes packet_data = 8;
   */
  packetData = new Uint8Array(0);

  /**
   * @generated from field: uint64 refund_sequence = 9;
   */
  refundSequence = protoInt64.zero;

  /**
   * @generated from field: int32 retries_remaining = 10;
   */
  retriesRemaining = 0;

  /**
   * @generated from field: uint64 timeout = 11;
   */
  timeout = protoInt64.zero;

  /**
   * @generated from field: bool nonrefundable = 12;
   */
  nonrefundable = false;

  constructor(data?: PartialMessage<InFlightPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.packet_forward_middleware.v1.InFlightPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_sender_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refund_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "refund_port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "packet_src_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "packet_src_port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "packet_timeout_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "packet_timeout_height", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "packet_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "refund_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "retries_remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "nonrefundable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InFlightPacket {
    return new InFlightPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InFlightPacket {
    return new InFlightPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InFlightPacket {
    return new InFlightPacket().fromJsonString(jsonString, options);
  }

  static equals(a: InFlightPacket | PlainMessage<InFlightPacket> | undefined, b: InFlightPacket | PlainMessage<InFlightPacket> | undefined): boolean {
    return proto3.util.equals(InFlightPacket, a, b);
  }
}

