// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/events.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * EventDIDCreated is emitted when a new DID is created
 *
 * @generated from message did.v1.EventDIDCreated
 */
export class EventDIDCreated extends Message<EventDIDCreated> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Creator address
   *
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * Public keys added
   *
   * @generated from field: repeated string public_keys = 3;
   */
  publicKeys: string[] = [];

  /**
   * Services added
   *
   * @generated from field: repeated string services = 4;
   */
  services: string[] = [];

  /**
   * Creation timestamp
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 6;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventDIDCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventDIDCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "services", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDIDCreated {
    return new EventDIDCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDIDCreated {
    return new EventDIDCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDIDCreated {
    return new EventDIDCreated().fromJsonString(jsonString, options);
  }

  static equals(a: EventDIDCreated | PlainMessage<EventDIDCreated> | undefined, b: EventDIDCreated | PlainMessage<EventDIDCreated> | undefined): boolean {
    return proto3.util.equals(EventDIDCreated, a, b);
  }
}

/**
 * EventDIDUpdated is emitted when a DID is updated
 *
 * @generated from message did.v1.EventDIDUpdated
 */
export class EventDIDUpdated extends Message<EventDIDUpdated> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Updater address
   *
   * @generated from field: string updater = 2;
   */
  updater = "";

  /**
   * Fields that were updated
   *
   * @generated from field: repeated string fields_updated = 3;
   */
  fieldsUpdated: string[] = [];

  /**
   * Update timestamp
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventDIDUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventDIDUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updater", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fields_updated", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDIDUpdated {
    return new EventDIDUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDIDUpdated {
    return new EventDIDUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDIDUpdated {
    return new EventDIDUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: EventDIDUpdated | PlainMessage<EventDIDUpdated> | undefined, b: EventDIDUpdated | PlainMessage<EventDIDUpdated> | undefined): boolean {
    return proto3.util.equals(EventDIDUpdated, a, b);
  }
}

/**
 * EventDIDDeactivated is emitted when a DID is deactivated
 *
 * @generated from message did.v1.EventDIDDeactivated
 */
export class EventDIDDeactivated extends Message<EventDIDDeactivated> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Deactivator address
   *
   * @generated from field: string deactivator = 2;
   */
  deactivator = "";

  /**
   * Deactivation timestamp
   *
   * @generated from field: google.protobuf.Timestamp deactivated_at = 3;
   */
  deactivatedAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventDIDDeactivated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventDIDDeactivated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deactivator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deactivated_at", kind: "message", T: Timestamp },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDIDDeactivated {
    return new EventDIDDeactivated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDIDDeactivated {
    return new EventDIDDeactivated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDIDDeactivated {
    return new EventDIDDeactivated().fromJsonString(jsonString, options);
  }

  static equals(a: EventDIDDeactivated | PlainMessage<EventDIDDeactivated> | undefined, b: EventDIDDeactivated | PlainMessage<EventDIDDeactivated> | undefined): boolean {
    return proto3.util.equals(EventDIDDeactivated, a, b);
  }
}

/**
 * EventVerificationMethodAdded is emitted when a verification method is added
 *
 * @generated from message did.v1.EventVerificationMethodAdded
 */
export class EventVerificationMethodAdded extends Message<EventVerificationMethodAdded> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Method ID
   *
   * @generated from field: string method_id = 2;
   */
  methodId = "";

  /**
   * Key type
   *
   * @generated from field: string key_type = 3;
   */
  keyType = "";

  /**
   * Public key (encoded)
   *
   * @generated from field: string public_key = 4;
   */
  publicKey = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventVerificationMethodAdded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventVerificationMethodAdded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVerificationMethodAdded {
    return new EventVerificationMethodAdded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVerificationMethodAdded {
    return new EventVerificationMethodAdded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVerificationMethodAdded {
    return new EventVerificationMethodAdded().fromJsonString(jsonString, options);
  }

  static equals(a: EventVerificationMethodAdded | PlainMessage<EventVerificationMethodAdded> | undefined, b: EventVerificationMethodAdded | PlainMessage<EventVerificationMethodAdded> | undefined): boolean {
    return proto3.util.equals(EventVerificationMethodAdded, a, b);
  }
}

/**
 * EventVerificationMethodRemoved is emitted when a verification method is removed
 *
 * @generated from message did.v1.EventVerificationMethodRemoved
 */
export class EventVerificationMethodRemoved extends Message<EventVerificationMethodRemoved> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Method ID
   *
   * @generated from field: string method_id = 2;
   */
  methodId = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventVerificationMethodRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventVerificationMethodRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVerificationMethodRemoved {
    return new EventVerificationMethodRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVerificationMethodRemoved {
    return new EventVerificationMethodRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVerificationMethodRemoved {
    return new EventVerificationMethodRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: EventVerificationMethodRemoved | PlainMessage<EventVerificationMethodRemoved> | undefined, b: EventVerificationMethodRemoved | PlainMessage<EventVerificationMethodRemoved> | undefined): boolean {
    return proto3.util.equals(EventVerificationMethodRemoved, a, b);
  }
}

/**
 * EventServiceAdded is emitted when a service is added to a DID
 *
 * @generated from message did.v1.EventServiceAdded
 */
export class EventServiceAdded extends Message<EventServiceAdded> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Service ID
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  /**
   * Service type
   *
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * Service endpoint
   *
   * @generated from field: string endpoint = 4;
   */
  endpoint = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventServiceAdded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventServiceAdded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventServiceAdded {
    return new EventServiceAdded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventServiceAdded {
    return new EventServiceAdded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventServiceAdded {
    return new EventServiceAdded().fromJsonString(jsonString, options);
  }

  static equals(a: EventServiceAdded | PlainMessage<EventServiceAdded> | undefined, b: EventServiceAdded | PlainMessage<EventServiceAdded> | undefined): boolean {
    return proto3.util.equals(EventServiceAdded, a, b);
  }
}

/**
 * EventServiceRemoved is emitted when a service is removed from a DID
 *
 * @generated from message did.v1.EventServiceRemoved
 */
export class EventServiceRemoved extends Message<EventServiceRemoved> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Service ID
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventServiceRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventServiceRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventServiceRemoved {
    return new EventServiceRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventServiceRemoved {
    return new EventServiceRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventServiceRemoved {
    return new EventServiceRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: EventServiceRemoved | PlainMessage<EventServiceRemoved> | undefined, b: EventServiceRemoved | PlainMessage<EventServiceRemoved> | undefined): boolean {
    return proto3.util.equals(EventServiceRemoved, a, b);
  }
}

/**
 * EventCredentialIssued is emitted when a verifiable credential is issued
 *
 * @generated from message did.v1.EventCredentialIssued
 */
export class EventCredentialIssued extends Message<EventCredentialIssued> {
  /**
   * Credential ID
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId = "";

  /**
   * Issuer DID
   *
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * Subject DID
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * Credential type
   *
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * Issuance timestamp
   *
   * @generated from field: google.protobuf.Timestamp issued_at = 5;
   */
  issuedAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 6;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventCredentialIssued>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventCredentialIssued";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "issued_at", kind: "message", T: Timestamp },
    { no: 6, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCredentialIssued {
    return new EventCredentialIssued().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCredentialIssued {
    return new EventCredentialIssued().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCredentialIssued {
    return new EventCredentialIssued().fromJsonString(jsonString, options);
  }

  static equals(a: EventCredentialIssued | PlainMessage<EventCredentialIssued> | undefined, b: EventCredentialIssued | PlainMessage<EventCredentialIssued> | undefined): boolean {
    return proto3.util.equals(EventCredentialIssued, a, b);
  }
}

/**
 * EventCredentialRevoked is emitted when a credential is revoked
 *
 * @generated from message did.v1.EventCredentialRevoked
 */
export class EventCredentialRevoked extends Message<EventCredentialRevoked> {
  /**
   * Credential ID
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId = "";

  /**
   * Revoker DID
   *
   * @generated from field: string revoker = 2;
   */
  revoker = "";

  /**
   * Revocation reason
   *
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * Revocation timestamp
   *
   * @generated from field: google.protobuf.Timestamp revoked_at = 4;
   */
  revokedAt?: Timestamp;

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 5;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventCredentialRevoked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventCredentialRevoked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revoker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "revoked_at", kind: "message", T: Timestamp },
    { no: 5, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCredentialRevoked {
    return new EventCredentialRevoked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCredentialRevoked {
    return new EventCredentialRevoked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCredentialRevoked {
    return new EventCredentialRevoked().fromJsonString(jsonString, options);
  }

  static equals(a: EventCredentialRevoked | PlainMessage<EventCredentialRevoked> | undefined, b: EventCredentialRevoked | PlainMessage<EventCredentialRevoked> | undefined): boolean {
    return proto3.util.equals(EventCredentialRevoked, a, b);
  }
}

/**
 * EventWebAuthnRegistered is emitted when a WebAuthn credential is registered
 *
 * @generated from message did.v1.EventWebAuthnRegistered
 */
export class EventWebAuthnRegistered extends Message<EventWebAuthnRegistered> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * WebAuthn credential ID
   *
   * @generated from field: string credential_id = 2;
   */
  credentialId = "";

  /**
   * Attestation type
   *
   * @generated from field: string attestation_type = 3;
   */
  attestationType = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventWebAuthnRegistered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventWebAuthnRegistered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attestation_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWebAuthnRegistered {
    return new EventWebAuthnRegistered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWebAuthnRegistered {
    return new EventWebAuthnRegistered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWebAuthnRegistered {
    return new EventWebAuthnRegistered().fromJsonString(jsonString, options);
  }

  static equals(a: EventWebAuthnRegistered | PlainMessage<EventWebAuthnRegistered> | undefined, b: EventWebAuthnRegistered | PlainMessage<EventWebAuthnRegistered> | undefined): boolean {
    return proto3.util.equals(EventWebAuthnRegistered, a, b);
  }
}

/**
 * EventExternalWalletLinked is emitted when an external wallet is linked
 *
 * @generated from message did.v1.EventExternalWalletLinked
 */
export class EventExternalWalletLinked extends Message<EventExternalWalletLinked> {
  /**
   * DID identifier
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * Wallet type (ethereum, bitcoin, etc.)
   *
   * @generated from field: string wallet_type = 2;
   */
  walletType = "";

  /**
   * Wallet address
   *
   * @generated from field: string wallet_address = 3;
   */
  walletAddress = "";

  /**
   * Block height
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EventExternalWalletLinked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.EventExternalWalletLinked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wallet_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "wallet_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExternalWalletLinked {
    return new EventExternalWalletLinked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExternalWalletLinked {
    return new EventExternalWalletLinked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExternalWalletLinked {
    return new EventExternalWalletLinked().fromJsonString(jsonString, options);
  }

  static equals(a: EventExternalWalletLinked | PlainMessage<EventExternalWalletLinked> | undefined, b: EventExternalWalletLinked | PlainMessage<EventExternalWalletLinked> | undefined): boolean {
    return proto3.util.equals(EventExternalWalletLinked, a, b);
  }
}

