// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/types.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * VerificationMethod represents a verification method in a DID document
 *
 * @generated from message did.v1.VerificationMethod
 */
export class VerificationMethod extends Message<VerificationMethod> {
  /**
   * id is the verification method identifier (REQUIRED)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * verification_method_kind is the verification method type (REQUIRED)
   *
   * @generated from field: string verification_method_kind = 2;
   */
  verificationMethodKind = "";

  /**
   * controller is the DID that controls this verification method (REQUIRED)
   *
   * @generated from field: string controller = 3;
   */
  controller = "";

  /**
   * Public key material (optional, only one should be set)
   * publicKeyJwk represents the public key as a JSON Web Key
   *
   * @generated from field: string public_key_jwk = 4;
   */
  publicKeyJwk = "";

  /**
   * publicKeyMultibase represents the public key as multibase
   *
   * @generated from field: string public_key_multibase = 5;
   */
  publicKeyMultibase = "";

  /**
   * publicKeyBase58 represents the public key in Base58 (legacy)
   *
   * @generated from field: string public_key_base58 = 6;
   */
  publicKeyBase58 = "";

  /**
   * publicKeyBase64 represents the public key in Base64 (legacy)
   *
   * @generated from field: string public_key_base64 = 7;
   */
  publicKeyBase64 = "";

  /**
   * publicKeyPem represents the public key in PEM format (legacy)
   *
   * @generated from field: string public_key_pem = 8;
   */
  publicKeyPem = "";

  /**
   * publicKeyHex represents the public key in hexadecimal (legacy)
   *
   * @generated from field: string public_key_hex = 9;
   */
  publicKeyHex = "";

  /**
   * WebAuthn credential information (for WebAuthn integration)
   *
   * @generated from field: did.v1.WebAuthnCredential webauthn_credential = 10;
   */
  webauthnCredential?: WebAuthnCredential;

  /**
   * blockchain_account_id for external wallet linking (CAIP-10 format)
   * Format: "eip155:1:0x89a932207c485f85226d86f7cd486a89a24fcc12" for Ethereum
   * Format: "cosmos:cosmoshub-4:cosmos1..." for Cosmos chains
   *
   * @generated from field: string blockchain_account_id = 11;
   */
  blockchainAccountId = "";

  constructor(data?: PartialMessage<VerificationMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.VerificationMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification_method_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_jwk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "public_key_multibase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "public_key_base58", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "public_key_pem", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "public_key_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "webauthn_credential", kind: "message", T: WebAuthnCredential },
    { no: 11, name: "blockchain_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationMethod {
    return new VerificationMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationMethod {
    return new VerificationMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationMethod {
    return new VerificationMethod().fromJsonString(jsonString, options);
  }

  static equals(a: VerificationMethod | PlainMessage<VerificationMethod> | undefined, b: VerificationMethod | PlainMessage<VerificationMethod> | undefined): boolean {
    return proto3.util.equals(VerificationMethod, a, b);
  }
}

/**
 * VerificationMethodReference can be either an embedded verification method
 * or a reference
 *
 * @generated from message did.v1.VerificationMethodReference
 */
export class VerificationMethodReference extends Message<VerificationMethodReference> {
  /**
   * verification_method_id is a reference to a verification method by ID (optional)
   *
   * @generated from field: string verification_method_id = 1;
   */
  verificationMethodId = "";

  /**
   * embedded_verification_method is an embedded verification method (optional)
   *
   * @generated from field: did.v1.VerificationMethod embedded_verification_method = 2;
   */
  embeddedVerificationMethod?: VerificationMethod;

  constructor(data?: PartialMessage<VerificationMethodReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.VerificationMethodReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verification_method_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "embedded_verification_method", kind: "message", T: VerificationMethod },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationMethodReference {
    return new VerificationMethodReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationMethodReference {
    return new VerificationMethodReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationMethodReference {
    return new VerificationMethodReference().fromJsonString(jsonString, options);
  }

  static equals(a: VerificationMethodReference | PlainMessage<VerificationMethodReference> | undefined, b: VerificationMethodReference | PlainMessage<VerificationMethodReference> | undefined): boolean {
    return proto3.util.equals(VerificationMethodReference, a, b);
  }
}

/**
 * Service represents a service endpoint in a DID document
 *
 * @generated from message did.v1.Service
 */
export class Service extends Message<Service> {
  /**
   * id is the service identifier (REQUIRED)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * service_kind is the service type (REQUIRED)
   *
   * @generated from field: string service_kind = 2;
   */
  serviceKind = "";

  /**
   * single_endpoint for a single URL
   *
   * @generated from field: string single_endpoint = 3;
   */
  singleEndpoint = "";

  /**
   * multiple_endpoints for multiple URLs
   *
   * @generated from field: did.v1.ServiceEndpoints multiple_endpoints = 4;
   */
  multipleEndpoints?: ServiceEndpoints;

  /**
   * complex_endpoint for complex endpoint objects as JSON
   *
   * @generated from field: bytes complex_endpoint = 5;
   */
  complexEndpoint = new Uint8Array(0);

  /**
   * Additional properties for the service
   *
   * @generated from field: map<string, string> properties = 6;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Service>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Service";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "single_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "multiple_endpoints", kind: "message", T: ServiceEndpoints },
    { no: 5, name: "complex_endpoint", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service {
    return new Service().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJsonString(jsonString, options);
  }

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean {
    return proto3.util.equals(Service, a, b);
  }
}

/**
 * ServiceEndpoints represents multiple service endpoints
 *
 * @generated from message did.v1.ServiceEndpoints
 */
export class ServiceEndpoints extends Message<ServiceEndpoints> {
  /**
   * @generated from field: repeated string endpoints = 1;
   */
  endpoints: string[] = [];

  constructor(data?: PartialMessage<ServiceEndpoints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.ServiceEndpoints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceEndpoints {
    return new ServiceEndpoints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceEndpoints {
    return new ServiceEndpoints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceEndpoints {
    return new ServiceEndpoints().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceEndpoints | PlainMessage<ServiceEndpoints> | undefined, b: ServiceEndpoints | PlainMessage<ServiceEndpoints> | undefined): boolean {
    return proto3.util.equals(ServiceEndpoints, a, b);
  }
}

/**
 * WebAuthnCredential represents WebAuthn credential information
 *
 * @generated from message did.v1.WebAuthnCredential
 */
export class WebAuthnCredential extends Message<WebAuthnCredential> {
  /**
   * credential_id is the WebAuthn credential ID
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId = "";

  /**
   * public_key is the WebAuthn public key
   *
   * @generated from field: bytes public_key = 2;
   */
  publicKey = new Uint8Array(0);

  /**
   * algorithm is the signing algorithm
   *
   * @generated from field: int32 algorithm = 3;
   */
  algorithm = 0;

  /**
   * attestation_type is the attestation type
   *
   * @generated from field: string attestation_type = 4;
   */
  attestationType = "";

  /**
   * origin is the origin where the credential was created
   *
   * @generated from field: string origin = 5;
   */
  origin = "";

  /**
   * created_at is when the credential was created
   *
   * @generated from field: int64 created_at = 6;
   */
  createdAt = protoInt64.zero;

  /**
   * rp_id is the Relying Party ID
   *
   * @generated from field: string rp_id = 7;
   */
  rpId = "";

  /**
   * rp_name is the Relying Party Name
   *
   * @generated from field: string rp_name = 8;
   */
  rpName = "";

  /**
   * transports are the authenticator transports
   *
   * @generated from field: repeated string transports = 9;
   */
  transports: string[] = [];

  /**
   * user_verified indicates whether user verification was performed
   *
   * @generated from field: bool user_verified = 10;
   */
  userVerified = false;

  /**
   * signature_algorithm provides detailed algorithm information
   *
   * @generated from field: string signature_algorithm = 11;
   */
  signatureAlgorithm = "";

  /**
   * raw_id is the base64url encoded raw credential ID
   *
   * @generated from field: string raw_id = 12;
   */
  rawId = "";

  /**
   * client_data_json is the base64url encoded client data JSON
   *
   * @generated from field: string client_data_json = 13;
   */
  clientDataJson = "";

  /**
   * attestation_object is the base64url encoded attestation object
   *
   * @generated from field: string attestation_object = 14;
   */
  attestationObject = "";

  constructor(data?: PartialMessage<WebAuthnCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.WebAuthnCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "algorithm", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "attestation_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "rp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "rp_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "transports", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "user_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "signature_algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "raw_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "client_data_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "attestation_object", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthnCredential {
    return new WebAuthnCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthnCredential {
    return new WebAuthnCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthnCredential {
    return new WebAuthnCredential().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthnCredential | PlainMessage<WebAuthnCredential> | undefined, b: WebAuthnCredential | PlainMessage<WebAuthnCredential> | undefined): boolean {
    return proto3.util.equals(WebAuthnCredential, a, b);
  }
}

/**
 * CredentialProof represents a cryptographic proof for a verifiable
 * credential
 *
 * @generated from message did.v1.CredentialProof
 */
export class CredentialProof extends Message<CredentialProof> {
  /**
   * proof_kind is the proof type
   *
   * @generated from field: string proof_kind = 1;
   */
  proofKind = "";

  /**
   * created is when the proof was created
   *
   * @generated from field: string created = 2;
   */
  created = "";

  /**
   * verificationMethod is the verification method used
   *
   * @generated from field: string verification_method = 3;
   */
  verificationMethod = "";

  /**
   * proofPurpose is the purpose of the proof
   *
   * @generated from field: string proof_purpose = 4;
   */
  proofPurpose = "";

  /**
   * signature is the cryptographic signature
   *
   * @generated from field: string signature = 5;
   */
  signature = "";

  /**
   * Additional proof properties
   *
   * @generated from field: map<string, string> properties = 6;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CredentialProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.CredentialProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proof_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verification_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "proof_purpose", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialProof {
    return new CredentialProof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialProof {
    return new CredentialProof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialProof {
    return new CredentialProof().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialProof | PlainMessage<CredentialProof> | undefined, b: CredentialProof | PlainMessage<CredentialProof> | undefined): boolean {
    return proto3.util.equals(CredentialProof, a, b);
  }
}

/**
 * CredentialStatus represents the revocation status of a credential
 *
 * @generated from message did.v1.CredentialStatus
 */
export class CredentialStatus extends Message<CredentialStatus> {
  /**
   * id is the status identifier
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * status_kind is the status type
   *
   * @generated from field: string status_kind = 2;
   */
  statusKind = "";

  /**
   * Additional status properties
   *
   * @generated from field: map<string, string> properties = 3;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CredentialStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.CredentialStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialStatus {
    return new CredentialStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialStatus {
    return new CredentialStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialStatus {
    return new CredentialStatus().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialStatus | PlainMessage<CredentialStatus> | undefined, b: CredentialStatus | PlainMessage<CredentialStatus> | undefined): boolean {
    return proto3.util.equals(CredentialStatus, a, b);
  }
}

