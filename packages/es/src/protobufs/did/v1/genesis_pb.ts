// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/genesis.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * GenesisState defines the module genesis state
 *
 * @generated from message did.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params defines all the parameters of the module.
   *
   * @generated from field: did.v1.Params params = 1;
   */
  params?: Params;

  /**
   * Export format version for future migrations
   *
   * @generated from field: uint32 export_version = 2;
   */
  exportVersion = 0;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "export_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the set of module parameters.
 *
 * @generated from message did.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: did.v1.DocumentParams document = 1;
   */
  document?: DocumentParams;

  /**
   * @generated from field: did.v1.WebauthnParams webauthn = 2;
   */
  webauthn?: WebauthnParams;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document", kind: "message", T: DocumentParams },
    { no: 2, name: "webauthn", kind: "message", T: WebauthnParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * DocumentParams defines the parameters for the DID module.
 *
 * @generated from message did.v1.DocumentParams
 */
export class DocumentParams extends Message<DocumentParams> {
  /**
   * AutoCreateVault enables automatic vault creation upon DID registration
   *
   * @generated from field: bool auto_create_vault = 1;
   */
  autoCreateVault = false;

  /**
   * MaxVerificationMethods limits the number of verification methods
   *
   * @generated from field: int32 max_verification_methods = 2;
   */
  maxVerificationMethods = 0;

  /**
   * MaxServiceEndpoints limits the number of service endpoints
   *
   * @generated from field: int32 max_service_endpoints = 3;
   */
  maxServiceEndpoints = 0;

  /**
   * MaxControllers limits the number of controllers per DID document
   *
   * @generated from field: int32 max_controllers = 4;
   */
  maxControllers = 0;

  /**
   * DidDocumentMaxSize limits the maximum size of a DID document in bytes
   *
   * @generated from field: int64 did_document_max_size = 5;
   */
  didDocumentMaxSize = protoInt64.zero;

  /**
   * DidResolutionTimeout is the timeout for resolution operations in seconds
   *
   * @generated from field: int64 did_resolution_timeout = 6;
   */
  didResolutionTimeout = protoInt64.zero;

  /**
   * KeyRotationInterval is the recommended interval for key rotation in seconds
   *
   * @generated from field: int64 key_rotation_interval = 7;
   */
  keyRotationInterval = protoInt64.zero;

  /**
   * CredentialLifetime is the default lifetime in seconds
   *
   * @generated from field: int64 credential_lifetime = 8;
   */
  credentialLifetime = protoInt64.zero;

  /**
   * Supported Assertion methods
   *
   * @generated from field: repeated string supported_assertion_methods = 9;
   */
  supportedAssertionMethods: string[] = [];

  /**
   * Supported Authentication methods
   *
   * @generated from field: repeated string supported_authentication_methods = 10;
   */
  supportedAuthenticationMethods: string[] = [];

  /**
   * Supported Invocation methods
   *
   * @generated from field: repeated string supported_invocation_methods = 11;
   */
  supportedInvocationMethods: string[] = [];

  /**
   * Supported Delegation methods
   *
   * @generated from field: repeated string supported_delegation_methods = 12;
   */
  supportedDelegationMethods: string[] = [];

  constructor(data?: PartialMessage<DocumentParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.DocumentParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auto_create_vault", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "max_verification_methods", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "max_service_endpoints", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "max_controllers", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "did_document_max_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "did_resolution_timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "key_rotation_interval", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "credential_lifetime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "supported_assertion_methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "supported_authentication_methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "supported_invocation_methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "supported_delegation_methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentParams {
    return new DocumentParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentParams {
    return new DocumentParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentParams {
    return new DocumentParams().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentParams | PlainMessage<DocumentParams> | undefined, b: DocumentParams | PlainMessage<DocumentParams> | undefined): boolean {
    return proto3.util.equals(DocumentParams, a, b);
  }
}

/**
 * WebauthnParams defines the parameters for the WebAuthn module.
 *
 * @generated from message did.v1.WebauthnParams
 */
export class WebauthnParams extends Message<WebauthnParams> {
  /**
   * ChallengeTimeout is the default timeout in seconds
   *
   * @generated from field: int64 challenge_timeout = 1;
   */
  challengeTimeout = protoInt64.zero;

  /**
   * AllowedOrigins are the allowed WebAuthn origins for credential creation
   *
   * @generated from field: repeated string allowed_origins = 2;
   */
  allowedOrigins: string[] = [];

  /**
   * SupportedAlgorithms are the supported signature for WebAuthn credentials
   *
   * @generated from field: repeated string supported_algorithms = 3;
   */
  supportedAlgorithms: string[] = [];

  /**
   * RequireUserVerification enforces verification for WebAuthn credentials
   *
   * @generated from field: bool require_user_verification = 4;
   */
  requireUserVerification = false;

  /**
   * MaxCredentialsPerDID limits the number of WebAuthn credentials per DID
   *
   * @generated from field: int32 max_credentials_per_did = 5;
   */
  maxCredentialsPerDid = 0;

  /**
   * DefaultRPID is the default Relying Party ID for WebAuthn operations
   *
   * @generated from field: string default_rp_id = 6;
   */
  defaultRpId = "";

  /**
   * DefaultRPName is the default Relying Party name for WebAuthn operations
   *
   * @generated from field: string default_rp_name = 7;
   */
  defaultRpName = "";

  constructor(data?: PartialMessage<WebauthnParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.WebauthnParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge_timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "allowed_origins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "supported_algorithms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "require_user_verification", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "max_credentials_per_did", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "default_rp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "default_rp_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebauthnParams {
    return new WebauthnParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebauthnParams {
    return new WebauthnParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebauthnParams {
    return new WebauthnParams().fromJsonString(jsonString, options);
  }

  static equals(a: WebauthnParams | PlainMessage<WebauthnParams> | undefined, b: WebauthnParams | PlainMessage<WebauthnParams> | undefined): boolean {
    return proto3.util.equals(WebauthnParams, a, b);
  }
}

