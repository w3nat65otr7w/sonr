// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file did/v1/tx.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgAddService, MsgAddServiceResponse, MsgAddVerificationMethod, MsgAddVerificationMethodResponse, MsgCreateDID, MsgCreateDIDResponse, MsgDeactivateDID, MsgDeactivateDIDResponse, MsgIssueVerifiableCredential, MsgIssueVerifiableCredentialResponse, MsgLinkExternalWallet, MsgLinkExternalWalletResponse, MsgRegisterWebAuthnCredential, MsgRegisterWebAuthnCredentialResponse, MsgRemoveService, MsgRemoveServiceResponse, MsgRemoveVerificationMethod, MsgRemoveVerificationMethodResponse, MsgRevokeVerifiableCredential, MsgRevokeVerifiableCredentialResponse, MsgUpdateDID, MsgUpdateDIDResponse, MsgUpdateParams, MsgUpdateParamsResponse } from "./tx_pb.js";

const TYPE_NAME = "did.v1.Msg";

/**
 * UpdateParams defines a governance operation for updating the parameters.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from rpc did.v1.Msg.UpdateParams
 */
export const MsgUpdateParamsService = {
  typeName: TYPE_NAME,
  method: "UpdateParams",
  Request: MsgUpdateParams,
  Response: MsgUpdateParamsResponse,
} as const;

/**
 * CreateDID creates a new DID document
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "did_tx_docs.md"}}
 *
 * @generated from rpc did.v1.Msg.CreateDID
 */
export const MsgCreateDIDService = {
  typeName: TYPE_NAME,
  method: "CreateDID",
  Request: MsgCreateDID,
  Response: MsgCreateDIDResponse,
} as const;

/**
 * UpdateDID updates an existing DID document
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "did_tx_docs.md"}}
 *
 * @generated from rpc did.v1.Msg.UpdateDID
 */
export const MsgUpdateDIDService = {
  typeName: TYPE_NAME,
  method: "UpdateDID",
  Request: MsgUpdateDID,
  Response: MsgUpdateDIDResponse,
} as const;

/**
 * DeactivateDID deactivates a DID document
 *
 * @generated from rpc did.v1.Msg.DeactivateDID
 */
export const MsgDeactivateDIDService = {
  typeName: TYPE_NAME,
  method: "DeactivateDID",
  Request: MsgDeactivateDID,
  Response: MsgDeactivateDIDResponse,
} as const;

/**
 * AddVerificationMethod adds a new verification method to a DID document
 *
 * @generated from rpc did.v1.Msg.AddVerificationMethod
 */
export const MsgAddVerificationMethodService = {
  typeName: TYPE_NAME,
  method: "AddVerificationMethod",
  Request: MsgAddVerificationMethod,
  Response: MsgAddVerificationMethodResponse,
} as const;

/**
 * RemoveVerificationMethod removes a verification method from a DID document
 *
 * @generated from rpc did.v1.Msg.RemoveVerificationMethod
 */
export const MsgRemoveVerificationMethodService = {
  typeName: TYPE_NAME,
  method: "RemoveVerificationMethod",
  Request: MsgRemoveVerificationMethod,
  Response: MsgRemoveVerificationMethodResponse,
} as const;

/**
 * AddService adds a new service endpoint to a DID document
 *
 * @generated from rpc did.v1.Msg.AddService
 */
export const MsgAddServiceService = {
  typeName: TYPE_NAME,
  method: "AddService",
  Request: MsgAddService,
  Response: MsgAddServiceResponse,
} as const;

/**
 * RemoveService removes a service endpoint from a DID document
 *
 * @generated from rpc did.v1.Msg.RemoveService
 */
export const MsgRemoveServiceService = {
  typeName: TYPE_NAME,
  method: "RemoveService",
  Request: MsgRemoveService,
  Response: MsgRemoveServiceResponse,
} as const;

/**
 * IssueVerifiableCredential issues a new verifiable credential
 *
 * @generated from rpc did.v1.Msg.IssueVerifiableCredential
 */
export const MsgIssueVerifiableCredentialService = {
  typeName: TYPE_NAME,
  method: "IssueVerifiableCredential",
  Request: MsgIssueVerifiableCredential,
  Response: MsgIssueVerifiableCredentialResponse,
} as const;

/**
 * RevokeVerifiableCredential revokes a verifiable credential
 *
 * @generated from rpc did.v1.Msg.RevokeVerifiableCredential
 */
export const MsgRevokeVerifiableCredentialService = {
  typeName: TYPE_NAME,
  method: "RevokeVerifiableCredential",
  Request: MsgRevokeVerifiableCredential,
  Response: MsgRevokeVerifiableCredentialResponse,
} as const;

/**
 * LinkExternalWallet links an external wallet as an assertion method
 *
 * @generated from rpc did.v1.Msg.LinkExternalWallet
 */
export const MsgLinkExternalWalletService = {
  typeName: TYPE_NAME,
  method: "LinkExternalWallet",
  Request: MsgLinkExternalWallet,
  Response: MsgLinkExternalWalletResponse,
} as const;

/**
 * RegisterWebAuthnCredential registers a new WebAuthn credential and creates a DID
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "did_tx_docs.md"}}
 *
 * @generated from rpc did.v1.Msg.RegisterWebAuthnCredential
 */
export const MsgRegisterWebAuthnCredentialService = {
  typeName: TYPE_NAME,
  method: "RegisterWebAuthnCredential",
  Request: MsgRegisterWebAuthnCredential,
  Response: MsgRegisterWebAuthnCredentialResponse,
} as const;

