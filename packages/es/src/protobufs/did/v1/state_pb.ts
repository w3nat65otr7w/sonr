// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/state.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CredentialProof, CredentialStatus, Service, VerificationMethod, VerificationMethodReference } from "./types_pb.js";

/**
 * Authentication is the authentication method to be used by the DID.
 *
 * @generated from message did.v1.Authentication
 */
export class Authentication extends Message<Authentication> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * AssertionKind is the assertion type
   *
   * @generated from field: string did_kind = 5;
   */
  didKind = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Authentication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Authentication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authentication {
    return new Authentication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authentication {
    return new Authentication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authentication {
    return new Authentication().fromJsonString(jsonString, options);
  }

  static equals(a: Authentication | PlainMessage<Authentication> | undefined, b: Authentication | PlainMessage<Authentication> | undefined): boolean {
    return proto3.util.equals(Authentication, a, b);
  }
}

/**
 * Assertion is the assertion method to be used by the DID.
 *
 * @generated from message did.v1.Assertion
 */
export class Assertion extends Message<Assertion> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDKind is the DID type
   *
   * @generated from field: string did_kind = 5;
   */
  didKind = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Assertion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Assertion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assertion {
    return new Assertion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assertion {
    return new Assertion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assertion {
    return new Assertion().fromJsonString(jsonString, options);
  }

  static equals(a: Assertion | PlainMessage<Assertion> | undefined, b: Assertion | PlainMessage<Assertion> | undefined): boolean {
    return proto3.util.equals(Assertion, a, b);
  }
}

/**
 * Controller is the controller method to be used by the DID.
 *
 * @generated from message did.v1.Controller
 */
export class Controller extends Message<Controller> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDKind is the DID type
   *
   * @generated from field: string did_kind = 5;
   */
  didKind = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Controller>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Controller";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Controller {
    return new Controller().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Controller {
    return new Controller().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Controller {
    return new Controller().fromJsonString(jsonString, options);
  }

  static equals(a: Controller | PlainMessage<Controller> | undefined, b: Controller | PlainMessage<Controller> | undefined): boolean {
    return proto3.util.equals(Controller, a, b);
  }
}

/**
 * Delegation is usually an external blockchain account that is used to sign
 * transactions on behalf of the DID
 *
 * @generated from message did.v1.Delegation
 */
export class Delegation extends Message<Delegation> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDKind is the DID type
   *
   * @generated from field: string did_kind = 5;
   */
  didKind = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Delegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Delegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delegation {
    return new Delegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJsonString(jsonString, options);
  }

  static equals(a: Delegation | PlainMessage<Delegation> | undefined, b: Delegation | PlainMessage<Delegation> | undefined): boolean {
    return proto3.util.equals(Delegation, a, b);
  }
}

/**
 * Invocation is usually a smart contract that is used to sign transactions on
 * behalf of the DID
 *
 * @generated from message did.v1.Invocation
 */
export class Invocation extends Message<Invocation> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDKind is the DID type
   *
   * @generated from field: string did_kind = 5;
   */
  didKind = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Invocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Invocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Invocation {
    return new Invocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Invocation {
    return new Invocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Invocation {
    return new Invocation().fromJsonString(jsonString, options);
  }

  static equals(a: Invocation | PlainMessage<Invocation> | undefined, b: Invocation | PlainMessage<Invocation> | undefined): boolean {
    return proto3.util.equals(Invocation, a, b);
  }
}

/**
 * DIDDocument represents a W3C compliant DID Document
 *
 * @generated from message did.v1.DIDDocument
 */
export class DIDDocument extends Message<DIDDocument> {
  /**
   * id is the DID that is the subject of this DID Document (REQUIRED)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * primary_controller identifies the primary entity that controls the DID
   * document (OPTIONAL)
   *
   * @generated from field: string primary_controller = 2;
   */
  primaryController = "";

  /**
   * alsoKnownAs expresses other identifiers for the DID subject (OPTIONAL)
   *
   * @generated from field: repeated string also_known_as = 3;
   */
  alsoKnownAs: string[] = [];

  /**
   * verificationMethod expresses verification methods (OPTIONAL)
   *
   * @generated from field: repeated did.v1.VerificationMethod verification_method = 4;
   */
  verificationMethod: VerificationMethod[] = [];

  /**
   * authentication expresses authentication verification relationships
   * (OPTIONAL)
   *
   * @generated from field: repeated did.v1.VerificationMethodReference authentication = 5;
   */
  authentication: VerificationMethodReference[] = [];

  /**
   * assertionMethod expresses assertion verification relationships (OPTIONAL)
   *
   * @generated from field: repeated did.v1.VerificationMethodReference assertion_method = 6;
   */
  assertionMethod: VerificationMethodReference[] = [];

  /**
   * keyAgreement expresses key agreement verification relationships (OPTIONAL)
   *
   * @generated from field: repeated did.v1.VerificationMethodReference key_agreement = 7;
   */
  keyAgreement: VerificationMethodReference[] = [];

  /**
   * capabilityInvocation expresses capability invocation verification
   * relationships (OPTIONAL)
   *
   * @generated from field: repeated did.v1.VerificationMethodReference capability_invocation = 8;
   */
  capabilityInvocation: VerificationMethodReference[] = [];

  /**
   * capabilityDelegation expresses capability delegation verification
   * relationships (OPTIONAL)
   *
   * @generated from field: repeated did.v1.VerificationMethodReference capability_delegation = 9;
   */
  capabilityDelegation: VerificationMethodReference[] = [];

  /**
   * service expresses service endpoints (OPTIONAL)
   *
   * @generated from field: repeated did.v1.Service service = 10;
   */
  service: Service[] = [];

  /**
   * Block height when the DID document was created
   *
   * @generated from field: int64 created_at = 11;
   */
  createdAt = protoInt64.zero;

  /**
   * Block height when the DID document was last updated
   *
   * @generated from field: int64 updated_at = 12;
   */
  updatedAt = protoInt64.zero;

  /**
   * Whether the DID document is deactivated
   *
   * @generated from field: bool deactivated = 13;
   */
  deactivated = false;

  /**
   * Version number for the DID document
   *
   * @generated from field: uint64 version = 14;
   */
  version = protoInt64.zero;

  constructor(data?: PartialMessage<DIDDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.DIDDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primary_controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "also_known_as", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "verification_method", kind: "message", T: VerificationMethod, repeated: true },
    { no: 5, name: "authentication", kind: "message", T: VerificationMethodReference, repeated: true },
    { no: 6, name: "assertion_method", kind: "message", T: VerificationMethodReference, repeated: true },
    { no: 7, name: "key_agreement", kind: "message", T: VerificationMethodReference, repeated: true },
    { no: 8, name: "capability_invocation", kind: "message", T: VerificationMethodReference, repeated: true },
    { no: 9, name: "capability_delegation", kind: "message", T: VerificationMethodReference, repeated: true },
    { no: 10, name: "service", kind: "message", T: Service, repeated: true },
    { no: 11, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "deactivated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DIDDocument {
    return new DIDDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DIDDocument {
    return new DIDDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DIDDocument {
    return new DIDDocument().fromJsonString(jsonString, options);
  }

  static equals(a: DIDDocument | PlainMessage<DIDDocument> | undefined, b: DIDDocument | PlainMessage<DIDDocument> | undefined): boolean {
    return proto3.util.equals(DIDDocument, a, b);
  }
}

/**
 * DIDDocumentMetadata contains metadata about the DID document
 *
 * @generated from message did.v1.DIDDocumentMetadata
 */
export class DIDDocumentMetadata extends Message<DIDDocumentMetadata> {
  /**
   * did is the DID this metadata belongs to
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * created is when the DID was created
   *
   * @generated from field: int64 created = 2;
   */
  created = protoInt64.zero;

  /**
   * updated is when the DID was last updated
   *
   * @generated from field: int64 updated = 3;
   */
  updated = protoInt64.zero;

  /**
   * deactivated is when the DID was deactivated (if applicable)
   *
   * @generated from field: int64 deactivated = 4;
   */
  deactivated = protoInt64.zero;

  /**
   * version_id is the version identifier
   *
   * @generated from field: string version_id = 5;
   */
  versionId = "";

  /**
   * next_update is when the next update is scheduled (if applicable)
   *
   * @generated from field: int64 next_update = 6;
   */
  nextUpdate = protoInt64.zero;

  /**
   * next_version_id is the next version identifier (if applicable)
   *
   * @generated from field: string next_version_id = 7;
   */
  nextVersionId = "";

  /**
   * equivalentId lists equivalent DIDs
   *
   * @generated from field: repeated string equivalent_id = 8;
   */
  equivalentId: string[] = [];

  /**
   * canonicalId is the canonical DID
   *
   * @generated from field: string canonical_id = 9;
   */
  canonicalId = "";

  constructor(data?: PartialMessage<DIDDocumentMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.DIDDocumentMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "updated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "deactivated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "next_update", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "next_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "equivalent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "canonical_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DIDDocumentMetadata {
    return new DIDDocumentMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DIDDocumentMetadata {
    return new DIDDocumentMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DIDDocumentMetadata {
    return new DIDDocumentMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DIDDocumentMetadata | PlainMessage<DIDDocumentMetadata> | undefined, b: DIDDocumentMetadata | PlainMessage<DIDDocumentMetadata> | undefined): boolean {
    return proto3.util.equals(DIDDocumentMetadata, a, b);
  }
}

/**
 * VerifiableCredential represents a W3C Verifiable Credential
 *
 * @generated from message did.v1.VerifiableCredential
 */
export class VerifiableCredential extends Message<VerifiableCredential> {
  /**
   * id is the credential identifier
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * context is the JSON-LD contexts
   *
   * @generated from field: repeated string context = 2;
   */
  context: string[] = [];

  /**
   * credential_kinds is the credential types
   *
   * @generated from field: repeated string credential_kinds = 3;
   */
  credentialKinds: string[] = [];

  /**
   * issuer is the DID of the credential issuer
   *
   * @generated from field: string issuer = 4;
   */
  issuer = "";

  /**
   * issuanceDate is when the credential was issued
   *
   * @generated from field: string issuance_date = 5;
   */
  issuanceDate = "";

  /**
   * expirationDate is when the credential expires (optional)
   *
   * @generated from field: string expiration_date = 6;
   */
  expirationDate = "";

  /**
   * credentialSubject contains the claims about the subject as JSON
   *
   * @generated from field: bytes credential_subject = 7;
   */
  credentialSubject = new Uint8Array(0);

  /**
   * proof contains the cryptographic proof
   *
   * @generated from field: repeated did.v1.CredentialProof proof = 8;
   */
  proof: CredentialProof[] = [];

  /**
   * credentialStatus contains information about credential revocation
   * (optional)
   *
   * @generated from field: did.v1.CredentialStatus credential_status = 9;
   */
  credentialStatus?: CredentialStatus;

  /**
   * subject is the DID of the credential subject (for indexing)
   *
   * @generated from field: string subject = 10;
   */
  subject = "";

  /**
   * Block height when issued
   *
   * @generated from field: int64 issued_at = 11;
   */
  issuedAt = protoInt64.zero;

  /**
   * Block height when expires (0 if no expiration)
   *
   * @generated from field: int64 expires_at = 12;
   */
  expiresAt = protoInt64.zero;

  /**
   * Whether the credential is revoked
   *
   * @generated from field: bool revoked = 13;
   */
  revoked = false;

  constructor(data?: PartialMessage<VerifiableCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.VerifiableCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "credential_kinds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "issuance_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "expiration_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "credential_subject", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proof", kind: "message", T: CredentialProof, repeated: true },
    { no: 9, name: "credential_status", kind: "message", T: CredentialStatus },
    { no: 10, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "issued_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifiableCredential {
    return new VerifiableCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifiableCredential {
    return new VerifiableCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifiableCredential {
    return new VerifiableCredential().fromJsonString(jsonString, options);
  }

  static equals(a: VerifiableCredential | PlainMessage<VerifiableCredential> | undefined, b: VerifiableCredential | PlainMessage<VerifiableCredential> | undefined): boolean {
    return proto3.util.equals(VerifiableCredential, a, b);
  }
}

/**
 * DIDController represents additional controllers for a DID document
 *
 * @generated from message did.v1.DIDController
 */
export class DIDController extends Message<DIDController> {
  /**
   * id is the auto-incrementing primary key
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * did is the DID this controller belongs to
   *
   * @generated from field: string did = 2;
   */
  did = "";

  /**
   * controller_did is the controller DID
   *
   * @generated from field: string controller_did = 3;
   */
  controllerDid = "";

  /**
   * added_at is when this controller was added
   *
   * @generated from field: int64 added_at = 4;
   */
  addedAt = protoInt64.zero;

  constructor(data?: PartialMessage<DIDController>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.DIDController";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "controller_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "added_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DIDController {
    return new DIDController().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DIDController {
    return new DIDController().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DIDController {
    return new DIDController().fromJsonString(jsonString, options);
  }

  static equals(a: DIDController | PlainMessage<DIDController> | undefined, b: DIDController | PlainMessage<DIDController> | undefined): boolean {
    return proto3.util.equals(DIDController, a, b);
  }
}

