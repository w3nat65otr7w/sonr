// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/query.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { DIDDocument, DIDDocumentMetadata, VerifiableCredential } from "./state_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Service, VerificationMethod, WebAuthnCredential } from "./types_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message did.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message did.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: did.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryResolveDIDRequest is the request type for the Query/ResolveDID RPC
 * method.
 *
 * @generated from message did.v1.QueryResolveDIDRequest
 */
export class QueryResolveDIDRequest extends Message<QueryResolveDIDRequest> {
  /**
   * did is the DID to resolve
   *
   * @generated from field: string did = 1;
   */
  did = "";

  constructor(data?: PartialMessage<QueryResolveDIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryResolveDIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResolveDIDRequest {
    return new QueryResolveDIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResolveDIDRequest {
    return new QueryResolveDIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResolveDIDRequest {
    return new QueryResolveDIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResolveDIDRequest | PlainMessage<QueryResolveDIDRequest> | undefined, b: QueryResolveDIDRequest | PlainMessage<QueryResolveDIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryResolveDIDRequest, a, b);
  }
}

/**
 * QueryResolveDIDResponse is the response type for the Query/ResolveDID RPC
 * method.
 *
 * @generated from message did.v1.QueryResolveDIDResponse
 */
export class QueryResolveDIDResponse extends Message<QueryResolveDIDResponse> {
  /**
   * did_document is the resolved DID document
   *
   * @generated from field: did.v1.DIDDocument did_document = 1;
   */
  didDocument?: DIDDocument;

  /**
   * did_document_metadata contains metadata about the DID document
   *
   * @generated from field: did.v1.DIDDocumentMetadata did_document_metadata = 2;
   */
  didDocumentMetadata?: DIDDocumentMetadata;

  constructor(data?: PartialMessage<QueryResolveDIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryResolveDIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did_document", kind: "message", T: DIDDocument },
    { no: 2, name: "did_document_metadata", kind: "message", T: DIDDocumentMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResolveDIDResponse {
    return new QueryResolveDIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResolveDIDResponse {
    return new QueryResolveDIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResolveDIDResponse {
    return new QueryResolveDIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResolveDIDResponse | PlainMessage<QueryResolveDIDResponse> | undefined, b: QueryResolveDIDResponse | PlainMessage<QueryResolveDIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryResolveDIDResponse, a, b);
  }
}

/**
 * QueryGetDIDDocumentRequest is the request type for the
 * Query/GetDIDDocument RPC method.
 *
 * @generated from message did.v1.QueryGetDIDDocumentRequest
 */
export class QueryGetDIDDocumentRequest extends Message<QueryGetDIDDocumentRequest> {
  /**
   * did is the DID to retrieve
   *
   * @generated from field: string did = 1;
   */
  did = "";

  constructor(data?: PartialMessage<QueryGetDIDDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetDIDDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetDIDDocumentRequest {
    return new QueryGetDIDDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentRequest {
    return new QueryGetDIDDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentRequest {
    return new QueryGetDIDDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetDIDDocumentRequest | PlainMessage<QueryGetDIDDocumentRequest> | undefined, b: QueryGetDIDDocumentRequest | PlainMessage<QueryGetDIDDocumentRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetDIDDocumentRequest, a, b);
  }
}

/**
 * QueryGetDIDDocumentResponse is the response type for the
 * Query/GetDIDDocument RPC method.
 *
 * @generated from message did.v1.QueryGetDIDDocumentResponse
 */
export class QueryGetDIDDocumentResponse extends Message<QueryGetDIDDocumentResponse> {
  /**
   * did_document is the retrieved DID document
   *
   * @generated from field: did.v1.DIDDocument did_document = 1;
   */
  didDocument?: DIDDocument;

  /**
   * did_document_metadata contains metadata about the DID document
   *
   * @generated from field: did.v1.DIDDocumentMetadata did_document_metadata = 2;
   */
  didDocumentMetadata?: DIDDocumentMetadata;

  constructor(data?: PartialMessage<QueryGetDIDDocumentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetDIDDocumentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did_document", kind: "message", T: DIDDocument },
    { no: 2, name: "did_document_metadata", kind: "message", T: DIDDocumentMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetDIDDocumentResponse {
    return new QueryGetDIDDocumentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentResponse {
    return new QueryGetDIDDocumentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentResponse {
    return new QueryGetDIDDocumentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetDIDDocumentResponse | PlainMessage<QueryGetDIDDocumentResponse> | undefined, b: QueryGetDIDDocumentResponse | PlainMessage<QueryGetDIDDocumentResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetDIDDocumentResponse, a, b);
  }
}

/**
 * QueryListDIDDocumentsRequest is the request type for the
 * Query/ListDIDDocuments RPC method.
 *
 * @generated from message did.v1.QueryListDIDDocumentsRequest
 */
export class QueryListDIDDocumentsRequest extends Message<QueryListDIDDocumentsRequest> {
  /**
   * pagination defines an optional pagination for the request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryListDIDDocumentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryListDIDDocumentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryListDIDDocumentsRequest {
    return new QueryListDIDDocumentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryListDIDDocumentsRequest {
    return new QueryListDIDDocumentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryListDIDDocumentsRequest {
    return new QueryListDIDDocumentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryListDIDDocumentsRequest | PlainMessage<QueryListDIDDocumentsRequest> | undefined, b: QueryListDIDDocumentsRequest | PlainMessage<QueryListDIDDocumentsRequest> | undefined): boolean {
    return proto3.util.equals(QueryListDIDDocumentsRequest, a, b);
  }
}

/**
 * QueryListDIDDocumentsResponse is the response type for the
 * Query/ListDIDDocuments RPC method.
 *
 * @generated from message did.v1.QueryListDIDDocumentsResponse
 */
export class QueryListDIDDocumentsResponse extends Message<QueryListDIDDocumentsResponse> {
  /**
   * did_documents is the list of DID documents
   *
   * @generated from field: repeated did.v1.DIDDocument did_documents = 1;
   */
  didDocuments: DIDDocument[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryListDIDDocumentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryListDIDDocumentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did_documents", kind: "message", T: DIDDocument, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryListDIDDocumentsResponse {
    return new QueryListDIDDocumentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryListDIDDocumentsResponse {
    return new QueryListDIDDocumentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryListDIDDocumentsResponse {
    return new QueryListDIDDocumentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryListDIDDocumentsResponse | PlainMessage<QueryListDIDDocumentsResponse> | undefined, b: QueryListDIDDocumentsResponse | PlainMessage<QueryListDIDDocumentsResponse> | undefined): boolean {
    return proto3.util.equals(QueryListDIDDocumentsResponse, a, b);
  }
}

/**
 * QueryGetDIDDocumentsByControllerRequest is the request type for the
 * Query/GetDIDDocumentsByController RPC method.
 *
 * @generated from message did.v1.QueryGetDIDDocumentsByControllerRequest
 */
export class QueryGetDIDDocumentsByControllerRequest extends Message<QueryGetDIDDocumentsByControllerRequest> {
  /**
   * controller is the controller to search for
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * pagination defines an optional pagination for the request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGetDIDDocumentsByControllerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetDIDDocumentsByControllerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetDIDDocumentsByControllerRequest {
    return new QueryGetDIDDocumentsByControllerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentsByControllerRequest {
    return new QueryGetDIDDocumentsByControllerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentsByControllerRequest {
    return new QueryGetDIDDocumentsByControllerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetDIDDocumentsByControllerRequest | PlainMessage<QueryGetDIDDocumentsByControllerRequest> | undefined, b: QueryGetDIDDocumentsByControllerRequest | PlainMessage<QueryGetDIDDocumentsByControllerRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetDIDDocumentsByControllerRequest, a, b);
  }
}

/**
 * QueryGetDIDDocumentsByControllerResponse is the response type for the
 * Query/GetDIDDocumentsByController RPC method.
 *
 * @generated from message did.v1.QueryGetDIDDocumentsByControllerResponse
 */
export class QueryGetDIDDocumentsByControllerResponse extends Message<QueryGetDIDDocumentsByControllerResponse> {
  /**
   * did_documents is the list of DID documents controlled by the controller
   *
   * @generated from field: repeated did.v1.DIDDocument did_documents = 1;
   */
  didDocuments: DIDDocument[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGetDIDDocumentsByControllerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetDIDDocumentsByControllerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did_documents", kind: "message", T: DIDDocument, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetDIDDocumentsByControllerResponse {
    return new QueryGetDIDDocumentsByControllerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentsByControllerResponse {
    return new QueryGetDIDDocumentsByControllerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetDIDDocumentsByControllerResponse {
    return new QueryGetDIDDocumentsByControllerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetDIDDocumentsByControllerResponse | PlainMessage<QueryGetDIDDocumentsByControllerResponse> | undefined, b: QueryGetDIDDocumentsByControllerResponse | PlainMessage<QueryGetDIDDocumentsByControllerResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetDIDDocumentsByControllerResponse, a, b);
  }
}

/**
 * QueryGetVerificationMethodRequest is the request type for the
 * Query/GetVerificationMethod RPC method.
 *
 * @generated from message did.v1.QueryGetVerificationMethodRequest
 */
export class QueryGetVerificationMethodRequest extends Message<QueryGetVerificationMethodRequest> {
  /**
   * did is the DID that contains the verification method
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * method_id is the ID of the verification method
   *
   * @generated from field: string method_id = 2;
   */
  methodId = "";

  constructor(data?: PartialMessage<QueryGetVerificationMethodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetVerificationMethodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetVerificationMethodRequest {
    return new QueryGetVerificationMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetVerificationMethodRequest {
    return new QueryGetVerificationMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetVerificationMethodRequest {
    return new QueryGetVerificationMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetVerificationMethodRequest | PlainMessage<QueryGetVerificationMethodRequest> | undefined, b: QueryGetVerificationMethodRequest | PlainMessage<QueryGetVerificationMethodRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetVerificationMethodRequest, a, b);
  }
}

/**
 * QueryGetVerificationMethodResponse is the response type for the
 * Query/GetVerificationMethod RPC method.
 *
 * @generated from message did.v1.QueryGetVerificationMethodResponse
 */
export class QueryGetVerificationMethodResponse extends Message<QueryGetVerificationMethodResponse> {
  /**
   * verification_method is the retrieved verification method
   *
   * @generated from field: did.v1.VerificationMethod verification_method = 1;
   */
  verificationMethod?: VerificationMethod;

  constructor(data?: PartialMessage<QueryGetVerificationMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetVerificationMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verification_method", kind: "message", T: VerificationMethod },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetVerificationMethodResponse {
    return new QueryGetVerificationMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetVerificationMethodResponse {
    return new QueryGetVerificationMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetVerificationMethodResponse {
    return new QueryGetVerificationMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetVerificationMethodResponse | PlainMessage<QueryGetVerificationMethodResponse> | undefined, b: QueryGetVerificationMethodResponse | PlainMessage<QueryGetVerificationMethodResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetVerificationMethodResponse, a, b);
  }
}

/**
 * QueryGetServiceRequest is the request type for the Query/GetService RPC
 * method.
 *
 * @generated from message did.v1.QueryGetServiceRequest
 */
export class QueryGetServiceRequest extends Message<QueryGetServiceRequest> {
  /**
   * did is the DID that contains the service
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * service_id is the ID of the service
   *
   * @generated from field: string service_id = 2;
   */
  serviceId = "";

  constructor(data?: PartialMessage<QueryGetServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetServiceRequest {
    return new QueryGetServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetServiceRequest {
    return new QueryGetServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetServiceRequest {
    return new QueryGetServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetServiceRequest | PlainMessage<QueryGetServiceRequest> | undefined, b: QueryGetServiceRequest | PlainMessage<QueryGetServiceRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetServiceRequest, a, b);
  }
}

/**
 * QueryGetServiceResponse is the response type for the Query/GetService
 * RPC method.
 *
 * @generated from message did.v1.QueryGetServiceResponse
 */
export class QueryGetServiceResponse extends Message<QueryGetServiceResponse> {
  /**
   * service is the retrieved service
   *
   * @generated from field: did.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<QueryGetServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetServiceResponse {
    return new QueryGetServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetServiceResponse {
    return new QueryGetServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetServiceResponse {
    return new QueryGetServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetServiceResponse | PlainMessage<QueryGetServiceResponse> | undefined, b: QueryGetServiceResponse | PlainMessage<QueryGetServiceResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetServiceResponse, a, b);
  }
}

/**
 * QueryGetVerifiableCredentialRequest is the request type for the
 * Query/GetVerifiableCredential RPC method.
 *
 * @generated from message did.v1.QueryGetVerifiableCredentialRequest
 */
export class QueryGetVerifiableCredentialRequest extends Message<QueryGetVerifiableCredentialRequest> {
  /**
   * credential_id is the ID of the credential to retrieve
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId = "";

  constructor(data?: PartialMessage<QueryGetVerifiableCredentialRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetVerifiableCredentialRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetVerifiableCredentialRequest {
    return new QueryGetVerifiableCredentialRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetVerifiableCredentialRequest {
    return new QueryGetVerifiableCredentialRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetVerifiableCredentialRequest {
    return new QueryGetVerifiableCredentialRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetVerifiableCredentialRequest | PlainMessage<QueryGetVerifiableCredentialRequest> | undefined, b: QueryGetVerifiableCredentialRequest | PlainMessage<QueryGetVerifiableCredentialRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetVerifiableCredentialRequest, a, b);
  }
}

/**
 * QueryGetVerifiableCredentialResponse is the response type for the
 * Query/GetVerifiableCredential RPC method.
 *
 * @generated from message did.v1.QueryGetVerifiableCredentialResponse
 */
export class QueryGetVerifiableCredentialResponse extends Message<QueryGetVerifiableCredentialResponse> {
  /**
   * credential is the retrieved verifiable credential
   *
   * @generated from field: did.v1.VerifiableCredential credential = 1;
   */
  credential?: VerifiableCredential;

  constructor(data?: PartialMessage<QueryGetVerifiableCredentialResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetVerifiableCredentialResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential", kind: "message", T: VerifiableCredential },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetVerifiableCredentialResponse {
    return new QueryGetVerifiableCredentialResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetVerifiableCredentialResponse {
    return new QueryGetVerifiableCredentialResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetVerifiableCredentialResponse {
    return new QueryGetVerifiableCredentialResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetVerifiableCredentialResponse | PlainMessage<QueryGetVerifiableCredentialResponse> | undefined, b: QueryGetVerifiableCredentialResponse | PlainMessage<QueryGetVerifiableCredentialResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetVerifiableCredentialResponse, a, b);
  }
}

/**
 * QueryListVerifiableCredentialsRequest is the request type for the
 * Query/ListVerifiableCredentials RPC method.
 *
 * @generated from message did.v1.QueryListVerifiableCredentialsRequest
 */
export class QueryListVerifiableCredentialsRequest extends Message<QueryListVerifiableCredentialsRequest> {
  /**
   * pagination defines an optional pagination for the request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * issuer filters by issuer DID (optional)
   *
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * holder filters by holder DID (optional)
   *
   * @generated from field: string holder = 3;
   */
  holder = "";

  /**
   * include_revoked includes revoked credentials (default: false)
   *
   * @generated from field: bool include_revoked = 4;
   */
  includeRevoked = false;

  constructor(data?: PartialMessage<QueryListVerifiableCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryListVerifiableCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "holder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "include_revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryListVerifiableCredentialsRequest {
    return new QueryListVerifiableCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryListVerifiableCredentialsRequest {
    return new QueryListVerifiableCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryListVerifiableCredentialsRequest {
    return new QueryListVerifiableCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryListVerifiableCredentialsRequest | PlainMessage<QueryListVerifiableCredentialsRequest> | undefined, b: QueryListVerifiableCredentialsRequest | PlainMessage<QueryListVerifiableCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(QueryListVerifiableCredentialsRequest, a, b);
  }
}

/**
 * QueryListVerifiableCredentialsResponse is the response type for the
 * Query/ListVerifiableCredentials RPC method.
 *
 * @generated from message did.v1.QueryListVerifiableCredentialsResponse
 */
export class QueryListVerifiableCredentialsResponse extends Message<QueryListVerifiableCredentialsResponse> {
  /**
   * credentials is the list of verifiable credentials
   *
   * @generated from field: repeated did.v1.VerifiableCredential credentials = 1;
   */
  credentials: VerifiableCredential[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryListVerifiableCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryListVerifiableCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credentials", kind: "message", T: VerifiableCredential, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryListVerifiableCredentialsResponse {
    return new QueryListVerifiableCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryListVerifiableCredentialsResponse {
    return new QueryListVerifiableCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryListVerifiableCredentialsResponse {
    return new QueryListVerifiableCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryListVerifiableCredentialsResponse | PlainMessage<QueryListVerifiableCredentialsResponse> | undefined, b: QueryListVerifiableCredentialsResponse | PlainMessage<QueryListVerifiableCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(QueryListVerifiableCredentialsResponse, a, b);
  }
}

/**
 * CredentialInfo wraps credential data with vault status
 *
 * @generated from message did.v1.CredentialInfo
 */
export class CredentialInfo extends Message<CredentialInfo> {
  /**
   * credential can be either verifiable or WebAuthn
   *
   * @generated from oneof did.v1.CredentialInfo.credential
   */
  credential: {
    /**
     * @generated from field: did.v1.VerifiableCredential verifiable_credential = 1;
     */
    value: VerifiableCredential;
    case: "verifiableCredential";
  } | {
    /**
     * @generated from field: did.v1.WebAuthnCredential webauthn_credential = 2;
     */
    value: WebAuthnCredential;
    case: "webauthnCredential";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * vault_id indicates if stored in vault (empty if not)
   *
   * @generated from field: string vault_id = 3;
   */
  vaultId = "";

  /**
   * is_encrypted indicates if encrypted in vault
   *
   * @generated from field: bool is_encrypted = 4;
   */
  isEncrypted = false;

  constructor(data?: PartialMessage<CredentialInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.CredentialInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verifiable_credential", kind: "message", T: VerifiableCredential, oneof: "credential" },
    { no: 2, name: "webauthn_credential", kind: "message", T: WebAuthnCredential, oneof: "credential" },
    { no: 3, name: "vault_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_encrypted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialInfo {
    return new CredentialInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialInfo {
    return new CredentialInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialInfo {
    return new CredentialInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialInfo | PlainMessage<CredentialInfo> | undefined, b: CredentialInfo | PlainMessage<CredentialInfo> | undefined): boolean {
    return proto3.util.equals(CredentialInfo, a, b);
  }
}

/**
 * QueryGetCredentialsByDIDRequest is the request type for the
 * Query/GetCredentialsByDID RPC method.
 *
 * @generated from message did.v1.QueryGetCredentialsByDIDRequest
 */
export class QueryGetCredentialsByDIDRequest extends Message<QueryGetCredentialsByDIDRequest> {
  /**
   * did is the DID to retrieve all credentials for
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * include_verifiable includes verifiable credentials (default: true)
   *
   * @generated from field: bool include_verifiable = 2;
   */
  includeVerifiable = false;

  /**
   * include_webauthn includes WebAuthn credentials (default: true)
   *
   * @generated from field: bool include_webauthn = 3;
   */
  includeWebauthn = false;

  /**
   * include_revoked includes revoked credentials (default: false)
   *
   * @generated from field: bool include_revoked = 4;
   */
  includeRevoked = false;

  /**
   * pagination defines an optional pagination for the request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 5;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGetCredentialsByDIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetCredentialsByDIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "include_verifiable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_webauthn", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "include_revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCredentialsByDIDRequest {
    return new QueryGetCredentialsByDIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCredentialsByDIDRequest {
    return new QueryGetCredentialsByDIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCredentialsByDIDRequest {
    return new QueryGetCredentialsByDIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCredentialsByDIDRequest | PlainMessage<QueryGetCredentialsByDIDRequest> | undefined, b: QueryGetCredentialsByDIDRequest | PlainMessage<QueryGetCredentialsByDIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetCredentialsByDIDRequest, a, b);
  }
}

/**
 * QueryGetCredentialsByDIDResponse is the response type for the
 * Query/GetCredentialsByDID RPC method.
 *
 * @generated from message did.v1.QueryGetCredentialsByDIDResponse
 */
export class QueryGetCredentialsByDIDResponse extends Message<QueryGetCredentialsByDIDResponse> {
  /**
   * credentials is the list of all credentials associated with the DID
   *
   * @generated from field: repeated did.v1.CredentialInfo credentials = 1;
   */
  credentials: CredentialInfo[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGetCredentialsByDIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryGetCredentialsByDIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credentials", kind: "message", T: CredentialInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCredentialsByDIDResponse {
    return new QueryGetCredentialsByDIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCredentialsByDIDResponse {
    return new QueryGetCredentialsByDIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCredentialsByDIDResponse {
    return new QueryGetCredentialsByDIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCredentialsByDIDResponse | PlainMessage<QueryGetCredentialsByDIDResponse> | undefined, b: QueryGetCredentialsByDIDResponse | PlainMessage<QueryGetCredentialsByDIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetCredentialsByDIDResponse, a, b);
  }
}

/**
 * QueryRegisterStartRequest is the request type for the
 * Query/RegisterStart RPC method.
 *
 * @generated from message did.v1.QueryRegisterStartRequest
 */
export class QueryRegisterStartRequest extends Message<QueryRegisterStartRequest> {
  /**
   * assertion_did is the DID to register (did:sonr:email:<blake3> or did:sonr:phone:<blake3>)
   *
   * @generated from field: string assertion_did = 1;
   */
  assertionDid = "";

  constructor(data?: PartialMessage<QueryRegisterStartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryRegisterStartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assertion_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRegisterStartRequest {
    return new QueryRegisterStartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRegisterStartRequest {
    return new QueryRegisterStartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRegisterStartRequest {
    return new QueryRegisterStartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRegisterStartRequest | PlainMessage<QueryRegisterStartRequest> | undefined, b: QueryRegisterStartRequest | PlainMessage<QueryRegisterStartRequest> | undefined): boolean {
    return proto3.util.equals(QueryRegisterStartRequest, a, b);
  }
}

/**
 * QueryRegisterStartResponse is the response type for the
 * Query/RegisterStart RPC method.
 *
 * @generated from message did.v1.QueryRegisterStartResponse
 */
export class QueryRegisterStartResponse extends Message<QueryRegisterStartResponse> {
  /**
   * challenge for the attestation ceremony (32 bytes)
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge = new Uint8Array(0);

  /**
   * relying_party_id identifier
   *
   * @generated from field: string relying_party_id = 2;
   */
  relyingPartyId = "";

  /**
   * user information (id, name, displayName)
   *
   * @generated from field: map<string, string> user = 3;
   */
  user: { [key: string]: string } = {};

  constructor(data?: PartialMessage<QueryRegisterStartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryRegisterStartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "relying_party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRegisterStartResponse {
    return new QueryRegisterStartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRegisterStartResponse {
    return new QueryRegisterStartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRegisterStartResponse {
    return new QueryRegisterStartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRegisterStartResponse | PlainMessage<QueryRegisterStartResponse> | undefined, b: QueryRegisterStartResponse | PlainMessage<QueryRegisterStartResponse> | undefined): boolean {
    return proto3.util.equals(QueryRegisterStartResponse, a, b);
  }
}

/**
 * QueryLoginStartRequest is the request type for the
 * Query/LoginStart RPC method.
 *
 * @generated from message did.v1.QueryLoginStartRequest
 */
export class QueryLoginStartRequest extends Message<QueryLoginStartRequest> {
  /**
   * assertion_did is the assertion DID (did:sonr:email:<blake3> or did:sonr:phone:<blake3>)
   *
   * @generated from field: string assertion_did = 1;
   */
  assertionDid = "";

  constructor(data?: PartialMessage<QueryLoginStartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryLoginStartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assertion_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLoginStartRequest {
    return new QueryLoginStartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLoginStartRequest {
    return new QueryLoginStartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLoginStartRequest {
    return new QueryLoginStartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLoginStartRequest | PlainMessage<QueryLoginStartRequest> | undefined, b: QueryLoginStartRequest | PlainMessage<QueryLoginStartRequest> | undefined): boolean {
    return proto3.util.equals(QueryLoginStartRequest, a, b);
  }
}

/**
 * QueryLoginStartResponse is the response type for the
 * Query/LoginStart RPC method.
 *
 * @generated from message did.v1.QueryLoginStartResponse
 */
export class QueryLoginStartResponse extends Message<QueryLoginStartResponse> {
  /**
   * credential_ids associated with this assertion
   *
   * @generated from field: repeated string credential_ids = 1;
   */
  credentialIds: string[] = [];

  /**
   * challenge for the assertion ceremony (32 bytes)
   *
   * @generated from field: bytes challenge = 2;
   */
  challenge = new Uint8Array(0);

  /**
   * relying_party_id identifier
   *
   * @generated from field: string relying_party_id = 3;
   */
  relyingPartyId = "";

  constructor(data?: PartialMessage<QueryLoginStartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryLoginStartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "challenge", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "relying_party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLoginStartResponse {
    return new QueryLoginStartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLoginStartResponse {
    return new QueryLoginStartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLoginStartResponse {
    return new QueryLoginStartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLoginStartResponse | PlainMessage<QueryLoginStartResponse> | undefined, b: QueryLoginStartResponse | PlainMessage<QueryLoginStartResponse> | undefined): boolean {
    return proto3.util.equals(QueryLoginStartResponse, a, b);
  }
}

