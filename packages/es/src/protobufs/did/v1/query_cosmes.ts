// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file did/v1/query.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryGetCredentialsByDIDRequest, QueryGetCredentialsByDIDResponse, QueryGetDIDDocumentRequest, QueryGetDIDDocumentResponse, QueryGetDIDDocumentsByControllerRequest, QueryGetDIDDocumentsByControllerResponse, QueryGetServiceRequest, QueryGetServiceResponse, QueryGetVerifiableCredentialRequest, QueryGetVerifiableCredentialResponse, QueryGetVerificationMethodRequest, QueryGetVerificationMethodResponse, QueryListDIDDocumentsRequest, QueryListDIDDocumentsResponse, QueryListVerifiableCredentialsRequest, QueryListVerifiableCredentialsResponse, QueryLoginStartRequest, QueryLoginStartResponse, QueryParamsRequest, QueryParamsResponse, QueryRegisterStartRequest, QueryRegisterStartResponse, QueryResolveDIDRequest, QueryResolveDIDResponse } from "./query_pb.js";

const TYPE_NAME = "did.v1.Query";

/**
 * Params queries all parameters of the module.
 *
 * @generated from rpc did.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * ResolveDID resolves a DID to its DID document
 *
 * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
 * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
 *
 * {{import "did_query_docs.md"}}
 *
 * @generated from rpc did.v1.Query.ResolveDID
 */
export const QueryResolveDIDService = {
  typeName: TYPE_NAME,
  method: "ResolveDID",
  Request: QueryResolveDIDRequest,
  Response: QueryResolveDIDResponse,
} as const;

/**
 * GetDIDDocument retrieves a DID document by its ID
 *
 * @generated from rpc did.v1.Query.GetDIDDocument
 */
export const QueryGetDIDDocumentService = {
  typeName: TYPE_NAME,
  method: "GetDIDDocument",
  Request: QueryGetDIDDocumentRequest,
  Response: QueryGetDIDDocumentResponse,
} as const;

/**
 * ListDIDDocuments lists all DID documents with pagination
 *
 * @generated from rpc did.v1.Query.ListDIDDocuments
 */
export const QueryListDIDDocumentsService = {
  typeName: TYPE_NAME,
  method: "ListDIDDocuments",
  Request: QueryListDIDDocumentsRequest,
  Response: QueryListDIDDocumentsResponse,
} as const;

/**
 * GetDIDDocumentsByController retrieves DID documents by controller
 *
 * @generated from rpc did.v1.Query.GetDIDDocumentsByController
 */
export const QueryGetDIDDocumentsByControllerService = {
  typeName: TYPE_NAME,
  method: "GetDIDDocumentsByController",
  Request: QueryGetDIDDocumentsByControllerRequest,
  Response: QueryGetDIDDocumentsByControllerResponse,
} as const;

/**
 * GetVerificationMethod retrieves a specific verification method
 *
 * @generated from rpc did.v1.Query.GetVerificationMethod
 */
export const QueryGetVerificationMethodService = {
  typeName: TYPE_NAME,
  method: "GetVerificationMethod",
  Request: QueryGetVerificationMethodRequest,
  Response: QueryGetVerificationMethodResponse,
} as const;

/**
 * GetService retrieves a specific service endpoint
 *
 * @generated from rpc did.v1.Query.GetService
 */
export const QueryGetServiceService = {
  typeName: TYPE_NAME,
  method: "GetService",
  Request: QueryGetServiceRequest,
  Response: QueryGetServiceResponse,
} as const;

/**
 * GetVerifiableCredential retrieves a verifiable credential by ID
 *
 * @generated from rpc did.v1.Query.GetVerifiableCredential
 */
export const QueryGetVerifiableCredentialService = {
  typeName: TYPE_NAME,
  method: "GetVerifiableCredential",
  Request: QueryGetVerifiableCredentialRequest,
  Response: QueryGetVerifiableCredentialResponse,
} as const;

/**
 * ListVerifiableCredentials lists all verifiable credentials with filtering options
 *
 * @generated from rpc did.v1.Query.ListVerifiableCredentials
 */
export const QueryListVerifiableCredentialsService = {
  typeName: TYPE_NAME,
  method: "ListVerifiableCredentials",
  Request: QueryListVerifiableCredentialsRequest,
  Response: QueryListVerifiableCredentialsResponse,
} as const;

/**
 * GetCredentialsByDID retrieves all credentials (verifiable and WebAuthn) associated with a DID
 *
 * @generated from rpc did.v1.Query.GetCredentialsByDID
 */
export const QueryGetCredentialsByDIDService = {
  typeName: TYPE_NAME,
  method: "GetCredentialsByDID",
  Request: QueryGetCredentialsByDIDRequest,
  Response: QueryGetCredentialsByDIDResponse,
} as const;

/**
 * RegisterStart represents the start of the registration process
 *
 * @generated from rpc did.v1.Query.RegisterStart
 */
export const QueryRegisterStartService = {
  typeName: TYPE_NAME,
  method: "RegisterStart",
  Request: QueryRegisterStartRequest,
  Response: QueryRegisterStartResponse,
} as const;

/**
 * LoginStart represents the start of the login process
 *
 * @generated from rpc did.v1.Query.LoginStart
 */
export const QueryLoginStartService = {
  typeName: TYPE_NAME,
  method: "LoginStart",
  Request: QueryLoginStartRequest,
  Response: QueryLoginStartResponse,
} as const;

